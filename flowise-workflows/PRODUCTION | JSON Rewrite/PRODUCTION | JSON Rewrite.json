{
  "analytic": "{\"langSmith\":{\"credentialId\":\"9fb56a6f-2c15-486c-9125-6fd27091d002\",\"projectName\":\"Interseas | Reescrita JSON\",\"status\":true}}",
  "apiConfig": null,
  "apikeyid": null,
  "category": "Prod",
  "chatbotConfig": null,
  "createdDate": "2024-11-22T13:25:03.254Z",
  "deployed": false,
  "flowData": "{\"nodes\":[{\"id\":\"seqStart_0\",\"position\":{\"x\":-220.2325786571778,\"y\":575.0711006473011},\"type\":\"customNode\",\"data\":{\"label\":\"Start\",\"name\":\"seqStart\",\"version\":2,\"type\":\"Start\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/start.svg\",\"category\":\"Sequential Agents\",\"description\":\"Starting point of the conversation\",\"baseClasses\":[\"Start\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-1.-start-node\",\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"agentMemory\":\"\",\"state\":\"{{seqState_0.data.instance}}\",\"inputModeration\":\"\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/Start.js\",\"inputAnchors\":[{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"description\":\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat\",\"id\":\"seqStart_0-input-model-BaseChatModel\"},{\"label\":\"Agent Memory\",\"name\":\"agentMemory\",\"type\":\"BaseCheckpointSaver\",\"description\":\"Save the state of the agent\",\"optional\":true,\"id\":\"seqStart_0-input-agentMemory-BaseCheckpointSaver\"},{\"label\":\"State\",\"name\":\"state\",\"type\":\"State\",\"description\":\"State is an object that is updated by nodes in the graph, passing from one node to another. By default, state contains \\\"messages\\\" that got updated with each message sent and received.\",\"optional\":true,\"id\":\"seqStart_0-input-state-State\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"seqStart_0-input-inputModeration-Moderation\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqStart_0-output-seqStart-Start\",\"name\":\"seqStart\",\"label\":\"Start\",\"description\":\"Starting point of the conversation\",\"type\":\"Start\"}],\"id\":\"seqStart_0\",\"selected\":false},\"width\":300,\"height\":383,\"positionAbsolute\":{\"x\":-220.2325786571778,\"y\":575.0711006473011},\"selected\":false,\"dragging\":false},{\"id\":\"seqLoop_0\",\"position\":{\"x\":2885.4516846939737,\"y\":1173.341293893764},\"type\":\"customNode\",\"data\":{\"label\":\"Loop\",\"name\":\"seqLoop\",\"version\":2,\"type\":\"Loop\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Loop/loop.svg\",\"category\":\"Sequential Agents\",\"description\":\"Loop back to the specific sequential node\",\"baseClasses\":[\"Loop\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-9.-loop-node\",\"inputs\":{\"sequentialNode\":[\"{{seqAgent_3.data.instance}}\"],\"loopToName\":\"json-verifier\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Loop/Loop.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqLoop_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[{\"label\":\"Loop To\",\"name\":\"loopToName\",\"description\":\"Name of the agent/llm to loop back to\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqLoop_0-input-loopToName-string\"}],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqLoop_0\",\"selected\":false},\"width\":300,\"height\":242,\"positionAbsolute\":{\"x\":2885.4516846939737,\"y\":1173.341293893764},\"selected\":false,\"dragging\":false},{\"id\":\"seqEnd_0\",\"position\":{\"x\":1938.9663759322284,\"y\":306.60572259637115},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_1.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_0\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":1938.9663759322284,\"y\":306.60572259637115},\"selected\":false,\"dragging\":false},{\"id\":\"chatOpenAI_0\",\"position\":{\"x\":-853.4297536114041,\"y\":263.42591036517575},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"ChatOpenAI\",\"name\":\"chatOpenAI\",\"version\":8,\"type\":\"ChatOpenAI\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg\",\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"credential\":\"a0fffb09-1722-4f82-8532-e2bba4363b32\",\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-4o-mini\",\"temperature\":\"0\",\"streaming\":true,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"proxyUrl\":\"\",\"stopSequence\":\"\",\"baseOptions\":\"\",\"allowImageUploads\":\"\",\"imageResolution\":\"low\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js\",\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"asyncOptions\",\"loadMethod\":\"listModels\",\"default\":\"gpt-4o-mini\",\"id\":\"chatOpenAI_0-input-modelName-asyncOptions\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Streaming\",\"name\":\"streaming\",\"type\":\"boolean\",\"default\":true,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-streaming-boolean\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"Proxy Url\",\"name\":\"proxyUrl\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-proxyUrl-string\"},{\"label\":\"Stop Sequence\",\"name\":\"stopSequence\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"description\":\"List of stop words to use when generating. Use comma to separate multiple stop words.\",\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-stopSequence-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"},{\"label\":\"Allow Image Uploads\",\"name\":\"allowImageUploads\",\"type\":\"boolean\",\"description\":\"Allow image input. Refer to the <a href=\\\"https://docs.flowiseai.com/using-flowise/uploads#image\\\" target=\\\"_blank\\\">docs</a> for more details.\",\"default\":false,\"optional\":true,\"id\":\"chatOpenAI_0-input-allowImageUploads-boolean\"},{\"label\":\"Image Resolution\",\"description\":\"This parameter controls the resolution in which the model views the image.\",\"name\":\"imageResolution\",\"type\":\"options\",\"options\":[{\"label\":\"Low\",\"name\":\"low\"},{\"label\":\"High\",\"name\":\"high\"},{\"label\":\"Auto\",\"name\":\"auto\"}],\"default\":\"low\",\"optional\":false,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-imageResolution-options\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"id\":\"chatOpenAI_0\",\"selected\":false},\"width\":300,\"height\":670,\"selected\":false,\"positionAbsolute\":{\"x\":-853.4297536114041,\"y\":263.42591036517575},\"dragging\":false},{\"id\":\"seqState_0\",\"position\":{\"x\":-838.8690714503688,\"y\":1115.377841116912},\"type\":\"customNode\",\"data\":{\"label\":\"State\",\"name\":\"seqState\",\"version\":2,\"type\":\"State\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/State/state.svg\",\"category\":\"Sequential Agents\",\"description\":\"A centralized state object, updated by nodes in the graph, passing from one node to another\",\"baseClasses\":[\"State\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-3.-state-node\",\"inputs\":{\"stateMemory\":\"stateMemoryUI\",\"stateMemoryUI\":\"[{\\\"key\\\":\\\"currentJson\\\",\\\"type\\\":\\\"Replace\\\",\\\"defaultValue\\\":\\\"\\\",\\\"actions\\\":\\\"\\\",\\\"id\\\":0},{\\\"key\\\":\\\"isCurrentJsonValid\\\",\\\"type\\\":\\\"Replace\\\",\\\"defaultValue\\\":\\\"\\\",\\\"actions\\\":\\\"\\\",\\\"id\\\":1}]\",\"selectedStateTab_seqState_0\":\"stateMemoryUI\",\"stateMemoryCode\":\"{\\n    currentJson: $flow.input,\\n}\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/State/State.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Custom State\",\"name\":\"stateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedStateTab\",\"additionalParams\":true,\"default\":\"stateMemoryUI\",\"tabs\":[{\"label\":\"Custom State (Table)\",\"name\":\"stateMemoryUI\",\"type\":\"datagrid\",\"description\":\"Structure for state. By default, state contains \\\"messages\\\" that got updated with each message sent and received.\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\nSpecify the Key, Operation Type, and Default Value for the state object. The Operation Type can be either \\\"Replace\\\" or \\\"Append\\\".\\n\\n**Replace**\\n- Replace the existing value with the new value.\\n- If the new value is null, the existing value will be retained.\\n\\n**Append**\\n- Append the new value to the existing value.\\n- Default value can be empty or an array. Ex: [\\\"a\\\", \\\"b\\\"]\\n- Final value is an array.\\n\"},\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"editable\":true},{\"field\":\"type\",\"headerName\":\"Operation\",\"type\":\"singleSelect\",\"valueOptions\":[\"Replace\",\"Append\"],\"editable\":true},{\"field\":\"defaultValue\",\"headerName\":\"Default Value\",\"flex\":1,\"editable\":true}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Custom State (Code)\",\"name\":\"stateMemoryCode\",\"type\":\"code\",\"description\":\"JSON object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"{\\n    aggregate: {\\n        value: (x, y) => x.concat(y), // here we append the new message to the existing messages\\n        default: () => []\\n    }\\n}\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqState_0-input-stateMemory-tabs\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqState_0-output-seqState-State\",\"name\":\"seqState\",\"label\":\"State\",\"description\":\"A centralized state object, updated by nodes in the graph, passing from one node to another\",\"type\":\"State\"}],\"id\":\"seqState_0\",\"selected\":false},\"width\":300,\"height\":253,\"selected\":false,\"positionAbsolute\":{\"x\":-838.8690714503688,\"y\":1115.377841116912},\"dragging\":false},{\"id\":\"seqAgent_1\",\"position\":{\"x\":1459.9460499913532,\"y\":-216.490702443549},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"json-checklist-format-corrector\",\"systemMessagePrompt\":\"Você é um desenvolvedor de software sênior, responsável por corrigir o formato do JSON recebido conforme o esperado.\\nVocê deve usar a ferramenta \\\"json-checklist-format-fix\\\" para ajustar o JSON recebido e retornar diretamente seu valor.\\n\\nConsidere que um JSON válido possui as seguintes características:\\n- Um objeto único, nunca uma lista\\n- Dentro desse objeto, sempre deve haver o atributo \\\"checklist\\\"\\n- Dentro desse objeto, pode haver o atributo \\\"conferências\\\"\\n- O atributo \\\"conferências\\\", quando presente, deve estar diretamente dentro do objeto raiz, e nunca dentro do atributo \\n\\\"checklist\\\"\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"empty\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{customTool_2.data.instance}}\"],\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"currentJson\\\":\\\"$flow.state.currentJson\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"1\",\"selectedUpdateStateMemoryTab_seqAgent_1\":\"updateStateMemoryUI\",\"updateStateMemoryUI\":\"[{\\\"key\\\":\\\"currentJson\\\",\\\"value\\\":\\\"$flow.output.usedTools[0].toolOutput\\\",\\\"actions\\\":\\\"\\\",\\\"id\\\":1}]\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_1-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_1-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_1-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_1-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_1-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_1-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_1-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_1-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_1-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_1\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":1459.9460499913532,\"y\":-216.490702443549}},{\"id\":\"seqLLMNode_0\",\"position\":{\"x\":1503.5287275796297,\"y\":1082.1070109688153},\"type\":\"customNode\",\"data\":{\"label\":\"LLM Node\",\"name\":\"seqLLMNode\",\"version\":4,\"type\":\"LLMNode\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/LLMNode/llmNode.svg\",\"category\":\"Sequential Agents\",\"description\":\"Run Chat Model and return the output\",\"baseClasses\":[\"LLMNode\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-5.-llm-node\",\"inputs\":{\"llmNodeName\":\"json-rewriter\",\"systemMessagePrompt\":\"Você é um especialista em JSON e sua função é corrigir o JSON recebido, de forma que ele siga o padrão de saída esperado e esteja corretamente formatado.\\n\\nPadrão de saída esperado:\\n- Um objeto contendo dois atributos - \\\"checklist\\\" e \\\"conferências\\\"\\n- Caso o atributo \\\"conferências\\\" não esteja definido no JSON original, o resultado deve conter apenas o atributo \\\"checklist\\\"\\n- Ambos os atributos podem ter objetos JSON aninhados dentro de si\\n- Formato de saída esperado: (\\\"checklist\\\": (...), \\\"conferências\\\": (...))\\n\\nVocê não deve tentar criar ou deduzir nomes ou valores - se algum valor estiver faltante, devido à incompletude do JSON, apenas defina-o como um valor nulo e corrija a formatação para que o JSON seja corretamente lido.\\n\\nConsidere as seguintes regras ao reescrever:\\n   - Use *JSON de linha única* para correlacionar as chaves e valores.\\n   - *Não utilize Markdown ou formatação extra*. Certifique-se de que o JSON final é válido, sem espaços ou quebras de linha entre os elementos.\\n   - Não deixe quebras de linha no código JSON resultante.\\n\\nExemplo de Estrutura Final com um objeto aninhado em \\\"checklist\\\":\\n(\\\"checklist\\\": (\\\"Exportador\\\": \\\"Empresa XYZ\\\", \\\"Código\\\": \\\"CD-12345\\\", \\\"Importador\\\": \\\"Empresa ABC\\\", \\\"Frete\\\": \\\"null\\\", \\\"Peso Bruto\\\": \\\"500 kg\\\", \\\"Quantidade de Volumes\\\": \\\"10\\\",  \\\"assinatura\\\": \\\"Assinatura identificada!\\\", \\\"Dados de Compliance\\\":(\\\"Data de emissão\\\": \\\"31/10/2024\\\", \\\"Valor total do frete\\\": \\\"1234,95\\\")), \\\"conferências\\\": (\\\"Máquina/Equipamento\\\": \\\"Sim, é uma máquina porque o produto descrito é um sistema automatizado de montagem, com peças mecânicas e operação autônoma.\\\"))\\n\\nNote que nesse exemplo, a seção \\\"checklist\\\" é fechada logo após seu objeto aninhado, antes de iniciar a seção \\\"conferências\\\", e NÃO ao final do objeto.\\n\\nAo reescrever o JSON, utilize a notação correta. Nunca utilize parênteses para delimitar os objetos JSON, apesar da formatação dos exemplos.\\n\\nNunca repita o JSON recebido na saída, mesmo que ele esteja corretamente formatado. Sempre organize-o de maneira diferente para que ele siga o formato esperado e seja válido conforme as regras especificadas.\\n\\nJSON a ser reescrito:\\n{json}\\n\\nJSON corrigido:\\n\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"promptValues\":\"{\\\"json\\\":\\\"$flow.state.currentJson\\\"}\",\"llmStructuredOutput\":\"[]\",\"updateStateMemory\":\"updateStateMemoryUI\",\"selectedUpdateStateMemoryTab_seqLLMNode_0\":\"updateStateMemoryUI\",\"updateStateMemoryUI\":\"[{\\\"key\\\":\\\"currentJson\\\",\\\"value\\\":\\\"$flow.output.content\\\",\\\"actions\\\":\\\"\\\",\\\"id\\\":1}]\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/LLMNode/LLMNode.js\",\"inputAnchors\":[{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqLLMNode_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this node\",\"id\":\"seqLLMNode_0-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Name\",\"name\":\"llmNodeName\",\"type\":\"string\",\"placeholder\":\"LLM\",\"id\":\"seqLLMNode_0-input-llmNodeName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_0-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_0-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqLLMNode_0-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_0-input-humanMessagePrompt-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_0-input-promptValues-json\"},{\"label\":\"JSON Structured Output\",\"name\":\"llmStructuredOutput\",\"type\":\"datagrid\",\"description\":\"Instruct the LLM to give output in a JSON structured schema\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"editable\":true},{\"field\":\"type\",\"headerName\":\"Type\",\"type\":\"singleSelect\",\"valueOptions\":[\"String\",\"String Array\",\"Number\",\"Boolean\",\"Enum\"],\"editable\":true},{\"field\":\"enumValues\",\"headerName\":\"Enum Values\",\"editable\":true},{\"field\":\"description\",\"headerName\":\"Description\",\"flex\":1,\"editable\":true}],\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_0-input-llmStructuredOutput-datagrid\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"default\":\"updateStateMemoryUI\",\"additionalParams\":true,\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the LLM Node's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": 'Hello! How can I assist you today?',\\n        \\\"name\\\": \\\"\\\",\\n        \\\"additional_kwargs\\\": {},\\n        \\\"response_metadata\\\": {},\\n        \\\"tool_calls\\\": [],\\n        \\\"invalid_tool_calls\\\": [],\\n        \\\"usage_metadata\\\": {}\\n    }\\n    ```\\n\\n    For example, if the output `content` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                     |\\n    |-----------|---------------------------|\\n    | user      | `$flow.output.content`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"LLM Node Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"LLM JSON Output Key (string)\",\"value\":\"$flow.output.<replace-with-key>\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the LLM Node's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": 'Hello! How can I assist you today?',\\n        \\\"name\\\": \\\"\\\",\\n        \\\"additional_kwargs\\\": {},\\n        \\\"response_metadata\\\": {},\\n        \\\"tool_calls\\\": [],\\n        \\\"invalid_tool_calls\\\": [],\\n        \\\"usage_metadata\\\": {}\\n    }\\n    ```\\n\\n    For example, if the output `content` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.content\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqLLMNode_0-input-updateStateMemory-tabs\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqLLMNode_0-output-seqLLMNode-LLMNode\",\"name\":\"seqLLMNode\",\"label\":\"LLMNode\",\"description\":\"Run Chat Model and return the output\",\"type\":\"LLMNode\"}],\"id\":\"seqLLMNode_0\",\"selected\":false},\"width\":300,\"height\":451,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":1503.5287275796297,\"y\":1082.1070109688153}},{\"id\":\"seqCondition_0\",\"position\":{\"x\":836.2323818559923,\"y\":516.016952119692},\"type\":\"customNode\",\"data\":{\"label\":\"Condition\",\"name\":\"seqCondition\",\"version\":2,\"type\":\"Condition\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Condition/condition.svg\",\"category\":\"Sequential Agents\",\"description\":\"Conditional function to determine which route to take next\",\"baseClasses\":[\"Condition\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-7.-conditional-node\",\"inputs\":{\"conditionName\":\"verify-json\",\"sequentialNode\":[\"{{seqAgent_2.data.instance}}\"],\"condition\":\"\",\"conditionFunction\":\"if ($flow.state.isCurrentJsonValid || $flow.state.isCurrentJsonValid === 'true') {\\n  return 'Válido';\\n}\\n\\nreturn 'Inválido';\",\"selectedConditionFunctionTab_seqCondition_0\":\"conditionFunction\"},\"outputs\":{\"output\":\"next\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Condition/Condition.js\",\"inputAnchors\":[{\"label\":\"Start | Agent | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\"}],\"inputParams\":[{\"label\":\"Condition Name\",\"name\":\"conditionName\",\"type\":\"string\",\"optional\":true,\"placeholder\":\"If X, then Y\",\"id\":\"seqCondition_0-input-conditionName-string\"},{\"label\":\"Condition\",\"name\":\"condition\",\"type\":\"conditionFunction\",\"tabIdentifier\":\"selectedConditionFunctionTab\",\"tabs\":[{\"label\":\"Condition (Table)\",\"name\":\"conditionUI\",\"type\":\"datagrid\",\"description\":\"If a condition is met, the node connected to the respective output will be executed\",\"optional\":true,\"datagrid\":[{\"field\":\"variable\",\"headerName\":\"Variable\",\"type\":\"freeSolo\",\"editable\":true,\"loadMethod\":[\"getPreviousMessages\",\"loadStateKeys\"],\"valueOptions\":[{\"label\":\"Total Messages (number)\",\"value\":\"$flow.state.messages.length\"},{\"label\":\"First Message Content (string)\",\"value\":\"$flow.state.messages[0].content\"},{\"label\":\"Last Message Content (string)\",\"value\":\"$flow.state.messages[-1].content\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"}],\"flex\":0.5,\"minWidth\":200},{\"field\":\"operation\",\"headerName\":\"Operation\",\"type\":\"singleSelect\",\"valueOptions\":[\"Contains\",\"Not Contains\",\"Start With\",\"End With\",\"Is\",\"Is Not\",\"Is Empty\",\"Is Not Empty\",\"Greater Than\",\"Less Than\",\"Equal To\",\"Not Equal To\",\"Greater Than or Equal To\",\"Less Than or Equal To\"],\"editable\":true,\"flex\":0.4,\"minWidth\":150},{\"field\":\"value\",\"headerName\":\"Value\",\"flex\":1,\"editable\":true},{\"field\":\"output\",\"headerName\":\"Output Name\",\"editable\":true,\"flex\":0.3,\"minWidth\":150}]},{\"label\":\"Condition (Code)\",\"name\":\"conditionFunction\",\"type\":\"code\",\"description\":\"Function to evaluate the condition\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Must return a string value at the end of function. For example:\\n    ```js\\n    if (\\\"X\\\" === \\\"X\\\") {\\n        return \\\"Agent\\\"; // connect to next agent node\\n    } else {\\n        return \\\"End\\\"; // connect to end node\\n    }\\n    ```\\n\\n2. In most cases, you would probably get the last message to do some comparison. You can get all current messages from the state: `$flow.state.messages`:\\n    ```json\\n    [\\n        {\\n            \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n            \\\"name\\\": \\\"\\\",\\n            \\\"additional_kwargs\\\": {},\\n            \\\"response_metadata\\\": {},\\n            \\\"tool_calls\\\": [],\\n            \\\"invalid_tool_calls\\\": [],\\n            \\\"usage_metadata\\\": {}\\n        }\\n    ]\\n    ```\\n\\n    For example, to get the last message content:\\n    ```js\\n    const messages = $flow.state.messages;\\n    const lastMessage = messages[messages.length - 1];\\n\\n    // Proceed to do something with the last message content\\n    ```\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"hideCodeExecute\":true,\"codeExample\":\"const state = $flow.state;\\n                \\nconst messages = state.messages;\\n\\nconst lastMessage = messages[messages.length - 1];\\n\\n/* Check if the last message has content */\\nif (lastMessage.content) {\\n    return \\\"Agent\\\";\\n}\\n\\nreturn \\\"End\\\";\",\"optional\":true}],\"id\":\"seqCondition_0-input-condition-conditionFunction\"}],\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"seqCondition_0-output-inválido-Condition\",\"name\":\"inválido\",\"label\":\"Inválido\",\"type\":\"Condition\",\"isAnchor\":true},{\"id\":\"seqCondition_0-output-válido-Condition\",\"name\":\"válido\",\"label\":\"Válido\",\"type\":\"Condition\",\"isAnchor\":true}]}],\"id\":\"seqCondition_0\",\"selected\":false},\"width\":300,\"height\":475,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":836.2323818559923,\"y\":516.016952119692}},{\"id\":\"seqAgent_2\",\"position\":{\"x\":326.0473668743859,\"y\":228.1181693846513},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"json-verifier\",\"systemMessagePrompt\":\"Você é um desenvolvedor de software sênior, responsável por avaliar um JSON recebido e identificar possíveis erros de formatação ou completude.\\nVocê deve usar a ferramenta \\\"json-format-verifier\\\" para identificar se o JSON recebido é válido e retornar diretamente seu valor.\\n\\nComo input para essa ferramenta, você deve enviar o JSON mais recente atual, identificado pelo estado \\\"currentJson\\\". Caso ele não esteja definido, você deve enviar o \\\"inputJson\\\" como entrada para essa ferramenta.\\n\\ncurrentJson:\\n{currentJson}\\n\\ninputJson:\\n{inputJson}\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"empty\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{customTool_0.data.instance}}\"],\"sequentialNode\":[\"{{seqStart_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"currentJson\\\":\\\"$flow.state.currentJson\\\",\\\"inputJson\\\":\\\"{{question}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"1\",\"selectedUpdateStateMemoryTab_seqAgent_2\":\"updateStateMemoryUI\",\"updateStateMemoryUI\":\"[{\\\"key\\\":\\\"isCurrentJsonValid\\\",\\\"value\\\":\\\"$flow.output.usedTools[0].toolOutput\\\",\\\"actions\\\":\\\"\\\",\\\"id\\\":1}]\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_2-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_2-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_2-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_2-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_2-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_2-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_2-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_2-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_2-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_2\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":326.0473668743859,\"y\":228.1181693846513},\"dragging\":false},{\"id\":\"customTool_0\",\"position\":{\"x\":-194.1148369376661,\"y\":-95.96260249353298},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"Custom Tool\",\"name\":\"customTool\",\"version\":2,\"type\":\"CustomTool\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/customtool.svg\",\"category\":\"Tools\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"inputs\":{\"selectedTool\":\"149a84b0-15e2-4755-b6a9-27eee8ff36cf\",\"returnDirect\":true},\"baseClasses\":[\"CustomTool\",\"Tool\",\"StructuredTool\",\"Runnable\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Select Tool\",\"name\":\"selectedTool\",\"type\":\"asyncOptions\",\"loadMethod\":\"listTools\",\"id\":\"customTool_0-input-selectedTool-asyncOptions\"},{\"label\":\"Return Direct\",\"name\":\"returnDirect\",\"description\":\"Return the output of the tool directly to the user\",\"type\":\"boolean\",\"optional\":true,\"id\":\"customTool_0-input-returnDirect-boolean\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"name\":\"customTool\",\"label\":\"CustomTool\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"type\":\"CustomTool | Tool | StructuredTool | Runnable\"}],\"id\":\"customTool_0\",\"selected\":false},\"width\":300,\"height\":373,\"selected\":false,\"positionAbsolute\":{\"x\":-194.1148369376661,\"y\":-95.96260249353298},\"dragging\":false},{\"id\":\"customTool_1\",\"position\":{\"x\":1891.6752981543727,\"y\":633.0410484151656},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"Custom Tool\",\"name\":\"customTool\",\"version\":2,\"type\":\"CustomTool\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/customtool.svg\",\"category\":\"Tools\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"inputs\":{\"selectedTool\":\"bac0e992-0bb9-4a6b-9778-fdad286f16dc\",\"returnDirect\":true},\"baseClasses\":[\"CustomTool\",\"Tool\",\"StructuredTool\",\"Runnable\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Select Tool\",\"name\":\"selectedTool\",\"type\":\"asyncOptions\",\"loadMethod\":\"listTools\",\"id\":\"customTool_1-input-selectedTool-asyncOptions\"},{\"label\":\"Return Direct\",\"name\":\"returnDirect\",\"description\":\"Return the output of the tool directly to the user\",\"type\":\"boolean\",\"optional\":true,\"id\":\"customTool_1-input-returnDirect-boolean\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"name\":\"customTool\",\"label\":\"CustomTool\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"type\":\"CustomTool | Tool | StructuredTool | Runnable\"}],\"id\":\"customTool_1\",\"selected\":false},\"width\":300,\"height\":373,\"selected\":false,\"positionAbsolute\":{\"x\":1891.6752981543727,\"y\":633.0410484151656},\"dragging\":false},{\"id\":\"seqAgent_3\",\"position\":{\"x\":2311.033718006799,\"y\":843.7002938171429},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"json-cleaner\",\"systemMessagePrompt\":\"Você é um desenvolvedor de software sênior responsável por limpar o JSON e remover caracteres indesejados.\\nNunca utilize formatação markdown. Responda apenas com o código do objeto JSON.\\nNunca remova atributos do objeto JSON.\\n\\nJSON:\\n{currentJson}\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"empty\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{customTool_1.data.instance}}\"],\"sequentialNode\":[\"{{seqLLMNode_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"currentJson\\\":\\\"$flow.state.currentJson\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"1\",\"selectedUpdateStateMemoryTab_seqAgent_3\":\"updateStateMemoryUI\",\"updateStateMemoryUI\":\"[{\\\"key\\\":\\\"currentJson\\\",\\\"value\\\":\\\"$flow.output.usedTools[0].toolOutput\\\",\\\"actions\\\":\\\"\\\",\\\"id\\\":1}]\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_3-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_3-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_3-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_3-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_3-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_3-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_3-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_3-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_3-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_3\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":true,\"dragging\":false,\"positionAbsolute\":{\"x\":2311.033718006799,\"y\":843.7002938171429}},{\"id\":\"customTool_2\",\"position\":{\"x\":928.9411576968489,\"y\":-502.2164102499166},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"Custom Tool\",\"name\":\"customTool\",\"version\":2,\"type\":\"CustomTool\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/customtool.svg\",\"category\":\"Tools\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"inputs\":{\"selectedTool\":\"5e94379c-d744-4883-80cf-7be845f59871\",\"returnDirect\":true},\"baseClasses\":[\"CustomTool\",\"Tool\",\"StructuredTool\",\"Runnable\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Select Tool\",\"name\":\"selectedTool\",\"type\":\"asyncOptions\",\"loadMethod\":\"listTools\",\"id\":\"customTool_2-input-selectedTool-asyncOptions\"},{\"label\":\"Return Direct\",\"name\":\"returnDirect\",\"description\":\"Return the output of the tool directly to the user\",\"type\":\"boolean\",\"optional\":true,\"id\":\"customTool_2-input-returnDirect-boolean\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"customTool_2-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"name\":\"customTool\",\"label\":\"CustomTool\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"type\":\"CustomTool | Tool | StructuredTool | Runnable\"}],\"id\":\"customTool_2\",\"selected\":false},\"width\":300,\"height\":373,\"selected\":false,\"positionAbsolute\":{\"x\":928.9411576968489,\"y\":-502.2164102499166},\"dragging\":false}],\"edges\":[{\"source\":\"seqState_0\",\"sourceHandle\":\"seqState_0-output-seqState-State\",\"target\":\"seqStart_0\",\"targetHandle\":\"seqStart_0-input-state-State\",\"type\":\"buttonedge\",\"id\":\"seqState_0-seqState_0-output-seqState-State-seqStart_0-seqStart_0-input-state-State\"},{\"source\":\"seqAgent_1\",\"sourceHandle\":\"seqAgent_1-output-seqAgent-Agent\",\"target\":\"seqEnd_0\",\"targetHandle\":\"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_1-seqAgent_1-output-seqAgent-Agent-seqEnd_0-seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-válido-Condition\",\"target\":\"seqAgent_1\",\"targetHandle\":\"seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-válido-Condition-seqAgent_1-seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-inválido-Condition\",\"target\":\"seqLLMNode_0\",\"targetHandle\":\"seqLLMNode_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-inválido-Condition-seqLLMNode_0-seqLLMNode_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqStart_0\",\"sourceHandle\":\"seqStart_0-output-seqStart-Start\",\"target\":\"seqAgent_2\",\"targetHandle\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqStart_0-seqStart_0-output-seqStart-Start-seqAgent_2-seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_2\",\"sourceHandle\":\"seqAgent_2-output-seqAgent-Agent\",\"target\":\"seqCondition_0\",\"targetHandle\":\"seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_2-seqAgent_2-output-seqAgent-Agent-seqCondition_0-seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\"},{\"source\":\"customTool_0\",\"sourceHandle\":\"customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"target\":\"seqAgent_2\",\"targetHandle\":\"seqAgent_2-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"customTool_0-customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_2-seqAgent_2-input-tools-Tool\"},{\"source\":\"customTool_1\",\"sourceHandle\":\"customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"target\":\"seqAgent_3\",\"targetHandle\":\"seqAgent_3-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"customTool_1-customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_3-seqAgent_3-input-tools-Tool\"},{\"source\":\"customTool_2\",\"sourceHandle\":\"customTool_2-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"target\":\"seqAgent_1\",\"targetHandle\":\"seqAgent_1-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"customTool_2-customTool_2-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_1-seqAgent_1-input-tools-Tool\"},{\"source\":\"seqAgent_3\",\"sourceHandle\":\"seqAgent_3-output-seqAgent-Agent\",\"target\":\"seqLoop_0\",\"targetHandle\":\"seqLoop_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_3-seqAgent_3-output-seqAgent-Agent-seqLoop_0-seqLoop_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqLLMNode_0\",\"sourceHandle\":\"seqLLMNode_0-output-seqLLMNode-LLMNode\",\"target\":\"seqAgent_3\",\"targetHandle\":\"seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqLLMNode_0-seqLLMNode_0-output-seqLLMNode-LLMNode-seqAgent_3-seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"seqStart_0\",\"targetHandle\":\"seqStart_0-input-model-BaseChatModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqStart_0-seqStart_0-input-model-BaseChatModel\"}],\"viewport\":{\"x\":-287.98119973337555,\"y\":-325.3160283428915,\"zoom\":0.5152280629488128}}",
  "followUpPrompts": null,
  "id": "639469cd-dc9b-464f-996b-23a730b5457c",
  "isPublic": false,
  "name": "PRODUCTION | JSON Rewrite",
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "flowise-workflows/",
  "speechToText": null,
  "type": "MULTIAGENT",
  "updatedDate": "2025-02-07T13:46:42.274Z"
}