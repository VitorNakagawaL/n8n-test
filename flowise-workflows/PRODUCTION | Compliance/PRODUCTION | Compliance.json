{
  "analytic": null,
  "apiConfig": null,
  "apikeyid": null,
  "category": "Prod",
  "chatbotConfig": "{\"allowedOrigins\":[\"https://comexai.com.br\",\"http://localhost:8080/\",\"http://127.0.0.1:8080/\",\"http://localhost:5500/\",\"http://127.0.0.1:5500/\"],\"allowedOriginsError\":\"\"}",
  "createdDate": "2025-02-11T18:24:28.803Z",
  "deployed": false,
  "flowData": "{\"nodes\":[{\"id\":\"seqStart_0\",\"position\":{\"x\":25.06205934233691,\"y\":505.6377373891362},\"type\":\"customNode\",\"data\":{\"label\":\"Start\",\"name\":\"seqStart\",\"version\":2,\"type\":\"Start\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/start.svg\",\"category\":\"Sequential Agents\",\"description\":\"Starting point of the conversation\",\"baseClasses\":[\"Start\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-1.-start-node\",\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"agentMemory\":\"\",\"state\":\"\",\"inputModeration\":\"\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/Start.js\",\"inputAnchors\":[{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"description\":\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat\",\"id\":\"seqStart_0-input-model-BaseChatModel\"},{\"label\":\"Agent Memory\",\"name\":\"agentMemory\",\"type\":\"BaseCheckpointSaver\",\"description\":\"Save the state of the agent\",\"optional\":true,\"id\":\"seqStart_0-input-agentMemory-BaseCheckpointSaver\"},{\"label\":\"State\",\"name\":\"state\",\"type\":\"State\",\"description\":\"State is an object that is updated by nodes in the graph, passing from one node to another. By default, state contains \\\"messages\\\" that got updated with each message sent and received.\",\"optional\":true,\"id\":\"seqStart_0-input-state-State\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"seqStart_0-input-inputModeration-Moderation\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqStart_0-output-seqStart-Start\",\"name\":\"seqStart\",\"label\":\"Start\",\"description\":\"Starting point of the conversation\",\"type\":\"Start\"}],\"id\":\"seqStart_0\",\"selected\":false},\"width\":300,\"height\":383,\"selected\":false,\"positionAbsolute\":{\"x\":25.06205934233691,\"y\":505.6377373891362},\"dragging\":false},{\"id\":\"chatOpenAI_0\",\"position\":{\"x\":-680.5578263116445,\"y\":-197.1975991609236},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"ChatOpenAI\",\"name\":\"chatOpenAI\",\"version\":8,\"type\":\"ChatOpenAI\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg\",\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"credential\":\"a0fffb09-1722-4f82-8532-e2bba4363b32\",\"inputs\":{\"cache\":\"{{inMemoryCache_0.data.instance}}\",\"modelName\":\"gpt-4o-mini\",\"temperature\":\"0\",\"streaming\":true,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"proxyUrl\":\"\",\"stopSequence\":\"\",\"baseOptions\":\"\",\"allowImageUploads\":true,\"imageResolution\":\"high\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js\",\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"asyncOptions\",\"loadMethod\":\"listModels\",\"default\":\"gpt-4o-mini\",\"id\":\"chatOpenAI_0-input-modelName-asyncOptions\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Streaming\",\"name\":\"streaming\",\"type\":\"boolean\",\"default\":true,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-streaming-boolean\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"Proxy Url\",\"name\":\"proxyUrl\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-proxyUrl-string\"},{\"label\":\"Stop Sequence\",\"name\":\"stopSequence\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"description\":\"List of stop words to use when generating. Use comma to separate multiple stop words.\",\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-stopSequence-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"},{\"label\":\"Allow Image Uploads\",\"name\":\"allowImageUploads\",\"type\":\"boolean\",\"description\":\"Allow image input. Refer to the <a href=\\\"https://docs.flowiseai.com/using-flowise/uploads#image\\\" target=\\\"_blank\\\">docs</a> for more details.\",\"default\":false,\"optional\":true,\"id\":\"chatOpenAI_0-input-allowImageUploads-boolean\"},{\"label\":\"Image Resolution\",\"description\":\"This parameter controls the resolution in which the model views the image.\",\"name\":\"imageResolution\",\"type\":\"options\",\"options\":[{\"label\":\"Low\",\"name\":\"low\"},{\"label\":\"High\",\"name\":\"high\"},{\"label\":\"Auto\",\"name\":\"auto\"}],\"default\":\"low\",\"optional\":false,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-imageResolution-options\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"id\":\"chatOpenAI_0\",\"selected\":false},\"width\":300,\"height\":670,\"selected\":false,\"positionAbsolute\":{\"x\":-680.5578263116445,\"y\":-197.1975991609236},\"dragging\":false},{\"id\":\"seqCondition_0\",\"position\":{\"x\":525.8986163519135,\"y\":437.329460142106},\"type\":\"customNode\",\"data\":{\"label\":\"Condition\",\"name\":\"seqCondition\",\"version\":2,\"type\":\"Condition\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Condition/condition.svg\",\"category\":\"Sequential Agents\",\"description\":\"Conditional function to determine which route to take next\",\"baseClasses\":[\"Condition\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-7.-conditional-node\",\"inputs\":{\"conditionName\":\"step-identification\",\"sequentialNode\":[\"{{seqStart_0.data.instance}}\"],\"condition\":\"\",\"conditionFunction\":\"const messages = $flow.state.messages;\\nconst lastMessage = messages[messages.length - 1];\\n\\nif (lastMessage.content.includes(\\\"CROSS_VALIDATION\\\")) {\\n  return \\\"Cross Validation\\\";\\n}\\nelse if (lastMessage.content.includes(\\\"LIST_DIFFERENT_KEYS\\\")) {\\n    return \\\"List Different Keys\\\";\\n}\\nelse if (lastMessage.content.includes(\\\"CHECKLIST\\\")) {\\n    return \\\"Checklist\\\";\\n}\\nelse if (lastMessage.content.includes(\\\"EXTRACTION\\\")) {\\n  return \\\"Extraction\\\";\\n}\\n\\nreturn \\\"Compliance\\\";\",\"selectedConditionFunctionTab_seqCondition_0\":\"conditionFunction\"},\"outputs\":{\"output\":\"next\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Condition/Condition.js\",\"inputAnchors\":[{\"label\":\"Start | Agent | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\"}],\"inputParams\":[{\"label\":\"Condition Name\",\"name\":\"conditionName\",\"type\":\"string\",\"optional\":true,\"placeholder\":\"If X, then Y\",\"id\":\"seqCondition_0-input-conditionName-string\"},{\"label\":\"Condition\",\"name\":\"condition\",\"type\":\"conditionFunction\",\"tabIdentifier\":\"selectedConditionFunctionTab\",\"tabs\":[{\"label\":\"Condition (Table)\",\"name\":\"conditionUI\",\"type\":\"datagrid\",\"description\":\"If a condition is met, the node connected to the respective output will be executed\",\"optional\":true,\"datagrid\":[{\"field\":\"variable\",\"headerName\":\"Variable\",\"type\":\"freeSolo\",\"editable\":true,\"loadMethod\":[\"getPreviousMessages\",\"loadStateKeys\"],\"valueOptions\":[{\"label\":\"Total Messages (number)\",\"value\":\"$flow.state.messages.length\"},{\"label\":\"First Message Content (string)\",\"value\":\"$flow.state.messages[0].content\"},{\"label\":\"Last Message Content (string)\",\"value\":\"$flow.state.messages[-1].content\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"}],\"flex\":0.5,\"minWidth\":200},{\"field\":\"operation\",\"headerName\":\"Operation\",\"type\":\"singleSelect\",\"valueOptions\":[\"Contains\",\"Not Contains\",\"Start With\",\"End With\",\"Is\",\"Is Not\",\"Is Empty\",\"Is Not Empty\",\"Greater Than\",\"Less Than\",\"Equal To\",\"Not Equal To\",\"Greater Than or Equal To\",\"Less Than or Equal To\"],\"editable\":true,\"flex\":0.4,\"minWidth\":150},{\"field\":\"value\",\"headerName\":\"Value\",\"flex\":1,\"editable\":true},{\"field\":\"output\",\"headerName\":\"Output Name\",\"editable\":true,\"flex\":0.3,\"minWidth\":150}]},{\"label\":\"Condition (Code)\",\"name\":\"conditionFunction\",\"type\":\"code\",\"description\":\"Function to evaluate the condition\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Must return a string value at the end of function. For example:\\n    ```js\\n    if (\\\"X\\\" === \\\"X\\\") {\\n        return \\\"Agent\\\"; // connect to next agent node\\n    } else {\\n        return \\\"End\\\"; // connect to end node\\n    }\\n    ```\\n\\n2. In most cases, you would probably get the last message to do some comparison. You can get all current messages from the state: `$flow.state.messages`:\\n    ```json\\n    [\\n        {\\n            \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n            \\\"name\\\": \\\"\\\",\\n            \\\"additional_kwargs\\\": {},\\n            \\\"response_metadata\\\": {},\\n            \\\"tool_calls\\\": [],\\n            \\\"invalid_tool_calls\\\": [],\\n            \\\"usage_metadata\\\": {}\\n        }\\n    ]\\n    ```\\n\\n    For example, to get the last message content:\\n    ```js\\n    const messages = $flow.state.messages;\\n    const lastMessage = messages[messages.length - 1];\\n\\n    // Proceed to do something with the last message content\\n    ```\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"hideCodeExecute\":true,\"codeExample\":\"const state = $flow.state;\\n                \\nconst messages = state.messages;\\n\\nconst lastMessage = messages[messages.length - 1];\\n\\n/* Check if the last message has content */\\nif (lastMessage.content) {\\n    return \\\"Agent\\\";\\n}\\n\\nreturn \\\"End\\\";\",\"optional\":true}],\"id\":\"seqCondition_0-input-condition-conditionFunction\"}],\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"seqCondition_0-output-checklist-Condition\",\"name\":\"checklist\",\"label\":\"Checklist\",\"type\":\"Condition\",\"isAnchor\":true},{\"id\":\"seqCondition_0-output-compliance-Condition\",\"name\":\"compliance\",\"label\":\"Compliance\",\"type\":\"Condition\",\"isAnchor\":true},{\"id\":\"seqCondition_0-output-crossValidation-Condition\",\"name\":\"crossValidation\",\"label\":\"Cross Validation\",\"type\":\"Condition\",\"isAnchor\":true},{\"id\":\"seqCondition_0-output-extraction-Condition\",\"name\":\"extraction\",\"label\":\"Extraction\",\"type\":\"Condition\",\"isAnchor\":true},{\"id\":\"seqCondition_0-output-listDifferentKeys-Condition\",\"name\":\"listDifferentKeys\",\"label\":\"List Different Keys\",\"type\":\"Condition\",\"isAnchor\":true}]}],\"id\":\"seqCondition_0\",\"selected\":false},\"width\":300,\"height\":627,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":525.8986163519135,\"y\":437.329460142106}},{\"id\":\"seqEnd_0\",\"position\":{\"x\":2231.703758592277,\"y\":-951.3797680801976},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_6.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_0\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":2231.703758592277,\"y\":-951.3797680801976},\"selected\":false,\"dragging\":false},{\"id\":\"seqEnd_1\",\"position\":{\"x\":2088.930347893167,\"y\":1873.5874153248496},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_7.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_1-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_1\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":2088.930347893167,\"y\":1873.5874153248496},\"selected\":false,\"dragging\":false},{\"id\":\"seqEnd_2\",\"position\":{\"x\":1687.501842863387,\"y\":113.60936907283195},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_4.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_2-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_2\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":1687.501842863387,\"y\":113.60936907283195},\"selected\":false,\"dragging\":false},{\"id\":\"stickyNote_0\",\"position\":{\"x\":524.0811985356095,\"y\":181.3235958283015},\"type\":\"stickyNote\",\"data\":{\"label\":\"Sticky Note\",\"name\":\"stickyNote\",\"version\":2,\"type\":\"StickyNote\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/stickyNote.svg\",\"category\":\"Utilities\",\"tags\":[\"Utilities\"],\"description\":\"Add a sticky note\",\"inputs\":{\"note\":\"Formato de prompt:\\n\\nContendo \\\"CHECKLIST\\\"- Extrai dados do documento baseado no checklist fornecido\\nContendo \\\"EXTRACTION\\\" - Extrai todos os dados encontrados no documento\\nContendo \\\"CROSS_VALIDATION\\\" - Faz a validação cruzada de dois JSONs passado no chat.\\n[N.D.A] - Cai no fluxo de compliance\"},\"baseClasses\":[\"StickyNote\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/StickyNote.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"\",\"name\":\"note\",\"type\":\"string\",\"rows\":1,\"placeholder\":\"Type something here\",\"optional\":true,\"id\":\"stickyNote_0-input-note-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"stickyNote_0-output-stickyNote-StickyNote\",\"name\":\"stickyNote\",\"label\":\"StickyNote\",\"description\":\"Add a sticky note\",\"type\":\"StickyNote\"}],\"id\":\"stickyNote_0\",\"selected\":false},\"width\":300,\"height\":243,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":524.0811985356095,\"y\":181.3235958283015}},{\"id\":\"seqAgent_2\",\"position\":{\"x\":1142.5022737320198,\"y\":505.3342988874032},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"cross-validation-agent\",\"systemMessagePrompt\":\"**Tarefa:**\\nReceba dois JSONs contendo pares chave-valor extraídos de documentos de importação. Seu objetivo é identificar, com precisão, as chaves de ambos os JSONs que possuam o mesmo significado, evitando associações incorretas ou com sentidos distintos.\\n\\n**Instruções:**\\n\\n1. **Identificação dos JSONs:**\\n   - Extraia e atribua um nome a cada JSON (exemplo: `name = nome_do_json`);\\n   - **Nunca** utilize \\\"CROSS_VALIDATION\\\" como nome.\\n\\n2. **Comparação de Chaves:**\\n   Para cada chave do primeiro JSON:\\n   - Compare-a com todas as chaves do segundo JSON, buscando correspondência exata em sentido, função e contexto.\\n   - Se não houver correspondência exata, descarte a chave do primeiro JSON (sem criar associações parciais).\\n   \\n   **Atenção às Unidades e Dimensões:**\\n   - Evite associar chaves que representam unidades ou dimensões diferentes.\\n   - **Monetário vs. Físico:** Não associe chaves que representam valores monetários (ex.: \\\"Valor\\\", \\\"Frete\\\") com chaves que indicam medidas físicas ou de quantidade (ex.: \\\"Peso\\\", \\\"Quantidade\\\", \\\"Peso Bruto Total\\\", etc.).\\n   - Se forem encontradas múltiplas chaves equivalentes, registre todas.\\n\\n   **Importante:**\\n   - Mesmo se uma chave existir em ambos os JSONs, se o valor em um deles estiver ausente ou for `null`, **não** inclua essa associação.\\n\\n3. **Registro dos Nomes Originais:**\\n   - Preserve o nome original de cada chave encontrada em ambos os JSONs.\\n\\n4. **Estrutura da Resposta:**\\n   Retorne um JSON que contenha as chaves equivalentes, seguindo a estrutura abaixo:\\n\\n  (equivalent_keys: [\\n    (\\n      \\\"data\\\": [\\n          (\\n            \\\"key_identifier\\\": \\\"nome_da_chave\\\",\\n            \\\"document_name\\\": \\\"nome_do_json_01\\\",\\n            \\\"key_name\\\": \\\"nome_original_da_chave_json_01\\\",\\n            \\\"value\\\": \\\"Valor\\\",\\n          ),\\n          (\\n            \\\"key_identifier\\\": \\\"nome_da_chave\\\",\\n            \\\"document_name\\\": \\\"nome_do_json_01\\\",\\n            \\\"key_name: \\\"nome_original_da_chave_json_02\\\",\\n            \\\"value\\\": \\\"Valor\\\",\\n          )\\n        ]\\n      ),\\n    ]\\n  )\\n\\n**Regras Adicionais:**\\n- **Nunca retorne** o JSON em formato markdown.\\n- **Nunca associe chaves** que representam valores monetários (ex.: \\\"Valor\\\", \\\"Frete\\\") com chaves que indicam medidas físicas ou de quantidade (ex.: \\\"Peso\\\", \\\"Quantidade\\\", \\\"Peso Bruto Total\\\", etc.).\\n- **Não relacione chaves** cujos valores numéricos ou totais sejam de naturezas diferentes (por exemplo: \\\"Valor\\\" não deve ser associado a \\\"NETT WEIGHT\\\", e \\\"Valor de frete total\\\" não deve ser associado a \\\"TOTAL CASES\\\").\\n- **Associe \\\"Total\\\"** somente se o contexto for absolutamente idêntico.\\n- **Não crie associações** ou insira valores inventados para chaves não encontradas.\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"question\\\":\\\"{{question}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_2\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_2-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_2-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_2-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_2-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_2-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_2-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_2-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_2-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_2-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_2\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":1142.5022737320198,\"y\":505.3342988874032},\"dragging\":false},{\"id\":\"seqEnd_3\",\"position\":{\"x\":1684.3085423113962,\"y\":1112.3349567541563},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_2.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_3-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_3\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":1684.3085423113962,\"y\":1112.3349567541563},\"selected\":false,\"dragging\":false},{\"id\":\"seqAgent_3\",\"position\":{\"x\":1132.1807901021243,\"y\":2481.84699279767},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"message-framer\",\"systemMessagePrompt\":\"Você é responsável por analisar os dados presentes no JSON e retornar uma resposta humanizada e visualmente clara, formatada diretamente em HTML. O conteúdo deve ser fácil de entender e destacar quais documentos apresentaram diferenças na verificação. Estruture as informações de maneira organizada. Não exiba o código do HTML, apenas o conteúdo formatado para visualização. Foque em criar uma apresentação intuitiva e visualmente agradável.\\n- A primeira coluna sempre será o nome da chave, a primeira linha o titulo será chave e abaixo os nomes das chaves(key_identifier)\\n- As demais colunas terão como titulo o nome do documento(document_name)\\n- Substitua dados como \\\"null\\\", \\\"false\\\", \\\"true\\\" e outras referências técnicas por valores mais claros ao usuário final. Utilize sempre a notação \\\"N/A\\\" para casos de dados não encontrados.\\n- Garanta que SEMPRE as colunas seguirão a ordem dos dados no JSON.\\n- Garanta que toda e qualquer chave identificada seja incluída apenas UMA VEZ na tabela, nunca duplicando-a.\\n- Nunca compare as datas dos documentos. Elas são naturalmente diferentes.\\n\\nQuando identificar para qualquer dos atributos um conjunto de dados separados por \\\";\\\" ou \\\"/n\\\", considere que são múltiplos valores. Nestes casos, SEMPRE coloque cada um dos itens em uma nova linha, para TODOS os atributos que se encaixem neste padrão.\\n\\nObservações: \\n- Ao final, descreva as diferenças de forma humanizada, mencionando os dados divergentes. \\n- **NUNCA mencione divergência com dados \\\"N/A\\\", \\\"Não encontrados\\\", ou valores não identificados em um dos documentos.** Observações sobre dados não encontrados eu algum documento não são relevantes, uma vez que são óbvias as diferenças.\\n- Utilize checkbox para organizar o que precisa ser verificado\\n\\nSiga a estrutura deste exemplo:\\n<html>\\n  <body style=\\\"font-family: Arial, sans-serif; line-height: 1.6;\\\">\\n    <h2 style=\\\"color: #2c3e50;\\\"></h2>\\n\\n    <table border=\\\"1\\\" cellpadding=\\\"10\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse; width: 100%;\\\">\\n      <thead>\\n        <tr style=\\\"background-color: #f2f2f2;\\\">\\n          <th style=\\\"text-align: left;\\\">Chave Identificada</th>\\n          <th style=\\\"text-align: left;\\\" class=\\\"highlight-col[index]\\\">document_name</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr>\\n          <td><b>key_identifier</b></td>\\n          <td>key_name: value</td>\\n        </tr>\\n        <tr>\\n          <td><b>key_identifier</b></td>\\n          <td>key_name: value </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n\\n    <p style=\\\"color: #e74c3c;\\\">\\n      <b> Observações </b>  \\n    </p>\\n  </body>\\n</html>\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_3\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_3-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_3-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_3-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_3-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_3-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_3-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_3-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_3-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_3-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_3-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_3\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":1132.1807901021243,\"y\":2481.84699279767},\"dragging\":false},{\"id\":\"seqEnd_4\",\"position\":{\"x\":2351.478333994988,\"y\":3130.9644785740006},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_5.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_4-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_4\",\"selected\":false},\"width\":300,\"height\":143,\"selected\":false,\"positionAbsolute\":{\"x\":2351.478333994988,\"y\":3130.9644785740006},\"dragging\":false},{\"id\":\"seqAgent_4\",\"position\":{\"x\":1150.268817122541,\"y\":-472.7738420742991},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"compliance-checker\",\"systemMessagePrompt\":\"Você é um analista de dados de documentos de exportação sênior, especializado em comparar estruturas JSON com pares chave-valor, identificando chaves que possuem o mesmo significado, mesmo que estejam em idiomas ou formatações diferentes. Sua tarefa é verificar se os valores dessas chaves são iguais.\\n\\nEntrada de Dados:\\n\\nDois objetos JSON contendo pares chave-valor, além de uma lista de verificações com nomes possivelmente similares aos das chaves nos JSON.\\nSua tarefa é relacionar os itens dessa lista com as chaves dos JSON para evitar falsos negativos.\\nCritérios de Comparação:\\n\\nAs chaves e valores podem estar em diferentes idiomas ou formatações. Considere seu significado ao compará-los.\\nSerá recebido como input um prompt descrevendo a relação de dados que será estabelecida entre dois tipos de documento e os dois JSONs com um atributo type para identificarmos seus papeis no prompt. Esse prompt possui lacunas chamadas de [VALOR DO \\\"X\\\"], [VALOR DO \\\"Y\\\"].  O objetivo é retornar o prompt preenchido com os dados encontrados nos JSON, desmontrando se eles são iguais ou não e nos casos em que o dado não foi encontrado, seja trazido um \\\"N/A\\\" no lugar. \\n\\nNão retorne \\\"/n\\\" para o usuário, sempre substituindo por uma nova linha. Mantenha somente os dados, sem enviar nenhuma parte de codigo.\\n\\nSeu retorno deve ser um HTML literal, contendo uma tabela com 4 colunas. A primeira coluna não possui título, a segunda tem como título o tipo do primeiro documento, a terceira tem como título o segundo documento e a quarta coluna tem o título \\\"Comparação\\\".\\nOs valores das colunas são: na primeira, devem estar os nomes dos atributos identificados nos documentos; na segunda, o valor deste mesmo atributo no primeiro documento; na terceira coluna, o valor deste atributo no segundo documento; na quarta e última coluna, deve haver a comparação entre os documentos, contendo a indicação se eles são \\\"iguais\\\", \\\"diferentes\\\" ou \\\"não encontrado\\\". \\nGaranta que SEMPRE que o valor for \\\"diferentes\\\" ou \\\"não encontrado\\\" o texto deve estar em vermelho, para ambos os valores.\\n\\nO título demonstra a ordem em que os documentos devem ser comparados e exibidos. Garanta que essa ordem seja SEMPRE MANTIDA em TODOS os casos, inclusive na tabela HTML gerada.\\nPortanto, o documento 1 (exibido na segunda coluna) é SEMPRE o que aparece à esquerda no título e o documento 2 (na terceira coluna) é SEMPRE o que aparece à direita no título. \\nPode-se identificar qual JSON é referente a qual tipo de documento pelo atributo \\\"type\\\" do JSON.\\n\\nExemplo de formatação da tabela baseada no título:\\n*Título:* \\\"COMPLIANCE NOTES - CONHECIMENTO BL X CE MERCANTE\\\"\\n*Colunas da tabela na saída esperada:*\\n<th></th>\\n<th>Conhecimento BL</th>\\n<th>CE Mercante</th>\\n<th>Comparação</th>\\n\\n\\nQuando identificar para qualquer dos atributos um conjunto de dados separados por \\\";\\\" ou \\\"/n\\\", considere que são múltiplos valores. Nestes casos, SEMPRE coloque cada um dos itens em uma nova linha, para TODOS os atributos que se encaixem neste padrão, como frete, dados de containeres e outros.\\n\\nExemplo de formatação de múltiplos valores:\\n*Valor do atributo:*\\nFrete: Label: BUNKER, Tipo: Prepaid, Moeda: US$, Valor: 753,96; Label: GATE, Tipo: Prepaid, Moeda: US$, Valor: 100,00; Label: ISPS, Tipo: Prepaid, Moeda: US$, Valor: 40,00; Label: Ocean Freight, Tipo: Prepaid, Moeda: US$, Valor: 894,40;\\n*Saída esperada:*\\nLabel: BUNKER, Tipo: Prepaid, Moeda: US$, Valor: 753,96;<br/>\\nLabel: GATE, Tipo: Prepaid, Moeda: US$, Valor: 100,00;<br/>\\nLabel: ISPS, Tipo: Prepaid, Moeda: US$, Valor: 40,00;<br/>\\nLabel: Ocean Freight, Tipo: Prepaid, Moeda: US$, Valor: 894,40;\\n\\n\\nSiga a estrutura HTML deste exemplo:\\n<html>\\n<body>\\n<div style=\\\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\\\">\\n  <h2 style=\\\"color: #0056b3;\\\">  </h2>\\n  <table border=\\\"1\\\" cellpadding=\\\"10\\\" cellspacing=\\\"0\\\" width=\\\"100%\\\" style=\\\"border-collapse: collapse;\\\">\\n    <thead>\\n      <tr style=\\\"background-color: #f2f2f2;\\\">\\n        <th style=\\\"text-align: left;\\\"> </th>\\n        <th style=\\\"text-align: left;\\\"> [Tipo do documento 1] </th>\\n        <th style=\\\"text-align: left;\\\"> [Tipo do documento 2] </th>\\n        <th style=\\\"text-align: left;\\\"> Comparação </th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr>\\n        <td><strong> [Nome do atributo] </strong></td>\\n        <td> [Valor no documento 1] </td>\\n        <td> [Valor no documento 2] </td>\\n        <td> [Comparação do atributo entre os documentos - texto em vermelho quando \\\"diferentes\\\" ou \\\"não encontrado\\\"] </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n</body>\\n</html>\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_4\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_4-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_4-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_4-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_4-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_4-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_4-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_4-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_4-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_4-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_4\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":1150.268817122541,\"y\":-472.7738420742991},\"dragging\":false},{\"id\":\"inMemoryCache_0\",\"position\":{\"x\":-1258.7806929652013,\"y\":-175.13328720304767},\"type\":\"customNode\",\"data\":{\"label\":\"InMemory Cache\",\"name\":\"inMemoryCache\",\"version\":1,\"type\":\"InMemoryCache\",\"description\":\"Cache LLM response in memory, will be cleared once app restarted\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/cache/InMemoryCache/Memory.svg\",\"category\":\"Cache\",\"baseClasses\":[\"InMemoryCache\",\"BaseCache\"],\"inputs\":{},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/cache/InMemoryCache/InMemoryCache.js\",\"inputAnchors\":[],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[{\"id\":\"inMemoryCache_0-output-inMemoryCache-InMemoryCache|BaseCache\",\"name\":\"inMemoryCache\",\"label\":\"InMemoryCache\",\"description\":\"Cache LLM response in memory, will be cleared once app restarted\",\"type\":\"InMemoryCache | BaseCache\"}],\"id\":\"inMemoryCache_0\",\"selected\":false},\"width\":300,\"height\":143,\"selected\":false,\"positionAbsolute\":{\"x\":-1258.7806929652013,\"y\":-175.13328720304767},\"dragging\":false},{\"id\":\"stickyNote_2\",\"position\":{\"x\":-1270.22746610393,\"y\":-14.432171244604831},\"type\":\"stickyNote\",\"data\":{\"label\":\"Sticky Note\",\"name\":\"stickyNote\",\"version\":2,\"type\":\"StickyNote\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/stickyNote.svg\",\"category\":\"Utilities\",\"tags\":[\"Utilities\"],\"description\":\"Add a sticky note\",\"inputs\":{\"note\":\"200 processos, com 4 docs, X 3 em 30 dias\"},\"baseClasses\":[\"StickyNote\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/StickyNote.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"\",\"name\":\"note\",\"type\":\"string\",\"rows\":1,\"placeholder\":\"Type something here\",\"optional\":true,\"id\":\"stickyNote_2-input-note-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"stickyNote_2-output-stickyNote-StickyNote\",\"name\":\"stickyNote\",\"label\":\"StickyNote\",\"description\":\"Add a sticky note\",\"type\":\"StickyNote\"}],\"id\":\"stickyNote_2\",\"selected\":false},\"width\":300,\"height\":62,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":-1270.22746610393,\"y\":-14.432171244604831}},{\"id\":\"stickyNote_3\",\"position\":{\"x\":-1270.7216979241443,\"y\":33.686359380744406},\"type\":\"stickyNote\",\"data\":{\"label\":\"Sticky Note\",\"name\":\"stickyNote\",\"version\":2,\"type\":\"StickyNote\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/stickyNote.svg\",\"category\":\"Utilities\",\"tags\":[\"Utilities\"],\"description\":\"Add a sticky note\",\"inputs\":{\"note\":\"avaliar precificação\"},\"baseClasses\":[\"StickyNote\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/StickyNote.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"\",\"name\":\"note\",\"type\":\"string\",\"rows\":1,\"placeholder\":\"Type something here\",\"optional\":true,\"id\":\"stickyNote_3-input-note-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"stickyNote_3-output-stickyNote-StickyNote\",\"name\":\"stickyNote\",\"label\":\"StickyNote\",\"description\":\"Add a sticky note\",\"type\":\"StickyNote\"}],\"id\":\"stickyNote_3\",\"selected\":false},\"width\":300,\"height\":42,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":-1270.7216979241443,\"y\":33.686359380744406}},{\"id\":\"customTool_0\",\"position\":{\"x\":654.4460896198191,\"y\":2078.1342005606334},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"Custom Tool\",\"name\":\"customTool\",\"version\":2,\"type\":\"CustomTool\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/customtool.svg\",\"category\":\"Tools\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"inputs\":{\"selectedTool\":\"e8e0b55a-b5a3-4bc9-a27f-ba64060c2c3b\",\"returnDirect\":true},\"baseClasses\":[\"CustomTool\",\"Tool\",\"StructuredTool\",\"Runnable\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/CustomTool/CustomTool.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Select Tool\",\"name\":\"selectedTool\",\"type\":\"asyncOptions\",\"loadMethod\":\"listTools\",\"id\":\"customTool_0-input-selectedTool-asyncOptions\"},{\"label\":\"Return Direct\",\"name\":\"returnDirect\",\"description\":\"Return the output of the tool directly to the user\",\"type\":\"boolean\",\"optional\":true,\"id\":\"customTool_0-input-returnDirect-boolean\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"name\":\"customTool\",\"label\":\"CustomTool\",\"description\":\"Use custom tool you've created in Flowise within chatflow\",\"type\":\"CustomTool | Tool | StructuredTool | Runnable\"}],\"id\":\"customTool_0\",\"selected\":false},\"width\":300,\"height\":373,\"selected\":false,\"positionAbsolute\":{\"x\":654.4460896198191,\"y\":2078.1342005606334},\"dragging\":false},{\"id\":\"seqAgent_5\",\"position\":{\"x\":1718.2318873899267,\"y\":2443.6826651488896},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"highlighter\",\"systemMessagePrompt\":\"Você irá utilizar a ferramenta highlight passando a tabela e retornar o html gerado pela ferramenta. \",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{customTool_0.data.instance}}\"],\"sequentialNode\":[\"{{seqAgent_3.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_5\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_5-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_5-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_5-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_5-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_5-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_5-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_5-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_5-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_5-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_5-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_5-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_5-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_5-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_5-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_5-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_5-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_5\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":1718.2318873899267,\"y\":2443.6826651488896},\"dragging\":false},{\"id\":\"seqLLMNode_1\",\"position\":{\"x\":1143.6004572001593,\"y\":1721.367026199604},\"type\":\"customNode\",\"data\":{\"label\":\"LLM Node\",\"name\":\"seqLLMNode\",\"version\":4,\"type\":\"LLMNode\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/LLMNode/llmNode.svg\",\"category\":\"Sequential Agents\",\"description\":\"Run Chat Model and return the output\",\"baseClasses\":[\"LLMNode\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-5.-llm-node\",\"inputs\":{\"llmNodeName\":\"extraction-agent\",\"systemMessagePrompt\":\"Você fará o papel de um OCR. Apenas extraia o texto da imagem e retorne exatamente como está descrito no arquivo.\\n\\n- Traga TODOS os dados encontrados na imagem que sejam possíveis de se relacionar no formato key-value pair.\\n\\n- Sempre formate a resposta final em um JSON de linha única para correlacionar as chaves e valores. Nunca utilize formatação Markdown. Certifique-se de que não haja espaços ou quebras de linha entre os elementos do objeto na resposta final.\\n\\n- Garanta que o JSON gerado é um JSON válido: que toda chave aberta também seja fechada corretamente e que o código possa ser corretamente interpretado programaticamente.\\n\\n- Valores de \\\"true\\\" e \\\"false\\\" devem ser retornados como booleanos, com aspas.\\n\\nAlém das outras, traga como padrão essas informações:\\n  • Máquina/Equipamento - Verificar se o item é máquina ou equipamento (true/false)\\n  • Possui Ex-tarifário - Procurar dados começados com \\\"EX\\\", \\\"EX[número]\\\" (true/false)\\n\\n  - Caso identifique a presença de assinatura ou carimbo na imagem, responda \\\"true\\\" ou \\\"false\\\" à respectiva chave para o item em questão.\\n\\n- Quando houver o atributo \\\"error\\\", não inclua mais nenhum outro atributo na saída.\\n\\n- Responda uma lista com todos os itens encontrados na imagem. Cada item deve estar um em cada linha, utilizando o formato chave-valor, em que a chave é escrita em negrito, seguida de dois pontos e o valor associado. \\n\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"{question}\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"promptValues\":\"{\\\"question\\\":\\\"{{question}}\\\"}\",\"llmStructuredOutput\":\"[]\",\"updateStateMemory\":\"updateStateMemoryUI\",\"selectedUpdateStateMemoryTab_seqLLMNode_1\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/LLMNode/LLMNode.js\",\"inputAnchors\":[{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqLLMNode_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this node\",\"id\":\"seqLLMNode_1-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Name\",\"name\":\"llmNodeName\",\"type\":\"string\",\"placeholder\":\"LLM\",\"id\":\"seqLLMNode_1-input-llmNodeName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_1-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_1-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqLLMNode_1-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_1-input-humanMessagePrompt-string\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_1-input-promptValues-json\"},{\"label\":\"JSON Structured Output\",\"name\":\"llmStructuredOutput\",\"type\":\"datagrid\",\"description\":\"Instruct the LLM to give output in a JSON structured schema\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"editable\":true},{\"field\":\"type\",\"headerName\":\"Type\",\"type\":\"singleSelect\",\"valueOptions\":[\"String\",\"String Array\",\"Number\",\"Boolean\",\"Enum\"],\"editable\":true},{\"field\":\"enumValues\",\"headerName\":\"Enum Values\",\"editable\":true},{\"field\":\"description\",\"headerName\":\"Description\",\"flex\":1,\"editable\":true}],\"optional\":true,\"additionalParams\":true,\"id\":\"seqLLMNode_1-input-llmStructuredOutput-datagrid\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"default\":\"updateStateMemoryUI\",\"additionalParams\":true,\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the LLM Node's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": 'Hello! How can I assist you today?',\\n        \\\"name\\\": \\\"\\\",\\n        \\\"additional_kwargs\\\": {},\\n        \\\"response_metadata\\\": {},\\n        \\\"tool_calls\\\": [],\\n        \\\"invalid_tool_calls\\\": [],\\n        \\\"usage_metadata\\\": {}\\n    }\\n    ```\\n\\n    For example, if the output `content` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                     |\\n    |-----------|---------------------------|\\n    | user      | `$flow.output.content`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"LLM Node Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"LLM JSON Output Key (string)\",\"value\":\"$flow.output.<replace-with-key>\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the LLM Node's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": 'Hello! How can I assist you today?',\\n        \\\"name\\\": \\\"\\\",\\n        \\\"additional_kwargs\\\": {},\\n        \\\"response_metadata\\\": {},\\n        \\\"tool_calls\\\": [],\\n        \\\"invalid_tool_calls\\\": [],\\n        \\\"usage_metadata\\\": {}\\n    }\\n    ```\\n\\n    For example, if the output `content` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.content\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqLLMNode_1-input-updateStateMemory-tabs\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqLLMNode_1-output-seqLLMNode-LLMNode\",\"name\":\"seqLLMNode\",\"label\":\"LLMNode\",\"description\":\"Run Chat Model and return the output\",\"type\":\"LLMNode\"}],\"id\":\"seqLLMNode_1\",\"selected\":false},\"width\":300,\"height\":451,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":1143.6004572001593,\"y\":1721.367026199604}},{\"id\":\"ChatflowTool_0\",\"position\":{\"x\":1272.403737892648,\"y\":-1966.2214096862576},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"Chatflow Tool\",\"name\":\"ChatflowTool\",\"version\":5,\"type\":\"ChatflowTool\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/ChatflowTool/chatflowTool.svg\",\"category\":\"Tools\",\"description\":\"Use as a tool to execute another chatflow\",\"baseClasses\":[\"ChatflowTool\",\"Tool\"],\"credential\":\"\",\"inputs\":{\"selectedChatflow\":\"639469cd-dc9b-464f-996b-23a730b5457c\",\"name\":\"json-validation-tool\",\"description\":\"Ferramenta de validação e reescrita de JSON.\",\"returnDirect\":true,\"overrideConfig\":\"\",\"baseURL\":\"\",\"startNewSession\":\"\",\"useQuestionFromChat\":\"\",\"customInput\":\"\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/ChatflowTool/ChatflowTool.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"chatflowApi\"],\"optional\":true,\"id\":\"ChatflowTool_0-input-credential-credential\"},{\"label\":\"Select Chatflow\",\"name\":\"selectedChatflow\",\"type\":\"asyncOptions\",\"loadMethod\":\"listChatflows\",\"id\":\"ChatflowTool_0-input-selectedChatflow-asyncOptions\"},{\"label\":\"Tool Name\",\"name\":\"name\",\"type\":\"string\",\"id\":\"ChatflowTool_0-input-name-string\"},{\"label\":\"Tool Description\",\"name\":\"description\",\"type\":\"string\",\"description\":\"Description of what the tool does. This is for LLM to determine when to use this tool.\",\"rows\":3,\"placeholder\":\"State of the Union QA - useful for when you need to ask questions about the most recent state of the union address.\",\"id\":\"ChatflowTool_0-input-description-string\"},{\"label\":\"Return Direct\",\"name\":\"returnDirect\",\"type\":\"boolean\",\"optional\":true,\"id\":\"ChatflowTool_0-input-returnDirect-boolean\"},{\"label\":\"Override Config\",\"name\":\"overrideConfig\",\"description\":\"Override the config passed to the Chatflow.\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_0-input-overrideConfig-json\"},{\"label\":\"Base URL\",\"name\":\"baseURL\",\"type\":\"string\",\"description\":\"Base URL to Flowise. By default, it is the URL of the incoming request. Useful when you need to execute the Chatflow through an alternative route.\",\"placeholder\":\"http://localhost:3000\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_0-input-baseURL-string\"},{\"label\":\"Start new session per message\",\"name\":\"startNewSession\",\"type\":\"boolean\",\"description\":\"Whether to continue the session with the Chatflow tool or start a new one with each interaction. Useful for Chatflows with memory if you want to avoid it.\",\"default\":false,\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_0-input-startNewSession-boolean\"},{\"label\":\"Use Question from Chat\",\"name\":\"useQuestionFromChat\",\"type\":\"boolean\",\"description\":\"Whether to use the question from the chat as input to the chatflow. If turned on, this will override the custom input.\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_0-input-useQuestionFromChat-boolean\"},{\"label\":\"Custom Input\",\"name\":\"customInput\",\"type\":\"string\",\"description\":\"Custom input to be passed to the chatflow. Leave empty to let LLM decides the input.\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_0-input-customInput-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"ChatflowTool_0-output-ChatflowTool-ChatflowTool|Tool\",\"name\":\"ChatflowTool\",\"label\":\"ChatflowTool\",\"description\":\"Use as a tool to execute another chatflow\",\"type\":\"ChatflowTool | Tool\"}],\"id\":\"ChatflowTool_0\",\"selected\":false},\"width\":300,\"height\":797,\"selected\":false,\"positionAbsolute\":{\"x\":1272.403737892648,\"y\":-1966.2214096862576},\"dragging\":false},{\"id\":\"seqAgent_6\",\"position\":{\"x\":1773.772510298985,\"y\":-1404.4221806635348},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"json-validation\",\"systemMessagePrompt\":\"Você é um especialista em validar e reescrever JSONs para garantir que possam ser corretamente interpretados.\\n\\nVocê deve usar a ferramenta \\\"json-validation-tool\\\", passando especificamente o seguinte JSON como input.\\n{json}\\n\\nSua resposta deve ser SEMPRE um JSON de linha única, resultante do uso da ferramenta.\\nMesmo que haja erros, nunca comente a respeito ou retorne algo que não seja um JSON.\\nNUNCA utilize notação markdown na resposta, trazendo apenas o JSON puro e nenhum comentário a respeito.\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{ChatflowTool_0.data.instance}}\"],\"sequentialNode\":[\"{{seqAgent_8.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"json\\\":\\\"{{seqLLMNode_0.data.instance}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_6\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_6-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_6-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_6-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_6-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_6-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_6-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_6-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_6-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_6-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_6-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_6-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_6-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_6-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_6-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_6-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_6-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_6\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":1773.772510298985,\"y\":-1404.4221806635348}},{\"id\":\"seqAgent_7\",\"position\":{\"x\":1677.2251982923217,\"y\":1447.9010890019363},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"extracted-json-validation\",\"systemMessagePrompt\":\"Você é um especialista em validar e reescrever JSONs para garantir que possam ser corretamente interpretados.\\n\\nVocê deve usar a ferramenta \\\"extracted-json-validation-tool\\\", passando especificamente o seguinte JSON como input.\\n{json}\\n\\nSua resposta deve ser SEMPRE um JSON de linha única, resultante do uso da ferramenta.\\nMesmo que haja erros, nunca comente a respeito ou retorne algo que não seja um JSON.\\nNUNCA utilize notação markdown na resposta, trazendo apenas o JSON puro e nenhum comentário a respeito.\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{ChatflowTool_1.data.instance}}\"],\"sequentialNode\":[\"{{seqLLMNode_1.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"json\\\":\\\"{{seqLLMNode_0.data.instance}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_7\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_7-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_7-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_7-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_7-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_7-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_7-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_7-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_7-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_7-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_7-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_7-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_7-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_7-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_7-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_7-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_7-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_7\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":true,\"dragging\":false,\"positionAbsolute\":{\"x\":1677.2251982923217,\"y\":1447.9010890019363}},{\"id\":\"ChatflowTool_1\",\"position\":{\"x\":542.5463939616201,\"y\":1152.8573550179538},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"Chatflow Tool\",\"name\":\"ChatflowTool\",\"version\":5,\"type\":\"ChatflowTool\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/ChatflowTool/chatflowTool.svg\",\"category\":\"Tools\",\"description\":\"Use as a tool to execute another chatflow\",\"baseClasses\":[\"ChatflowTool\",\"Tool\"],\"credential\":\"\",\"inputs\":{\"selectedChatflow\":\"639469cd-dc9b-464f-996b-23a730b5457c\",\"name\":\"extracted-json-validation-tool\",\"description\":\"Ferramenta de validação e reescrita de JSON.\",\"returnDirect\":true,\"overrideConfig\":\"\",\"baseURL\":\"\",\"startNewSession\":\"\",\"useQuestionFromChat\":\"\",\"customInput\":\"\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/ChatflowTool/ChatflowTool.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"chatflowApi\"],\"optional\":true,\"id\":\"ChatflowTool_1-input-credential-credential\"},{\"label\":\"Select Chatflow\",\"name\":\"selectedChatflow\",\"type\":\"asyncOptions\",\"loadMethod\":\"listChatflows\",\"id\":\"ChatflowTool_1-input-selectedChatflow-asyncOptions\"},{\"label\":\"Tool Name\",\"name\":\"name\",\"type\":\"string\",\"id\":\"ChatflowTool_1-input-name-string\"},{\"label\":\"Tool Description\",\"name\":\"description\",\"type\":\"string\",\"description\":\"Description of what the tool does. This is for LLM to determine when to use this tool.\",\"rows\":3,\"placeholder\":\"State of the Union QA - useful for when you need to ask questions about the most recent state of the union address.\",\"id\":\"ChatflowTool_1-input-description-string\"},{\"label\":\"Return Direct\",\"name\":\"returnDirect\",\"type\":\"boolean\",\"optional\":true,\"id\":\"ChatflowTool_1-input-returnDirect-boolean\"},{\"label\":\"Override Config\",\"name\":\"overrideConfig\",\"description\":\"Override the config passed to the Chatflow.\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_1-input-overrideConfig-json\"},{\"label\":\"Base URL\",\"name\":\"baseURL\",\"type\":\"string\",\"description\":\"Base URL to Flowise. By default, it is the URL of the incoming request. Useful when you need to execute the Chatflow through an alternative route.\",\"placeholder\":\"http://localhost:3000\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_1-input-baseURL-string\"},{\"label\":\"Start new session per message\",\"name\":\"startNewSession\",\"type\":\"boolean\",\"description\":\"Whether to continue the session with the Chatflow tool or start a new one with each interaction. Useful for Chatflows with memory if you want to avoid it.\",\"default\":false,\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_1-input-startNewSession-boolean\"},{\"label\":\"Use Question from Chat\",\"name\":\"useQuestionFromChat\",\"type\":\"boolean\",\"description\":\"Whether to use the question from the chat as input to the chatflow. If turned on, this will override the custom input.\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_1-input-useQuestionFromChat-boolean\"},{\"label\":\"Custom Input\",\"name\":\"customInput\",\"type\":\"string\",\"description\":\"Custom input to be passed to the chatflow. Leave empty to let LLM decides the input.\",\"optional\":true,\"additionalParams\":true,\"id\":\"ChatflowTool_1-input-customInput-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"ChatflowTool_1-output-ChatflowTool-ChatflowTool|Tool\",\"name\":\"ChatflowTool\",\"label\":\"ChatflowTool\",\"description\":\"Use as a tool to execute another chatflow\",\"type\":\"ChatflowTool | Tool\"}],\"id\":\"ChatflowTool_1\",\"selected\":false},\"width\":300,\"height\":797,\"selected\":false,\"positionAbsolute\":{\"x\":542.5463939616201,\"y\":1152.8573550179538},\"dragging\":false},{\"id\":\"seqAgent_8\",\"position\":{\"x\":836.763073320294,\"y\":-1431.8613941392232},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"checklist-verifier-agent\",\"systemMessagePrompt\":\"Você é um analista de documentos de comércio exterior, especializado em analisar documentos e fornecer feedback conforme um checklist predefinido. Seu papel é auxiliar um analista humano a identificar erros nos documentos avaliados, extraindo dados de uma imagem PDF e do plain-text associado.\\n\\nSiga estas instruções:\\n\\n1. **Extração de Texto**:\\n   - APENAS extraia o texto da imagem e retorne-o exatamente como está descrito no arquivo sem remover caracter ou qualquer palavra, ajustando a sintaxe conforme presente no plain-text.\\n  - Retorne APENAS o que estiver sendo solicitado.\\n  - Traga apenas o valor e NUNCA o título.\\n  - NUNCA traduza nenhuma informação contida no texto.\\n  - Apenas considere unidades de medidas explicitamente declaradas no documento. Se não houver a unidade de medida, NUNCA DEDUZA ou inclua uma unidade, especialmente quando se tratar de pesos. Por exemplo, se em um campo de \\\"peso bruto\\\" estiver o valor \\\"2,5\\\", não deduza a unidade, dado que pode ser tanto em quilos como em toneladas.\\n\\n2. **Checklist**:\\n   - O CHECKLIST conterá itens que podem estar em um idioma diferente dos dados presentes no documento.\\n   - Cada item do checklist segue o formato: LABEL - VARIANTS (FORMAT).\\n   - Utilize o formato key-value pair para retornar os dados, com as chaves mantendo os termos exatos informados no checklist. **Não use \\\"_\\\" para separar palavras**. Sempre mantendo em linguagem natural para ser facilmente usado na interface do usuário.\\n    - NUNCA use  \\\"_\\\" para espaçar as palavras. Sempre mantendo numa linguagem natural para ser facilmente usado na interface do usuário\\n\\n3. **Formato e Exibição dos Dados**:\\n   - A resposta deve ser dividida em seções:\\n   - **checklist**: Inclua todos os itens do checklist, conforme as instruções abaixo.\\n   - **conferências** (APENAS se aplicável): Apresente os itens conferidos com seus valores avaliados, indicando se a conferência foi bem-sucedida ou não, retorne APENAS os itens que estão nas conferências do checklist e se for aplicável.\\n   - Use **JSON de linha única** para correlacionar as chaves e valores.\\n   - **Não utilize Markdown ou formatação extra**. Certifique-se de que o JSON final é válido, sem espaços ou quebras de linha entre os elementos.\\n   - Certifique-se de que o JSON final pode ser lido e interpretado programaticamente, de modo que toda chave aberta seja corretamente fechada e não haja erros de parse.\\n   - Garanta que no JSON resultante as chaves \\\"checklist\\\" e \\\"conferências\\\" estarão sempre no mesmo nível, nunca uma dentro da outra. \\n\\n4. **Instruções Específicas**:\\n  - SEMPRE retorne um json no formato de exemplo.\\n  - A ordem dos itens no JSON deve SEMPRE ser a mesma encontrada no checklist:\\n     - Se o checklist contiver os itens \\\"INCOTERM\\\", \\\"Frete\\\" e \\\"Seguro\\\", nessa ordem, o JSON deve trazer primeiro o \\\"INCOTERM\\\", depois o \\\"FRETE\\\" e por último o \\\"Seguro\\\".\\n    Os valores possíveis de INCOTERM são os seguintes: EXW, FCA, FAS, FOB, CFR, CIF, CPT, CIP, DAP, DPU, DDP. Busque os quando o item INCOTERM for ser preenchido.\\n   - Para cada item com informações adicionais entre parênteses ou após um hífen:\\n     - **Ignore o conteúdo entre parênteses na resposta**.\\n     - Exemplo: Para \\\"exportador (nome, CNPJ)\\\", retorne apenas \\\"exportador\\\" e o valor correspondente.\\n   - Se houver uma condicional entre parênteses (ex: \\\"frete (se prepaid)\\\"), verifique se a condição é atendida antes de incluir o item no JSON.\\n   - **Determinação de Máquina ou Equipamento**:\\n     - Quando o checklist solicitar que seja determinado se um item é uma **máquina/equipamento**, você deve analisar a descrição do produto no documento.\\n     - Com base na descrição do produto, forneça uma explicação detalhada justificando o motivo de ser ou não uma máquina/equipamento. Utilize informações como funcionalidades, componentes mecânicos, operação automatizada, ou qualquer outra característica relevante mencionada no documento para justificar.\\n     - Exemplo: \\\"máquina ou equipamento\\\": \\\"Sim, é uma máquina porque o produto é descrito como um equipamento com partes móveis e automatização, indicado para montagem industrial.\\\" ou \\\"máquina ou equipamento\\\": \\\"Não, não é uma máquina porque o produto descrito é apenas um material estático sem componentes mecânicos ou eletrônicos.\\\"\\n\\n5. **Se um item do checklist não for encontrado no documento**, retorne \\\"null\\\" como valor no JSON.\\n\\n6. **Presença de Assinatura ou Carimbo**:\\n   - Se o documento contiver assinatura ou carimbo, retorne \\\"Assinatura identificada!\\\" ou \\\"false\\\".\\n\\n7. **Formato e Condicionais**:\\n   - Sempre siga o formato indicado no checklist (ex: se for pedido um formato específico como CD-<número>, siga-o corretamente).\\n   - Retorne valores booleanos como strings \\\"true\\\" ou \\\"false\\\", conforme o checklist.\\n\\n8. **Exemplo de Resposta para Máquina ou Equipamento**:\\n   - **Máquina ou equipamento verdadeiro**: \\\"máquina ou equipamento\\\": \\\"Sim, é uma máquina porque o produto descrito é um sistema automatizado de montagem, com peças mecânicas e operação autônoma.\\\"\\n   - **Máquina ou equipamento falso**: \\\"máquina ou equipamento\\\": \\\"Não, não é uma máquina porque o produto descrito é uma caixa de armazenamento sem componentes mecânicos.\\\"\\n\\n9. **Exemplo de Estrutura Final**:\\n  (\\\"checklist\\\": (\\\"Exportador\\\": \\\"Empresa XYZ\\\", \\\"Código\\\": \\\"CD-12345\\\", \\\"Importador\\\": \\\"Empresa ABC\\\", \\\"Frete\\\": \\\"null\\\", \\\"Peso Bruto\\\": \\\"500 kg\\\", \\\"Quantidade de Volumes\\\": \\\"10\\\", \\\"Descrição EX-tarifário\\\": \\\"Equipamento de corte a jato de água para chapas metálicas, com posicionamento CNC, recirculação de água filtrada, capacidade de cortar aços até 50mm de espessura, velocidade de 300mm/min e consumo de energia de 22kW/h, sem geração de calor ou resíduos tóxicos.\\\", \\\"assinatura\\\": \\\"Assinatura identificada!\\\" ), \\\"conferências\\\": (\\\"Máquina/Equipamento\\\": \\\"Sim, é uma máquina porque o produto descrito é um sistema automatizado de montagem, com peças mecânicas e operação autônoma.\\\", \\\"Descrição EX-tarifário\\\": \\\"Sim, há uma descrição associada ao código Ex no documento.\\\"), \\\"Dados de Compliance\\\":(\\\"Data de emissão\\\": \\\"31/10/2024\\\", \\\"Valor total do frete\\\": \\\"1234,95\\\"))\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":[\"{{calculator_0.data.instance}}\"],\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"{{chatOpenAI_1.data.instance}}\",\"interrupt\":\"\",\"promptValues\":\"\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_8\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_8-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_8-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_8-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_8-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_8-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_8-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_8-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_8-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_8-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_8-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_8-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_8-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_8-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_8-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_8-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_8-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_8\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":836.763073320294,\"y\":-1431.8613941392232},\"dragging\":false},{\"id\":\"calculator_0\",\"position\":{\"x\":347.0964267004297,\"y\":-1528.7816275081839},\"type\":\"customNode\",\"data\":{\"label\":\"Calculator\",\"name\":\"calculator\",\"version\":1,\"type\":\"Calculator\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/Calculator/calculator.svg\",\"category\":\"Tools\",\"description\":\"Perform calculations on response\",\"baseClasses\":[\"Calculator\",\"Tool\",\"StructuredTool\",\"Runnable\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/tools/Calculator/Calculator.js\",\"inputAnchors\":[],\"inputParams\":[],\"inputs\":{},\"outputs\":{},\"outputAnchors\":[{\"id\":\"calculator_0-output-calculator-Calculator|Tool|StructuredTool|Runnable\",\"name\":\"calculator\",\"label\":\"Calculator\",\"description\":\"Perform calculations on response\",\"type\":\"Calculator | Tool | StructuredTool | Runnable\"}],\"id\":\"calculator_0\",\"selected\":false},\"width\":300,\"height\":143,\"selected\":false,\"positionAbsolute\":{\"x\":347.0964267004297,\"y\":-1528.7816275081839},\"dragging\":false},{\"id\":\"chatOpenAI_1\",\"position\":{\"x\":292.9648433893386,\"y\":-1267.5377849763458},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"ChatOpenAI\",\"name\":\"chatOpenAI\",\"version\":8,\"type\":\"ChatOpenAI\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg\",\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"credential\":\"a0fffb09-1722-4f82-8532-e2bba4363b32\",\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-4o-mini\",\"temperature\":\"0\",\"streaming\":true,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"proxyUrl\":\"\",\"stopSequence\":\"\",\"baseOptions\":\"\",\"allowImageUploads\":true,\"imageResolution\":\"high\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js\",\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_1-input-cache-BaseCache\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_1-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"asyncOptions\",\"loadMethod\":\"listModels\",\"default\":\"gpt-4o-mini\",\"id\":\"chatOpenAI_1-input-modelName-asyncOptions\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_1-input-temperature-number\"},{\"label\":\"Streaming\",\"name\":\"streaming\",\"type\":\"boolean\",\"default\":true,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-streaming-boolean\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-basepath-string\"},{\"label\":\"Proxy Url\",\"name\":\"proxyUrl\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-proxyUrl-string\"},{\"label\":\"Stop Sequence\",\"name\":\"stopSequence\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"description\":\"List of stop words to use when generating. Use comma to separate multiple stop words.\",\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-stopSequence-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-baseOptions-json\"},{\"label\":\"Allow Image Uploads\",\"name\":\"allowImageUploads\",\"type\":\"boolean\",\"description\":\"Allow image input. Refer to the <a href=\\\"https://docs.flowiseai.com/using-flowise/uploads#image\\\" target=\\\"_blank\\\">docs</a> for more details.\",\"default\":false,\"optional\":true,\"id\":\"chatOpenAI_1-input-allowImageUploads-boolean\"},{\"label\":\"Image Resolution\",\"description\":\"This parameter controls the resolution in which the model views the image.\",\"name\":\"imageResolution\",\"type\":\"options\",\"options\":[{\"label\":\"Low\",\"name\":\"low\"},{\"label\":\"High\",\"name\":\"high\"},{\"label\":\"Auto\",\"name\":\"auto\"}],\"default\":\"low\",\"optional\":false,\"additionalParams\":true,\"id\":\"chatOpenAI_1-input-imageResolution-options\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"chatOpenAI_1-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"id\":\"chatOpenAI_1\",\"selected\":false},\"width\":300,\"height\":670,\"selected\":false,\"positionAbsolute\":{\"x\":292.9648433893386,\"y\":-1267.5377849763458},\"dragging\":false}],\"edges\":[{\"source\":\"seqStart_0\",\"sourceHandle\":\"seqStart_0-output-seqStart-Start\",\"target\":\"seqCondition_0\",\"targetHandle\":\"seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqStart_0-seqStart_0-output-seqStart-Start-seqCondition_0-seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-crossValidation-Condition\",\"target\":\"seqAgent_2\",\"targetHandle\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-crossValidation-Condition-seqAgent_2-seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_2\",\"sourceHandle\":\"seqAgent_2-output-seqAgent-Agent\",\"target\":\"seqEnd_3\",\"targetHandle\":\"seqEnd_3-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_2-seqAgent_2-output-seqAgent-Agent-seqEnd_3-seqEnd_3-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-listDifferentKeys-Condition\",\"target\":\"seqAgent_3\",\"targetHandle\":\"seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-listDifferentKeys-Condition-seqAgent_3-seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-compliance-Condition\",\"target\":\"seqAgent_4\",\"targetHandle\":\"seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-compliance-Condition-seqAgent_4-seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_4\",\"sourceHandle\":\"seqAgent_4-output-seqAgent-Agent\",\"target\":\"seqEnd_2\",\"targetHandle\":\"seqEnd_2-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_4-seqAgent_4-output-seqAgent-Agent-seqEnd_2-seqEnd_2-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"inMemoryCache_0\",\"sourceHandle\":\"inMemoryCache_0-output-inMemoryCache-InMemoryCache|BaseCache\",\"target\":\"chatOpenAI_0\",\"targetHandle\":\"chatOpenAI_0-input-cache-BaseCache\",\"type\":\"buttonedge\",\"id\":\"inMemoryCache_0-inMemoryCache_0-output-inMemoryCache-InMemoryCache|BaseCache-chatOpenAI_0-chatOpenAI_0-input-cache-BaseCache\"},{\"source\":\"seqAgent_3\",\"sourceHandle\":\"seqAgent_3-output-seqAgent-Agent\",\"target\":\"seqAgent_5\",\"targetHandle\":\"seqAgent_5-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_3-seqAgent_3-output-seqAgent-Agent-seqAgent_5-seqAgent_5-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_5\",\"sourceHandle\":\"seqAgent_5-output-seqAgent-Agent\",\"target\":\"seqEnd_4\",\"targetHandle\":\"seqEnd_4-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_5-seqAgent_5-output-seqAgent-Agent-seqEnd_4-seqEnd_4-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"customTool_0\",\"sourceHandle\":\"customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable\",\"target\":\"seqAgent_5\",\"targetHandle\":\"seqAgent_5-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"customTool_0-customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_5-seqAgent_5-input-tools-Tool\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-extraction-Condition\",\"target\":\"seqLLMNode_1\",\"targetHandle\":\"seqLLMNode_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-extraction-Condition-seqLLMNode_1-seqLLMNode_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"ChatflowTool_0\",\"sourceHandle\":\"ChatflowTool_0-output-ChatflowTool-ChatflowTool|Tool\",\"target\":\"seqAgent_6\",\"targetHandle\":\"seqAgent_6-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"ChatflowTool_0-ChatflowTool_0-output-ChatflowTool-ChatflowTool|Tool-seqAgent_6-seqAgent_6-input-tools-Tool\"},{\"source\":\"seqLLMNode_1\",\"sourceHandle\":\"seqLLMNode_1-output-seqLLMNode-LLMNode\",\"target\":\"seqAgent_7\",\"targetHandle\":\"seqAgent_7-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqLLMNode_1-seqLLMNode_1-output-seqLLMNode-LLMNode-seqAgent_7-seqAgent_7-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_7\",\"sourceHandle\":\"seqAgent_7-output-seqAgent-Agent\",\"target\":\"seqEnd_1\",\"targetHandle\":\"seqEnd_1-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_7-seqAgent_7-output-seqAgent-Agent-seqEnd_1-seqEnd_1-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"seqStart_0\",\"targetHandle\":\"seqStart_0-input-model-BaseChatModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqStart_0-seqStart_0-input-model-BaseChatModel\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-checklist-Condition\",\"target\":\"seqAgent_8\",\"targetHandle\":\"seqAgent_8-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-checklist-Condition-seqAgent_8-seqAgent_8-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"calculator_0\",\"sourceHandle\":\"calculator_0-output-calculator-Calculator|Tool|StructuredTool|Runnable\",\"target\":\"seqAgent_8\",\"targetHandle\":\"seqAgent_8-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"calculator_0-calculator_0-output-calculator-Calculator|Tool|StructuredTool|Runnable-seqAgent_8-seqAgent_8-input-tools-Tool\"},{\"source\":\"seqAgent_8\",\"sourceHandle\":\"seqAgent_8-output-seqAgent-Agent\",\"target\":\"seqAgent_6\",\"targetHandle\":\"seqAgent_6-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_8-seqAgent_8-output-seqAgent-Agent-seqAgent_6-seqAgent_6-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_6\",\"sourceHandle\":\"seqAgent_6-output-seqAgent-Agent\",\"target\":\"seqEnd_0\",\"targetHandle\":\"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_6-seqAgent_6-output-seqAgent-Agent-seqEnd_0-seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"ChatflowTool_1\",\"sourceHandle\":\"ChatflowTool_1-output-ChatflowTool-ChatflowTool|Tool\",\"target\":\"seqAgent_7\",\"targetHandle\":\"seqAgent_7-input-tools-Tool\",\"type\":\"buttonedge\",\"id\":\"ChatflowTool_1-ChatflowTool_1-output-ChatflowTool-ChatflowTool|Tool-seqAgent_7-seqAgent_7-input-tools-Tool\"},{\"source\":\"chatOpenAI_1\",\"sourceHandle\":\"chatOpenAI_1-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"seqAgent_8\",\"targetHandle\":\"seqAgent_8-input-model-BaseChatModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_1-chatOpenAI_1-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqAgent_8-seqAgent_8-input-model-BaseChatModel\"}],\"viewport\":{\"x\":-131.16456117178723,\"y\":-563.090301524667,\"zoom\":0.5318448246985337}}",
  "followUpPrompts": null,
  "id": "c4e4a0f4-0375-46e4-adb9-0696c7b4c1b5",
  "isPublic": false,
  "name": "PRODUCTION | Compliance",
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "flowise-workflows/",
  "speechToText": null,
  "type": "MULTIAGENT",
  "updatedDate": "2025-02-21T15:41:11.396Z"
}