{
  "analytic": "{\"langSmith\":{\"credentialId\":\"9fb56a6f-2c15-486c-9125-6fd27091d002\",\"projectName\":\"INTERSEAS - Analise Critica\",\"status\":true}}",
  "apiConfig": null,
  "apikeyid": null,
  "category": "Prod",
  "chatbotConfig": null,
  "createdDate": "2024-10-02T13:23:02.747Z",
  "deployed": false,
  "flowData": "{\"nodes\":[{\"id\":\"seqStart_0\",\"position\":{\"x\":25.06205934233691,\"y\":505.6377373891362},\"type\":\"customNode\",\"data\":{\"label\":\"Start\",\"name\":\"seqStart\",\"version\":2,\"type\":\"Start\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/start.svg\",\"category\":\"Sequential Agents\",\"description\":\"Starting point of the conversation\",\"baseClasses\":[\"Start\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-1.-start-node\",\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"agentMemory\":\"\",\"state\":\"\",\"inputModeration\":\"\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/Start.js\",\"inputAnchors\":[{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"description\":\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat\",\"id\":\"seqStart_0-input-model-BaseChatModel\"},{\"label\":\"Agent Memory\",\"name\":\"agentMemory\",\"type\":\"BaseCheckpointSaver\",\"description\":\"Save the state of the agent\",\"optional\":true,\"id\":\"seqStart_0-input-agentMemory-BaseCheckpointSaver\"},{\"label\":\"State\",\"name\":\"state\",\"type\":\"State\",\"description\":\"State is an object that is updated by nodes in the graph, passing from one node to another. By default, state contains \\\"messages\\\" that got updated with each message sent and received.\",\"optional\":true,\"id\":\"seqStart_0-input-state-State\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"seqStart_0-input-inputModeration-Moderation\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqStart_0-output-seqStart-Start\",\"name\":\"seqStart\",\"label\":\"Start\",\"description\":\"Starting point of the conversation\",\"type\":\"Start\"}],\"id\":\"seqStart_0\",\"selected\":false},\"width\":300,\"height\":383,\"selected\":false,\"positionAbsolute\":{\"x\":25.06205934233691,\"y\":505.6377373891362},\"dragging\":false},{\"id\":\"chatOpenAI_0\",\"position\":{\"x\":-682.2980764417241,\"y\":-194.89357975186434},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"ChatOpenAI\",\"name\":\"chatOpenAI\",\"version\":8,\"type\":\"ChatOpenAI\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg\",\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"credential\":\"a0fffb09-1722-4f82-8532-e2bba4363b32\",\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-4o-mini\",\"temperature\":\"0\",\"streaming\":true,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"basepath\":\"\",\"proxyUrl\":\"\",\"stopSequence\":\"\",\"baseOptions\":\"\",\"allowImageUploads\":false,\"imageResolution\":\"high\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js\",\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"asyncOptions\",\"loadMethod\":\"listModels\",\"default\":\"gpt-4o-mini\",\"id\":\"chatOpenAI_0-input-modelName-asyncOptions\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Streaming\",\"name\":\"streaming\",\"type\":\"boolean\",\"default\":true,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-streaming-boolean\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"Proxy Url\",\"name\":\"proxyUrl\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-proxyUrl-string\"},{\"label\":\"Stop Sequence\",\"name\":\"stopSequence\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"description\":\"List of stop words to use when generating. Use comma to separate multiple stop words.\",\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-stopSequence-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"},{\"label\":\"Allow Image Uploads\",\"name\":\"allowImageUploads\",\"type\":\"boolean\",\"description\":\"Allow image input. Refer to the <a href=\\\"https://docs.flowiseai.com/using-flowise/uploads#image\\\" target=\\\"_blank\\\">docs</a> for more details.\",\"default\":false,\"optional\":true,\"id\":\"chatOpenAI_0-input-allowImageUploads-boolean\"},{\"label\":\"Image Resolution\",\"description\":\"This parameter controls the resolution in which the model views the image.\",\"name\":\"imageResolution\",\"type\":\"options\",\"options\":[{\"label\":\"Low\",\"name\":\"low\"},{\"label\":\"High\",\"name\":\"high\"},{\"label\":\"Auto\",\"name\":\"auto\"}],\"default\":\"low\",\"optional\":false,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-imageResolution-options\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"id\":\"chatOpenAI_0\",\"selected\":false},\"width\":300,\"height\":670,\"selected\":false,\"positionAbsolute\":{\"x\":-682.2980764417241,\"y\":-194.89357975186434},\"dragging\":false},{\"id\":\"seqCondition_0\",\"position\":{\"x\":559.9688049200884,\"y\":458.0824197893654},\"type\":\"customNode\",\"data\":{\"label\":\"Condition\",\"name\":\"seqCondition\",\"version\":2,\"type\":\"Condition\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Condition/condition.svg\",\"category\":\"Sequential Agents\",\"description\":\"Conditional function to determine which route to take next\",\"baseClasses\":[\"Condition\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-7.-conditional-node\",\"inputs\":{\"conditionName\":\"step-identification\",\"sequentialNode\":[\"{{seqStart_0.data.instance}}\"],\"condition\":\"\",\"conditionFunction\":\"const messages = $flow.state.messages;\\nconst lastMessage = messages[messages.length - 1];\\n\\nif (lastMessage.content.includes(\\\"hasExeptionPrompt\\\")) {\\n  return \\\"hasExeptionPrompt\\\";\\n}\\nelse if (lastMessage.content.includes(\\\"dontHasExeptionPrompt\\\")) {\\n    return \\\"dontHasExeptionPrompt\\\";\\n}\",\"selectedConditionFunctionTab_seqCondition_0\":\"conditionFunction\"},\"outputs\":{\"output\":\"next\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Condition/Condition.js\",\"inputAnchors\":[{\"label\":\"Start | Agent | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\"}],\"inputParams\":[{\"label\":\"Condition Name\",\"name\":\"conditionName\",\"type\":\"string\",\"optional\":true,\"placeholder\":\"If X, then Y\",\"id\":\"seqCondition_0-input-conditionName-string\"},{\"label\":\"Condition\",\"name\":\"condition\",\"type\":\"conditionFunction\",\"tabIdentifier\":\"selectedConditionFunctionTab\",\"tabs\":[{\"label\":\"Condition (Table)\",\"name\":\"conditionUI\",\"type\":\"datagrid\",\"description\":\"If a condition is met, the node connected to the respective output will be executed\",\"optional\":true,\"datagrid\":[{\"field\":\"variable\",\"headerName\":\"Variable\",\"type\":\"freeSolo\",\"editable\":true,\"loadMethod\":[\"getPreviousMessages\",\"loadStateKeys\"],\"valueOptions\":[{\"label\":\"Total Messages (number)\",\"value\":\"$flow.state.messages.length\"},{\"label\":\"First Message Content (string)\",\"value\":\"$flow.state.messages[0].content\"},{\"label\":\"Last Message Content (string)\",\"value\":\"$flow.state.messages[-1].content\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"}],\"flex\":0.5,\"minWidth\":200},{\"field\":\"operation\",\"headerName\":\"Operation\",\"type\":\"singleSelect\",\"valueOptions\":[\"Contains\",\"Not Contains\",\"Start With\",\"End With\",\"Is\",\"Is Not\",\"Is Empty\",\"Is Not Empty\",\"Greater Than\",\"Less Than\",\"Equal To\",\"Not Equal To\",\"Greater Than or Equal To\",\"Less Than or Equal To\"],\"editable\":true,\"flex\":0.4,\"minWidth\":150},{\"field\":\"value\",\"headerName\":\"Value\",\"flex\":1,\"editable\":true},{\"field\":\"output\",\"headerName\":\"Output Name\",\"editable\":true,\"flex\":0.3,\"minWidth\":150}]},{\"label\":\"Condition (Code)\",\"name\":\"conditionFunction\",\"type\":\"code\",\"description\":\"Function to evaluate the condition\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Must return a string value at the end of function. For example:\\n    ```js\\n    if (\\\"X\\\" === \\\"X\\\") {\\n        return \\\"Agent\\\"; // connect to next agent node\\n    } else {\\n        return \\\"End\\\"; // connect to end node\\n    }\\n    ```\\n\\n2. In most cases, you would probably get the last message to do some comparison. You can get all current messages from the state: `$flow.state.messages`:\\n    ```json\\n    [\\n        {\\n            \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n            \\\"name\\\": \\\"\\\",\\n            \\\"additional_kwargs\\\": {},\\n            \\\"response_metadata\\\": {},\\n            \\\"tool_calls\\\": [],\\n            \\\"invalid_tool_calls\\\": [],\\n            \\\"usage_metadata\\\": {}\\n        }\\n    ]\\n    ```\\n\\n    For example, to get the last message content:\\n    ```js\\n    const messages = $flow.state.messages;\\n    const lastMessage = messages[messages.length - 1];\\n\\n    // Proceed to do something with the last message content\\n    ```\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"hideCodeExecute\":true,\"codeExample\":\"const state = $flow.state;\\n                \\nconst messages = state.messages;\\n\\nconst lastMessage = messages[messages.length - 1];\\n\\n/* Check if the last message has content */\\nif (lastMessage.content) {\\n    return \\\"Agent\\\";\\n}\\n\\nreturn \\\"End\\\";\",\"optional\":true}],\"id\":\"seqCondition_0-input-condition-conditionFunction\"}],\"outputAnchors\":[{\"name\":\"output\",\"label\":\"Output\",\"type\":\"options\",\"options\":[{\"id\":\"seqCondition_0-output-donthasexeptionprompt-Condition\",\"name\":\"donthasexeptionprompt\",\"label\":\"dontHasExeptionPrompt\",\"type\":\"Condition\",\"isAnchor\":true},{\"id\":\"seqCondition_0-output-hasexeptionprompt-Condition\",\"name\":\"hasexeptionprompt\",\"label\":\"hasExeptionPrompt\",\"type\":\"Condition\",\"isAnchor\":true}]}],\"id\":\"seqCondition_0\",\"selected\":false},\"width\":300,\"height\":475,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":559.9688049200884,\"y\":458.0824197893654}},{\"id\":\"seqEnd_2\",\"position\":{\"x\":1687.501842863387,\"y\":113.60936907283195},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_4.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_2-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_2\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":1687.501842863387,\"y\":113.60936907283195},\"selected\":false,\"dragging\":false},{\"id\":\"stickyNote_0\",\"position\":{\"x\":520.8312821846853,\"y\":191.04475946895747},\"type\":\"stickyNote\",\"data\":{\"label\":\"Sticky Note\",\"name\":\"stickyNote\",\"version\":2,\"type\":\"StickyNote\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/stickyNote.svg\",\"category\":\"Utilities\",\"tags\":[\"Utilities\"],\"description\":\"Add a sticky note\",\"inputs\":{\"note\":\"Formato de prompt:\\n\\nContendo \\\"CHECKLIST\\\"- Extrai dados do documento baseado no checklist fornecido\\nContendo \\\"EXTRACTION\\\" - Extrai todos os dados encontrados no documento\\nContendo \\\"CROSS_VALIDATION\\\" - Faz a validação cruzada de dois JSONs passado no chat.\\n[N.D.A] - Cai no fluxo de compliance\"},\"baseClasses\":[\"StickyNote\"],\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/utilities/StickyNote/StickyNote.js\",\"inputAnchors\":[],\"inputParams\":[{\"label\":\"\",\"name\":\"note\",\"type\":\"string\",\"rows\":1,\"placeholder\":\"Type something here\",\"optional\":true,\"id\":\"stickyNote_0-input-note-string\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"stickyNote_0-output-stickyNote-StickyNote\",\"name\":\"stickyNote\",\"label\":\"StickyNote\",\"description\":\"Add a sticky note\",\"type\":\"StickyNote\"}],\"id\":\"stickyNote_0\",\"selected\":false},\"width\":300,\"height\":223,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":520.8312821846853,\"y\":191.04475946895747}},{\"id\":\"seqAgent_2\",\"position\":{\"x\":1079.8932202203423,\"y\":495.1139257119088},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"hasExeptionPrompt\",\"systemMessagePrompt\":\"Analise os dados fornecidos no{question}seguinte formato (cada coluna é separada por uma vírgula “,” e cada linha é separada por uma quebra de linha). Com base nos campos fornecidos, extraia e formate as informações conforme as regras a seguir.\\n\\nRegras de Extração:\\n\\t1.\\tImposto de Importação (II):\\n\\t•\\tUse o valor fornecido diretamente no final do dado de entrada (II).\\n\\t•\\tSe o Anexo IV  for true, adicione o seguinte alerta logo abaixo do valor da alíquota:\\n\\t\\t\\\"NCM consta no Anexo IV da Resolução Gecex 272/21 (Reduções tarifárias por razões de abastecimento ao amparo da Resolução Grupo Mercado Comum do Mercosul nº 49/19). Verifique se o produto se enquadra e os procedimentos para redução do Imposto de Importação.\\\"\\n\\t2.\\tImposto sobre Produtos Industrializados (IPI):\\n     Liste todas as exceções conforme encontrado nas colunas “EX”, “DESCRIÇÃO” e “ALÍQUOTA (%)”. Formate como:\\n\\t•\\t“Exceções: [Nº da Exceção] [Descrição]: [Imposto Exceção]”\\n\\t•\\tAs exceções devem vir imediatamente abaixo do IPI.\\n\\n\\t3.\\tPIS e COFINS:\\n\\t•\\tUse os valores fornecidos diretamente no final do dado de entrada (PIS e COFINS).\\n\\t4.\\tFormatação HTML:\\n\\t•\\tEstruture o retorno em HTML. Cada imposto deve ter os alertas correspondentes diretamente abaixo de seu valor. Não use formatação como \\\\n ou markdown.\\n\\n• Caso a coluna **“BIT/BK”** contenha algum valor dentro das chaves(a chave deve ter um valor associado e não estar apenas presente), adicione o alerta:\\n\\\"NCM assinalada na TEC como BK/BIT, verificar se há Ex-tarifário publicado para a mercadoria e/ou possibilidade de pleitear novo.\\\"\\n\\n\\nFormato de Resposta:\\n<html>\\n<body>\\n<table border=\\\"1\\\" cellpadding=\\\"10\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse; width: 100%;\\\">\\n  <tbody>\\n    <tr>\\n      <td>Imposto de Importação (II): [VALOR_FORNECIDO_II]%</td>\\n    </tr>\\n    <tr>\\n      <td>[ALERTA_BK_BIT_SE_APLICAVEL]</td>\\n    </tr>\\n     <tr>\\n      <td>[ALERTA_ANEXO_IV_SE_APLICAVEL]</td>\\n    </tr>\\n    <tr>\\n      <td>Imposto sobre Produtos Industrializados (IPI): [VALOR_FORNECIDO_IPI]%</td>\\n    </tr>\\n    <tr>\\n      <td>Exceções:</td>\\n    </tr>\\n    <tr>\\n      <td>[Nº da Exceção] [Descrição]: [Imposto Exceção]</td>\\n    </tr>\\n    <tr>\\n      <td>PIS: [VALOR_FORNECIDO_PIS]</td>\\n    </tr>\\n    <tr>\\n      <td>COFINS: [VALOR_FORNECIDO_COFINS]</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</body>\\n</html>\\n\\n\\nNotas:\\n\\t1.\\tReferências Dinâmicas:\\n\\t•\\t[VALOR_DA_COLUNA_NCM]: Substitua pelo valor da coluna NCM.\\n\\t•\\t[VALOR_FORNECIDO_II], [VALOR_FORNECIDO_IPI], [VALOR_FORNECIDO_PIS] e [VALOR_FORNECIDO_COFINS]: Substitua pelos valores fornecidos diretamente no dado de entrada (II, IPI, PIS e COFINS).\\n\\t2.\\tAlertas Dinâmicos:\\n\\t•\\t[ALERTA_BK_BIT_SE_APLICAVEL]: Substitua pelo alerta relacionado a BIT/BK se aplicável.\\n\\t•\\t[ALERTA_ANEXO_IV]: Substitua pelo alerta do Anexo IV.\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"question\\\":\\\"{{question}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_2\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_2-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_2-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_2-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_2-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_2-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_2-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_2-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_2-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_2-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_2-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_2\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":true,\"positionAbsolute\":{\"x\":1079.8932202203423,\"y\":495.1139257119088},\"dragging\":false},{\"id\":\"seqEnd_3\",\"position\":{\"x\":1684.3085423113962,\"y\":1112.3349567541563},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_2.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode\",\"id\":\"seqEnd_3-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_3\",\"selected\":false},\"width\":300,\"height\":143,\"positionAbsolute\":{\"x\":1684.3085423113962,\"y\":1112.3349567541563},\"selected\":false,\"dragging\":false},{\"id\":\"seqAgent_4\",\"position\":{\"x\":1073.300215567057,\"y\":-417.62204949718426},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"dontHasExeptionPrompt\",\"systemMessagePrompt\":\"Analise os dados fornecidos no seguinte formato (cada coluna é separada por uma vírgula “,” e cada linha é separada por uma quebra de linha). Com base nos campos fornecidos, extraia e formate as informações conforme as regras a seguir.\\n\\nRegras de Extração:\\n1. Imposto de Importação (II):\\n• Use o valor fornecido diretamente no final do dado de entrada (II).\\n• Se o Anexo IV for true, adicione o seguinte alerta logo abaixo do valor da alíquota:\\n\\\"NCM consta no Anexo IV da Resolução Gecex 272/21 (Reduções tarifárias por razões de abastecimento ao amparo da Resolução Grupo Mercado Comum do Mercosul nº 49/19). Verifique se o produto se enquadra e os procedimentos para redução do Imposto de Importação.\\\"\\n\\t2.\\tImposto sobre Produtos Industrializados (IPI):\\n\\t•\\tUse o valor fornecido diretamente no final do dado de entrada (IPI).\\n\\t3.\\tPIS e COFINS:\\n\\t•\\tUse os valores fornecidos diretamente no final do dado de entrada (PIS e COFINS).\\n\\t4.\\tFormatação HTML:\\n\\t•\\tEstruture o retorno em HTML. Cada imposto deve ter os alertas correspondentes diretamente abaixo de seu valor. Não use formatação como \\\\n ou markdown.\\n\\n• Caso a coluna **“BIT/BK”** contenha algum valor dentro das chaves(a chave deve ter um valor associado e não estar apenas presente), adicione o alerta:\\n\\\"NCM assinalada na TEC como BK/BIT, verificar se há Ex-tarifário publicado para a mercadoria e/ou possibilidade de pleitear novo.\\\"\\n\\nExemplo de Retorno:\\n\\n<html>\\n<body>\\n<table border=\\\"1\\\" cellpadding=\\\"10\\\" cellspacing=\\\"0\\\" style=\\\"border-collapse: collapse; width: 100%;\\\">\\n  <tbody>\\n    <tr>\\n      <td>Imposto de Importação (II): [VALOR_FORNECIDO_II]%</td>\\n    </tr>\\n    <tr>\\n      <td>[ALERTA_BK_BIT_SE_APLICAVEL]</td>\\n    </tr>\\n     <tr>\\n      <td>[ALERTA_ANEXO_IV_SE_APLICAVEL]</td>\\n    </tr>\\n    <tr>\\n      <td>Imposto sobre Produtos Industrializados (IPI): [VALOR_FORNECIDO_IPI]%</td>\\n    </tr>\\n    <tr>\\n      <td>PIS: [VALOR_FORNECIDO_PIS]</td>\\n    </tr>\\n    <tr>\\n      <td>COFINS: [VALOR_FORNECIDO_COFINS]</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</body>\\n</html>\\n\\nNotas:\\n\\t1.\\tReferências Dinâmicas:\\n\\t•\\t [VALOR_FORNECIDO_II],  [VALOR_FORNECIDO_IPI], [VALOR_FORNECIDO_PIS] e [VALOR_FORNECIDO_COFINS]: Substitua pelos valores fornecidos diretamente no dado de entrada (II, IPI, PIS e COFINS).\\n\\t2.\\tAlertas Dinâmicos:\\n\\t•\\t[ALERTA_EXCECAO_IPI_SE_APLICAVEL]: Substitua pelo alerta relacionado a exceções de IPI, se aplicável.\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqCondition_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"question\\\":\\\"{{question}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_4\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_4-input-tools-Tool\"},{\"label\":\"Start | Agent | Condition | LLM | Tool Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode\",\"list\":true,\"id\":\"seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_4-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_4-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_4-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_4-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_4-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_4-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_4-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_4-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_4-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_4\",\"selected\":false},\"width\":300,\"height\":879,\"selected\":false,\"positionAbsolute\":{\"x\":1073.300215567057,\"y\":-417.62204949718426},\"dragging\":false},{\"id\":\"inMemoryCache_0\",\"position\":{\"x\":-1258.7806929652013,\"y\":-175.13328720304767},\"type\":\"customNode\",\"data\":{\"label\":\"InMemory Cache\",\"name\":\"inMemoryCache\",\"version\":1,\"type\":\"InMemoryCache\",\"description\":\"Cache LLM response in memory, will be cleared once app restarted\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/cache/InMemoryCache/Memory.svg\",\"category\":\"Cache\",\"baseClasses\":[\"InMemoryCache\",\"BaseCache\"],\"inputs\":{},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/cache/InMemoryCache/InMemoryCache.js\",\"inputAnchors\":[],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[{\"id\":\"inMemoryCache_0-output-inMemoryCache-InMemoryCache|BaseCache\",\"name\":\"inMemoryCache\",\"label\":\"InMemoryCache\",\"description\":\"Cache LLM response in memory, will be cleared once app restarted\",\"type\":\"InMemoryCache | BaseCache\"}],\"id\":\"inMemoryCache_0\",\"selected\":false},\"width\":300,\"height\":143,\"selected\":false,\"positionAbsolute\":{\"x\":-1258.7806929652013,\"y\":-175.13328720304767},\"dragging\":false}],\"edges\":[{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"seqStart_0\",\"targetHandle\":\"seqStart_0-input-model-BaseChatModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqStart_0-seqStart_0-input-model-BaseChatModel\"},{\"source\":\"seqStart_0\",\"sourceHandle\":\"seqStart_0-output-seqStart-Start\",\"target\":\"seqCondition_0\",\"targetHandle\":\"seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqStart_0-seqStart_0-output-seqStart-Start-seqCondition_0-seqCondition_0-input-sequentialNode-Start | Agent | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-crossValidation-Condition\",\"target\":\"seqAgent_2\",\"targetHandle\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-crossValidation-Condition-seqAgent_2-seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_2\",\"sourceHandle\":\"seqAgent_2-output-seqAgent-Agent\",\"target\":\"seqEnd_3\",\"targetHandle\":\"seqEnd_3-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_2-seqAgent_2-output-seqAgent-Agent-seqEnd_3-seqEnd_3-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqAgent_4\",\"sourceHandle\":\"seqAgent_4-output-seqAgent-Agent\",\"target\":\"seqEnd_2\",\"targetHandle\":\"seqEnd_2-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqAgent_4-seqAgent_4-output-seqAgent-Agent-seqEnd_2-seqEnd_2-input-sequentialNode-Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-donthasexeptionprompt-Condition\",\"target\":\"seqAgent_4\",\"targetHandle\":\"seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-donthasexeptionprompt-Condition-seqAgent_4-seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"},{\"source\":\"seqCondition_0\",\"sourceHandle\":\"seqCondition_0-output-hasexeptionprompt-Condition\",\"target\":\"seqAgent_2\",\"targetHandle\":\"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\",\"type\":\"buttonedge\",\"id\":\"seqCondition_0-seqCondition_0-output-hasexeptionprompt-Condition-seqAgent_2-seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode\"}],\"viewport\":{\"x\":747.6211010931195,\"y\":189.15048596216585,\"zoom\":0.3729242630761166}}",
  "followUpPrompts": null,
  "id": "2307d387-a1bb-4991-89ed-8bab8b599471",
  "isPublic": false,
  "name": "Analise critica - [ 2 - Tratamento Tributário ]",
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "flowise-workflows/",
  "speechToText": null,
  "type": "MULTIAGENT",
  "updatedDate": "2025-01-09T20:14:21.128Z"
}