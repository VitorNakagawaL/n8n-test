{"nodes":[{"id":"seqStart_0","position":{"x":1052.77582644074,"y":-22.683215762892758},"type":"customNode","data":{"id":"seqStart_0","label":"Start","version":2,"name":"seqStart","type":"Start","baseClasses":["Start"],"category":"Sequential Agents","description":"Starting point of the conversation","inputParams":[],"inputAnchors":[{"label":"Chat Model","name":"model","type":"BaseChatModel","description":"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat","id":"seqStart_0-input-model-BaseChatModel"},{"label":"Agent Memory","name":"agentMemory","type":"BaseCheckpointSaver","description":"Save the state of the agent","optional":true,"id":"seqStart_0-input-agentMemory-BaseCheckpointSaver"},{"label":"State","name":"state","type":"State","description":"State is an object that is updated by nodes in the graph, passing from one node to another. By default, state contains \"messages\" that got updated with each message sent and received.","optional":true,"id":"seqStart_0-input-state-State"},{"label":"Input Moderation","description":"Detect text that could generate harmful output and prevent it from being sent to the language model","name":"inputModeration","type":"Moderation","optional":true,"list":true,"id":"seqStart_0-input-inputModeration-Moderation"}],"inputs":{"model":"{{chatOpenAI_0.data.instance}}","agentMemory":"","state":"{{seqState_0.data.instance}}","inputModeration":""},"outputAnchors":[{"id":"seqStart_0-output-seqStart-Start","name":"seqStart","label":"Start","description":"Starting point of the conversation","type":"Start"}],"outputs":{},"selected":false},"width":300,"height":378,"positionAbsolute":{"x":1052.77582644074,"y":-22.683215762892758},"selected":false,"dragging":false},{"id":"seqAgent_0","position":{"x":1662.2160930634866,"y":-110.55579528759745},"type":"customNode","data":{"id":"seqAgent_0","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_0-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_0-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_0-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_0-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_0-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_0-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_0-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_0-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_0-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_0-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_0-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_0-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_0-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_0-input-model-BaseChatModel"}],"inputs":{"agentName":"Identificator","systemMessagePrompt":"Você é um especialista em classificação fiscal de produtos baseado no NCM. Você deve ajustar uma descrição leiga ou as vezes imprecisa para um formato de descrição de NCM,  use a ferramenta para embasar a descrição, gerando os argumentos para classificação do NCM como um todo, faça uma síntese que não perca as informações relevantes. Tente responder na descrição as seguintes perguntas: \"Em qual das categorias gerais a mercadoria se enquadra? (Exemplo: Animais vivos, Produtos vegetais, Máquinas, etc.)?\", \"A mercadoria possui alguma característica específica que a diferencia das demais dessa subcategoria?\", \"Qual o nível mais detalhado que melhor descreve o produto?\". Caso não sejam encontrados dados relacionados à descrição inicial, evite classificar como \"Outros\", sua ideia é ajudar na classificação de outros agentes que filtrarão posteriormente usando a descrição como critério, tente encontrar informações relacionadas a capitulo e posição (4 primeiros dígitos).\n\nIMPORTANTE: Você não classifica o ncm, apenas fornece insumos para que a ferramenta e seu expertise em classificação fiscal façam a melhoria da descrição: {question}.\n\nTemplate de retorno: \nEntrada do usuário:  {question}\ndescrição melhorada gerada por AI: (descrição)\nargumentos normativos:  (argumentos)\n","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{retrieverTool_0.data.instance}}"],"sequentialNode":["{{seqStart_0.data.instance}}","{{seqStart_0.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"question\":\"{{question}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"","selectedUpdateStateMemoryTab_seqAgent_0":"updateStateMemoryCode"},"outputAnchors":[{"id":"seqAgent_0-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":1662.2160930634866,"y":-110.55579528759745},"dragging":false},{"id":"seqAgent_1","position":{"x":1996.2324138489512,"y":-110.21924052968504},"type":"customNode","data":{"id":"seqAgent_1","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_1-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_1-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_1-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_1-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_1-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_1-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_1-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_1-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_1-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_1-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_1-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_1-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_1-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_1-input-model-BaseChatModel"}],"inputs":{"agentName":"Capitulo","systemMessagePrompt":"Utilize a ferramenta para escolher entre os retornos o mais adequado de acordo com a descrição do produto informado, lembre se de ser o mais específico possível nessa parte e escolher o que melhor se encaixa num grupo geral: \n-\nReferências: {descricao}\n-\nConsiderando as referências defina um CAPITULO (2 primeiros números do NCM) adequado para o produto descrito a partir dos retornos da ferramenta e passe o resultado ao próximo especialista.\n\n{template}","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_1.data.instance}}"],"sequentialNode":["{{seqAgent_0.data.instance}}","{{seqAgent_0.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"descricao\":\"{{seqAgent_0.data.instance}}\",\"template\":\"{{plainText_0}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"","selectedUpdateStateMemoryTab_seqAgent_1":"updateStateMemoryUI","updateStateMemoryUI":"[{\"key\":\"ncmData\",\"value\":\"\",\"actions\":\"\",\"id\":1}]"},"outputAnchors":[{"id":"seqAgent_1-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":1996.2324138489512,"y":-110.21924052968504},"dragging":false},{"id":"seqAgent_4","position":{"x":3301.184731760191,"y":-118.11812255157844},"type":"customNode","data":{"id":"seqAgent_4","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_4-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_4-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_4-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_4-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_4-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_4-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_4-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_4-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_4-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_4-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_4-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_4-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_4-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_4-input-model-BaseChatModel"}],"inputs":{"agentName":"subItem","systemMessagePrompt":"Utilize a ferramenta dando como entrada obrigatoriamente o código ncm presente no resultado anterior como  'ncmData', enviando apenas os digitos numerais(sem pontuações ou caracteres a mais) para comparar os ncm de 8 números que iniciam com o resultado anterior e escolher entre os retornos da ferramenta a que melhor se encaixa com a descrição do produto\n\nReferências: {descricao}\n\nResultado Anterior: {resultado}\n\nConsiderando o resultado anterior e as referências defina a SUBITEM (oitavo dígito do NCM) adequado para continuar classificando o produto descrito a partir dos códigos do retorno da ferramenta e passe ao próximo especialista. Caso não encontre, retorne o resultado númerico do agente anterior novamente e vá para o próximo agente.\n\n{template}\n","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_3.data.instance}}"],"sequentialNode":["{{seqAgent_7.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"resultado\":\"{{seqAgent_3.data.instance}}\",\"descricao\":\"{{seqAgent_0.data.instance}}\",\"template\":\"{{plainText_0}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"","selectedUpdateStateMemoryTab_seqAgent_4":"updateStateMemoryUI"},"outputAnchors":[{"id":"seqAgent_4-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":3301.184731760191,"y":-118.11812255157844},"dragging":false},{"id":"seqEnd_0","position":{"x":4561.376559767307,"y":-73.01432779145378},"type":"customNode","data":{"id":"seqEnd_0","label":"End","version":2.1,"name":"seqEnd","type":"End","baseClasses":["End"],"category":"Sequential Agents","description":"End conversation","inputParams":[],"inputAnchors":[{"label":"Sequential Node","name":"sequentialNode","type":"Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","id":"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"}],"inputs":{"sequentialNode":"{{seqAgent_6.data.instance}}"},"outputAnchors":[],"outputs":{},"selected":false},"width":300,"height":142,"positionAbsolute":{"x":4561.376559767307,"y":-73.01432779145378},"selected":false,"dragging":false},{"id":"customTool_1","position":{"x":2050.4335792580555,"y":1083.1000795485568},"type":"customNode","data":{"id":"customTool_1","label":"Custom Tool","version":3,"name":"customTool","type":"CustomTool","baseClasses":["CustomTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use custom tool you've created in Flowise within chatflow","inputParams":[{"label":"Select Tool","name":"selectedTool","type":"asyncOptions","loadMethod":"listTools","id":"customTool_1-input-selectedTool-asyncOptions"},{"label":"Return Direct","name":"returnDirect","description":"Return the output of the tool directly to the user","type":"boolean","optional":true,"id":"customTool_1-input-returnDirect-boolean"},{"label":"Custom Tool Name","name":"customToolName","type":"string","hidden":true,"id":"customTool_1-input-customToolName-string"},{"label":"Custom Tool Description","name":"customToolDesc","type":"string","hidden":true,"id":"customTool_1-input-customToolDesc-string"},{"label":"Custom Tool Schema","name":"customToolSchema","type":"string","hidden":true,"id":"customTool_1-input-customToolSchema-string"},{"label":"Custom Tool Func","name":"customToolFunc","type":"string","hidden":true,"id":"customTool_1-input-customToolFunc-string"}],"inputAnchors":[],"inputs":{"selectedTool":"ba10e9df-39f6-4b60-bb6f-175979030960","returnDirect":"","customToolName":"","customToolDesc":"","customToolSchema":"","customToolFunc":""},"outputAnchors":[{"id":"customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable","name":"customTool","label":"CustomTool","description":"Use custom tool you've created in Flowise within chatflow","type":"CustomTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":369,"selected":false,"dragging":false,"positionAbsolute":{"x":2050.4335792580555,"y":1083.1000795485568}},{"id":"customTool_2","position":{"x":2386.4704728086026,"y":1068.8605173585645},"type":"customNode","data":{"id":"customTool_2","label":"Custom Tool","version":3,"name":"customTool","type":"CustomTool","baseClasses":["CustomTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use custom tool you've created in Flowise within chatflow","inputParams":[{"label":"Select Tool","name":"selectedTool","type":"asyncOptions","loadMethod":"listTools","id":"customTool_2-input-selectedTool-asyncOptions"},{"label":"Return Direct","name":"returnDirect","description":"Return the output of the tool directly to the user","type":"boolean","optional":true,"id":"customTool_2-input-returnDirect-boolean"},{"label":"Custom Tool Name","name":"customToolName","type":"string","hidden":true,"id":"customTool_2-input-customToolName-string"},{"label":"Custom Tool Description","name":"customToolDesc","type":"string","hidden":true,"id":"customTool_2-input-customToolDesc-string"},{"label":"Custom Tool Schema","name":"customToolSchema","type":"string","hidden":true,"id":"customTool_2-input-customToolSchema-string"},{"label":"Custom Tool Func","name":"customToolFunc","type":"string","hidden":true,"id":"customTool_2-input-customToolFunc-string"}],"inputAnchors":[],"inputs":{"selectedTool":"ce3dbd06-d076-4ec7-8d87-fd1983559604","returnDirect":"","customToolName":"","customToolDesc":"","customToolSchema":"","customToolFunc":""},"outputAnchors":[{"id":"customTool_2-output-customTool-CustomTool|Tool|StructuredTool|Runnable","name":"customTool","label":"CustomTool","description":"Use custom tool you've created in Flowise within chatflow","type":"CustomTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":369,"selected":false,"dragging":false,"positionAbsolute":{"x":2386.4704728086026,"y":1068.8605173585645}},{"id":"customTool_3","position":{"x":3406.5908965819813,"y":1098.3542215802174},"type":"customNode","data":{"id":"customTool_3","label":"Custom Tool","version":3,"name":"customTool","type":"CustomTool","baseClasses":["CustomTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use custom tool you've created in Flowise within chatflow","inputParams":[{"label":"Select Tool","name":"selectedTool","type":"asyncOptions","loadMethod":"listTools","id":"customTool_3-input-selectedTool-asyncOptions"},{"label":"Return Direct","name":"returnDirect","description":"Return the output of the tool directly to the user","type":"boolean","optional":true,"id":"customTool_3-input-returnDirect-boolean"},{"label":"Custom Tool Name","name":"customToolName","type":"string","hidden":true,"id":"customTool_3-input-customToolName-string"},{"label":"Custom Tool Description","name":"customToolDesc","type":"string","hidden":true,"id":"customTool_3-input-customToolDesc-string"},{"label":"Custom Tool Schema","name":"customToolSchema","type":"string","hidden":true,"id":"customTool_3-input-customToolSchema-string"},{"label":"Custom Tool Func","name":"customToolFunc","type":"string","hidden":true,"id":"customTool_3-input-customToolFunc-string"}],"inputAnchors":[],"inputs":{"selectedTool":"fb79eccd-d1a2-4e8d-90d0-e7499b4dd651","returnDirect":"","customToolName":"","customToolDesc":"","customToolSchema":"","customToolFunc":""},"outputAnchors":[{"id":"customTool_3-output-customTool-CustomTool|Tool|StructuredTool|Runnable","name":"customTool","label":"CustomTool","description":"Use custom tool you've created in Flowise within chatflow","type":"CustomTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":369,"selected":false,"dragging":false,"positionAbsolute":{"x":3406.5908965819813,"y":1098.3542215802174}},{"id":"seqAgent_5","position":{"x":2320.982048504347,"y":-112.22762081271236},"type":"customNode","data":{"id":"seqAgent_5","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_5-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_5-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_5-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_5-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_5-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_5-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_5-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_5-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_5-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_5-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_5-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_5-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_5-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_5-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_5-input-model-BaseChatModel"}],"inputs":{"agentName":"Posicao","systemMessagePrompt":"Utilize a ferramenta dando como entrada obrigatoriamente o código de dois dígitos de ncm escolhido no resultado anterior como  'ncmData', enviando apenas os digitos numerais(sem pontuações ou caracteres a mais) para comparar os ncm de 4 números que iniciam com o resultado anterior e escolher entre os retornos da ferramenta a que melhor se encaixa com a descrição do produto.\n\nReferências: {descricao}\n-\nResultado Anterior: {resultadoAnterior}\n-\nConsiderando o resultado anterior e as referências defina a POSIÇÃO (terceiro e quarto dígito do NCM) adequado para continuar classificando o produto descrito a partir dos códigos do retorno da ferramenta e passe ao próximo especialista. Caso não encontre, retorne o resultado númerico do agente anterior novamente e vá para o próximo agente.\n\n{template}\n","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_2.data.instance}}"],"sequentialNode":["{{seqAgent_1.data.instance}}","{{seqAgent_1.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"resultadoAnterior\":\"{{seqAgent_1.data.instance}}\",\"descricao\":\"{{seqAgent_0.data.instance}}\",\"template\":\"{{plainText_0}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"2","selectedUpdateStateMemoryTab_seqAgent_5":"updateStateMemoryUI"},"outputAnchors":[{"id":"seqAgent_5-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":2320.982048504347,"y":-112.22762081271236},"dragging":false},{"id":"chatOpenAI_0","position":{"x":729.1121511503261,"y":-306.1494117737509},"type":"customNode","data":{"id":"chatOpenAI_0","label":"ChatOpenAI","version":8.1,"name":"chatOpenAI","type":"ChatOpenAI","baseClasses":["ChatOpenAI","BaseChatModel","BaseLanguageModel","Runnable"],"category":"Chat Models","description":"Wrapper around OpenAI large language models that use the Chat endpoint","inputParams":[{"label":"Connect Credential","name":"credential","type":"credential","credentialNames":["openAIApi"],"id":"chatOpenAI_0-input-credential-credential"},{"label":"Model Name","name":"modelName","type":"asyncOptions","loadMethod":"listModels","default":"gpt-4o-mini","id":"chatOpenAI_0-input-modelName-asyncOptions"},{"label":"Temperature","name":"temperature","type":"number","step":0.1,"default":0.9,"optional":true,"id":"chatOpenAI_0-input-temperature-number"},{"label":"Streaming","name":"streaming","type":"boolean","default":true,"optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-streaming-boolean"},{"label":"Max Tokens","name":"maxTokens","type":"number","step":1,"optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-maxTokens-number"},{"label":"Top Probability","name":"topP","type":"number","step":0.1,"optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-topP-number"},{"label":"Frequency Penalty","name":"frequencyPenalty","type":"number","step":0.1,"optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-frequencyPenalty-number"},{"label":"Presence Penalty","name":"presencePenalty","type":"number","step":0.1,"optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-presencePenalty-number"},{"label":"Timeout","name":"timeout","type":"number","step":1,"optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-timeout-number"},{"label":"Strict Tool Calling","name":"strictToolCalling","type":"boolean","description":"Whether the model supports the `strict` argument when passing in tools. If not specified, the `strict` argument will not be passed to OpenAI.","optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-strictToolCalling-boolean"},{"label":"Stop Sequence","name":"stopSequence","type":"string","rows":4,"optional":true,"description":"List of stop words to use when generating. Use comma to separate multiple stop words.","additionalParams":true,"id":"chatOpenAI_0-input-stopSequence-string"},{"label":"BasePath","name":"basepath","type":"string","optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-basepath-string"},{"label":"Proxy Url","name":"proxyUrl","type":"string","optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-proxyUrl-string"},{"label":"BaseOptions","name":"baseOptions","type":"json","optional":true,"additionalParams":true,"id":"chatOpenAI_0-input-baseOptions-json"},{"label":"Allow Image Uploads","name":"allowImageUploads","type":"boolean","description":"Allow image input. Refer to the <a href=\"https://docs.flowiseai.com/using-flowise/uploads#image\" target=\"_blank\">docs</a> for more details.","default":false,"optional":true,"id":"chatOpenAI_0-input-allowImageUploads-boolean"},{"label":"Image Resolution","description":"This parameter controls the resolution in which the model views the image.","name":"imageResolution","type":"options","options":[{"label":"Low","name":"low"},{"label":"High","name":"high"},{"label":"Auto","name":"auto"}],"default":"low","optional":false,"additionalParams":true,"id":"chatOpenAI_0-input-imageResolution-options"},{"label":"Reasoning Effort","description":"Constrains effort on reasoning for reasoning models. Only applicable for o1 models","name":"reasoningEffort","type":"options","options":[{"label":"Low","name":"low"},{"label":"Medium","name":"medium"},{"label":"High","name":"high"}],"default":"low","optional":false,"additionalParams":true,"id":"chatOpenAI_0-input-reasoningEffort-options"}],"inputAnchors":[{"label":"Cache","name":"cache","type":"BaseCache","optional":true,"id":"chatOpenAI_0-input-cache-BaseCache"}],"inputs":{"cache":"","modelName":"gpt-4o","temperature":"0.3","streaming":true,"maxTokens":"","topP":"","frequencyPenalty":"","presencePenalty":"","timeout":"","strictToolCalling":false,"stopSequence":"","basepath":"","proxyUrl":"","baseOptions":"","allowImageUploads":"","imageResolution":"low","reasoningEffort":"low"},"outputAnchors":[{"id":"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable","name":"chatOpenAI","label":"ChatOpenAI","description":"Wrapper around OpenAI large language models that use the Chat endpoint","type":"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable"}],"outputs":{},"selected":false,"credential":"a0fffb09-1722-4f82-8532-e2bba4363b32"},"width":300,"height":664,"selected":true,"positionAbsolute":{"x":729.1121511503261,"y":-306.1494117737509},"dragging":false},{"id":"retrieverTool_0","position":{"x":917.4985188977295,"y":442.58903968272637},"type":"customNode","data":{"id":"retrieverTool_0","label":"Retriever Tool","version":3,"name":"retrieverTool","type":"RetrieverTool","baseClasses":["RetrieverTool","DynamicTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use a retriever as allowed tool for agent","inputParams":[{"label":"Retriever Name","name":"name","type":"string","placeholder":"search_state_of_union","id":"retrieverTool_0-input-name-string"},{"label":"Retriever Description","name":"description","type":"string","description":"When should agent uses to retrieve documents","rows":3,"placeholder":"Searches and returns documents regarding the state-of-the-union.","id":"retrieverTool_0-input-description-string"},{"label":"Return Source Documents","name":"returnSourceDocuments","type":"boolean","optional":true,"id":"retrieverTool_0-input-returnSourceDocuments-boolean"},{"label":"Additional Metadata Filter","name":"retrieverToolMetadataFilter","type":"json","description":"Add additional metadata filter on top of the existing filter from vector store","optional":true,"additionalParams":true,"hint":{"label":"What can you filter?","value":"Add additional filters to vector store. You can also filter with flow config, including the current \"state\":\n- `$flow.sessionId`\n- `$flow.chatId`\n- `$flow.chatflowId`\n- `$flow.input`\n- `$flow.state`\n"},"id":"retrieverTool_0-input-retrieverToolMetadataFilter-json"}],"inputAnchors":[{"label":"Retriever","name":"retriever","type":"BaseRetriever","id":"retrieverTool_0-input-retriever-BaseRetriever"}],"inputs":{"name":"search_ncm","description":"Procura dados relacionados a NCMS condizentes com a descrição, dados esses que devem ser passíveis de complementação para a descrição original, ou seja, devem ser relacionados: {question}","retriever":"{{documentStoreVS_0.data.instance}}","returnSourceDocuments":false,"retrieverToolMetadataFilter":""},"outputAnchors":[{"id":"retrieverTool_0-output-retrieverTool-RetrieverTool|DynamicTool|Tool|StructuredTool|Runnable","name":"retrieverTool","label":"RetrieverTool","description":"Use a retriever as allowed tool for agent","type":"RetrieverTool | DynamicTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":651,"selected":false,"positionAbsolute":{"x":917.4985188977295,"y":442.58903968272637},"dragging":false},{"id":"documentStoreVS_0","position":{"x":577.3035539799138,"y":783.6756448462369},"type":"customNode","data":{"id":"documentStoreVS_0","label":"Document Store (Vector)","version":1,"name":"documentStoreVS","type":"DocumentStoreVS","baseClasses":["DocumentStoreVS"],"category":"Vector Stores","description":"Search and retrieve documents from Document Store","inputParams":[{"label":"Select Store","name":"selectedStore","type":"asyncOptions","loadMethod":"listStores","id":"documentStoreVS_0-input-selectedStore-asyncOptions"}],"inputAnchors":[],"inputs":{"selectedStore":"a516ce8a-9d12-461c-b6a2-4c03d3121ecd"},"outputAnchors":[{"name":"output","label":"Output","type":"options","description":"","options":[{"id":"documentStoreVS_0-output-retriever-BaseRetriever","name":"retriever","label":"Retriever","description":"","type":"BaseRetriever"},{"id":"documentStoreVS_0-output-vectorStore-VectorStore","name":"vectorStore","label":"Vector Store","description":"","type":"VectorStore"}],"default":"retriever"}],"outputs":{"output":"retriever"},"selected":false},"width":300,"height":310,"selected":false,"positionAbsolute":{"x":577.3035539799138,"y":783.6756448462369},"dragging":false},{"id":"seqAgent_2","position":{"x":3620.355765780032,"y":-121.44282555504189},"type":"customNode","data":{"id":"seqAgent_2","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_2-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_2-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_2-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_2-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_2-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_2-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_2-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_2-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_2-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_2-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_2-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_2-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_2-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_2-input-model-BaseChatModel"}],"inputs":{"agentName":"Validator","systemMessagePrompt":"Você é um especialista em classificação fiscal de produtos baseado no NCM. Por meio da ferramenta, que terá como entrada apenas os *4 PRIMEIROS DÍGITOS* do resultado anterior. Envie os como \"ncmData\" para a ferramenta deixando apenas os dados numerais e valide o resultado retornado. Considere que os constituientes dos possíveis outros NCMs de 8 dígitos estarão inclusos nesse retorno e que todas as partes devem fazer sentido em relação as referências, escolhendo um novo resultado caso encontre um que corresponda melhor a descrição em questão de significado, especificação técnica e características. Priorize resultados de 8 dígitos numéricos. Caso não seja encontrado um valor melhor, retorne o mesmo resultado agente anterior.\nEscolha também entre os retornos da ferramenta outras possibilidades de classificação do produto sem acrescentar informações a mais do que são encontradas na descrição dos produtos vindos da propria ferramenta. \n\nExemplo de outras possibilidades (Traga as mais pertinentes, que tenham possibilidade de se enquadrar na mesma descrição e traga apenas suas descrições encontradas nas ferramentas, *NÃO* acrescente justificativas individuais para cada uma): \n\n**Outras possibilidades:**\n**- NCM - 1006.30.19** - Outros\n**- NCM - 10063011** - Polido ou Brunido\n...\n\nReferências: {descricao}\n\nResultado Anterior: {resultado}\n\nRetorne no template\n\nNCM: (número escolhido e descrição)\n\n\n\n","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_3.data.instance}}"],"sequentialNode":["{{seqAgent_4.data.instance}}","{{seqAgent_4.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"resultado\":\"{{seqAgent_4.data.instance}}\",\"descricao\":\"{{seqAgent_0.data.instance}}\",\"template\":\"{{plainText_0}}\",\"question\":\"{{question}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"3","selectedUpdateStateMemoryTab_seqAgent_2":"updateStateMemoryUI"},"outputAnchors":[{"id":"seqAgent_2-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":3620.355765780032,"y":-121.44282555504189},"dragging":false},{"id":"seqAgent_3","position":{"x":2647.1470148481676,"y":-116.99102035916945},"type":"customNode","data":{"id":"seqAgent_3","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_3-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_3-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_3-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_3-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_3-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_3-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_3-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_3-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_3-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_3-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_3-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_3-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_3-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_3-input-model-BaseChatModel"}],"inputs":{"agentName":"SubPosicao","systemMessagePrompt":"Utilize a ferramenta dando como entrada obrigatoriamente o código ncm escolhido presente no resultado anterior como  'ncmData', enviando apenas os digitos numerais(sem pontuações ou caracteres a mais), para comparar os ncm de 6 números que iniciam com o resultado anterior e escolher entre os retornos da ferramenta a que melhor se encaixa com a descrição do produto\n\nReferências: {descricao}\n-\nResultado Anterior: {resultadoAnterior}\n-\nConsiderando o resultado anterior e as referências defina a SUBPOSIÇÃO (quinto e sexto dígito do NCM) adequado para continuar classificando o produto descrito a partir dos códigos do retorno da ferramenta e passe ao próximo especialista. Caso não encontre, retorne o resultado númerico do agente anterior novamente e vá para o próximo agente.\n\n{template}","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_0.data.instance}}"],"sequentialNode":["{{seqAgent_5.data.instance}}","{{seqAgent_5.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"resultadoAnterior\":\"{{seqAgent_5.data.instance}}\",\"descricao\":\"{{seqAgent_0.data.instance}}\",\"template\":\"{{plainText_0}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"2","selectedUpdateStateMemoryTab_seqAgent_3":"updateStateMemoryUI"},"outputAnchors":[{"id":"seqAgent_3-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":2647.1470148481676,"y":-116.99102035916945},"dragging":false},{"id":"customTool_0","position":{"x":2725.7838240329597,"y":1096.261252171005},"type":"customNode","data":{"id":"customTool_0","label":"Custom Tool","version":3,"name":"customTool","type":"CustomTool","baseClasses":["CustomTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use custom tool you've created in Flowise within chatflow","inputParams":[{"label":"Select Tool","name":"selectedTool","type":"asyncOptions","loadMethod":"listTools","id":"customTool_0-input-selectedTool-asyncOptions"},{"label":"Return Direct","name":"returnDirect","description":"Return the output of the tool directly to the user","type":"boolean","optional":true,"id":"customTool_0-input-returnDirect-boolean"},{"label":"Custom Tool Name","name":"customToolName","type":"string","hidden":true,"id":"customTool_0-input-customToolName-string"},{"label":"Custom Tool Description","name":"customToolDesc","type":"string","hidden":true,"id":"customTool_0-input-customToolDesc-string"},{"label":"Custom Tool Schema","name":"customToolSchema","type":"string","hidden":true,"id":"customTool_0-input-customToolSchema-string"},{"label":"Custom Tool Func","name":"customToolFunc","type":"string","hidden":true,"id":"customTool_0-input-customToolFunc-string"}],"inputAnchors":[],"inputs":{"selectedTool":"084260b4-de6e-4852-9870-0cd26f2a56ed","returnDirect":"","customToolName":"","customToolDesc":"","customToolSchema":"","customToolFunc":""},"outputAnchors":[{"id":"customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable","name":"customTool","label":"CustomTool","description":"Use custom tool you've created in Flowise within chatflow","type":"CustomTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":369,"selected":false,"dragging":false,"positionAbsolute":{"x":2725.7838240329597,"y":1096.261252171005}},{"id":"customTool_4","position":{"x":3786.069866710949,"y":1097.9768692156013},"type":"customNode","data":{"id":"customTool_4","label":"Custom Tool","version":3,"name":"customTool","type":"CustomTool","baseClasses":["CustomTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use custom tool you've created in Flowise within chatflow","inputParams":[{"label":"Select Tool","name":"selectedTool","type":"asyncOptions","loadMethod":"listTools","id":"customTool_4-input-selectedTool-asyncOptions"},{"label":"Return Direct","name":"returnDirect","description":"Return the output of the tool directly to the user","type":"boolean","optional":true,"id":"customTool_4-input-returnDirect-boolean"},{"label":"Custom Tool Name","name":"customToolName","type":"string","hidden":true,"id":"customTool_4-input-customToolName-string"},{"label":"Custom Tool Description","name":"customToolDesc","type":"string","hidden":true,"id":"customTool_4-input-customToolDesc-string"},{"label":"Custom Tool Schema","name":"customToolSchema","type":"string","hidden":true,"id":"customTool_4-input-customToolSchema-string"},{"label":"Custom Tool Func","name":"customToolFunc","type":"string","hidden":true,"id":"customTool_4-input-customToolFunc-string"}],"inputAnchors":[],"inputs":{"selectedTool":"f4732649-52d8-405c-b8bd-4f2c196078da","returnDirect":"","customToolName":"","customToolDesc":"","customToolSchema":"","customToolFunc":""},"outputAnchors":[{"id":"customTool_4-output-customTool-CustomTool|Tool|StructuredTool|Runnable","name":"customTool","label":"CustomTool","description":"Use custom tool you've created in Flowise within chatflow","type":"CustomTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":369,"selected":false,"dragging":false,"positionAbsolute":{"x":3786.069866710949,"y":1097.9768692156013}},{"id":"seqAgent_6","position":{"x":3939.778184073423,"y":-122.96123796611175},"type":"customNode","data":{"id":"seqAgent_6","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_6-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_6-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_6-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_6-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_6-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_6-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_6-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_6-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_6-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_6-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_6-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_6-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_6-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_6-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_6-input-model-BaseChatModel"}],"inputs":{"agentName":"Descriptor","systemMessagePrompt":"Considerando o resultado anterior, passe como \"ncmData\" para a ferramenta o ncm encontrado(apenas os números, sem pontuações). Concatene o resultado da ferramenta antes da justificativa e sugestões da resposta anterior. Formatando de maneira estética o código-descrição obtidos. \n\nExemplo de descrição detalhada (Com o header sendo o NCM completo e como sublista cada uma de suas subseções explicadas, deve ser concatenado ao ínicio da resposta respeitando a pontuação): \n\n**Descrição detalhada:** \n**NCM - 1006.60.11**\n- **10** - Cereais\n- **1006** - Arroz\n- **1006.30** - Arroz semibranqueado ou branqueado, mesmo polido ou brunido (glaciado)\n- **1006.30.11** - Polido ou brunido\n...\n\nElabore em um parágrafo a justificativa técnica e fundamentada para o código NCM identificado. Ignore qualquer justificativa anterior e baseie sua explicação apenas nos dados técnicos encontrados nas referências, comparando-os com os detalhes retornados pela ferramenta de recuperação de NCM. Utilize pontos das definições normativas e estruturais para sustentar a classificação, destacando as características mais relevantes que justificam a escolha.\nSe houver diretrizes normativas aplicáveis, cite-as apenas se forem estritamente pertinentes ao contexto. Adote uma abordagem argumentativa que reconheça possíveis ambiguidades e variações na interpretação, enfatizando que a classificação depende diretamente da descrição fornecida pelo usuário e das informações disponíveis.\nUse um tom técnico, fundamentado e analítico, mas que também reconheça a possibilidade de interpretações alternativas conforme diferentes critérios de classificação. Evite afirmações categóricas absolutas e, quando apropriado, indique eventuais margens de dúvida ou fatores que poderiam levar a classificações diferentes em contextos específicos.\n\nTraga no final outras alternativas se presentes na resposta anterior, mesmo que o número encontrado seja satisfatório para a classificação, caso não hajam outras alternativas, ignore essa seção.\n\nResultado agente anterior: {resultado}\nReferências: {question}","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_4.data.instance}}"],"sequentialNode":["{{seqAgent_2.data.instance}}","{{seqAgent_2.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"resultado\":\"{{seqAgent_2.data.instance}}\",\"question\":\"{{question}}\",\"descricao\":\"{{seqAgent_0.data.instance}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"","selectedUpdateStateMemoryTab_seqAgent_6":"updateStateMemoryUI"},"outputAnchors":[{"id":"seqAgent_6-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":3939.778184073423,"y":-122.96123796611175},"dragging":false},{"id":"customTool_5","position":{"x":3061.899255929093,"y":1088.177823217415},"type":"customNode","data":{"id":"customTool_5","label":"Custom Tool","version":3,"name":"customTool","type":"CustomTool","baseClasses":["CustomTool","Tool","StructuredTool","Runnable"],"category":"Tools","description":"Use custom tool you've created in Flowise within chatflow","inputParams":[{"label":"Select Tool","name":"selectedTool","type":"asyncOptions","loadMethod":"listTools","id":"customTool_5-input-selectedTool-asyncOptions"},{"label":"Return Direct","name":"returnDirect","description":"Return the output of the tool directly to the user","type":"boolean","optional":true,"id":"customTool_5-input-returnDirect-boolean"},{"label":"Custom Tool Name","name":"customToolName","type":"string","hidden":true,"id":"customTool_5-input-customToolName-string"},{"label":"Custom Tool Description","name":"customToolDesc","type":"string","hidden":true,"id":"customTool_5-input-customToolDesc-string"},{"label":"Custom Tool Schema","name":"customToolSchema","type":"string","hidden":true,"id":"customTool_5-input-customToolSchema-string"},{"label":"Custom Tool Func","name":"customToolFunc","type":"string","hidden":true,"id":"customTool_5-input-customToolFunc-string"}],"inputAnchors":[],"inputs":{"selectedTool":"464eb509-d498-4776-9ada-c1e5a3a5fb02","returnDirect":"","customToolName":"","customToolDesc":"","customToolSchema":"","customToolFunc":""},"outputAnchors":[{"id":"customTool_5-output-customTool-CustomTool|Tool|StructuredTool|Runnable","name":"customTool","label":"CustomTool","description":"Use custom tool you've created in Flowise within chatflow","type":"CustomTool | Tool | StructuredTool | Runnable"}],"outputs":{},"selected":false},"width":300,"height":369,"selected":false,"positionAbsolute":{"x":3061.899255929093,"y":1088.177823217415},"dragging":false},{"id":"seqAgent_7","position":{"x":2975.3714419299345,"y":-116.74132716732731},"type":"customNode","data":{"id":"seqAgent_7","label":"Agent","version":4.1,"name":"seqAgent","type":"Agent","baseClasses":["Agent"],"category":"Sequential Agents","description":"Agent that can execute tools","inputParams":[{"label":"Agent Name","name":"agentName","type":"string","placeholder":"Agent","id":"seqAgent_7-input-agentName-string"},{"label":"System Prompt","name":"systemMessagePrompt","type":"string","rows":4,"optional":true,"default":"You are a research assistant who can search for up-to-date info using search engine.","id":"seqAgent_7-input-systemMessagePrompt-string"},{"label":"Prepend Messages History","name":"messageHistory","description":"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples","type":"code","hideCodeExecute":true,"codeExample":"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\n\nreturn [\n    new HumanMessage(\"What is 333382 🦜 1932?\"),\n    new AIMessage({\n        content: \"\",\n        tool_calls: [\n        {\n            id: \"12345\",\n            name: \"calulator\",\n            args: {\n                number1: 333382,\n                number2: 1932,\n                operation: \"divide\",\n            },\n        },\n        ],\n    }),\n    new ToolMessage({\n        tool_call_id: \"12345\",\n        content: \"The answer is 172.558.\",\n    }),\n    new AIMessage(\"The answer is 172.558.\"),\n]","optional":true,"additionalParams":true,"id":"seqAgent_7-input-messageHistory-code"},{"label":"Conversation History","name":"conversationHistorySelection","type":"options","options":[{"label":"User Question","name":"user_question","description":"Use the user question from the historical conversation messages as input."},{"label":"Last Conversation Message","name":"last_message","description":"Use the last conversation message from the historical conversation messages as input."},{"label":"All Conversation Messages","name":"all_messages","description":"Use all conversation messages from the historical conversation messages as input."},{"label":"Empty","name":"empty","description":"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History."}],"default":"all_messages","optional":true,"description":"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].","additionalParams":true,"id":"seqAgent_7-input-conversationHistorySelection-options"},{"label":"Human Prompt","name":"humanMessagePrompt","type":"string","description":"This prompt will be added at the end of the messages as human message","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_7-input-humanMessagePrompt-string"},{"label":"Require Approval","name":"interrupt","description":"Pause execution and request user approval before running tools.\nIf enabled, the agent will prompt the user with customizable approve/reject options\nand will proceed only after approval. This requires a configured agent memory to manage\nthe state and handle approval requests.\nIf no tools are invoked, the agent proceeds without interruption.","type":"boolean","optional":true,"id":"seqAgent_7-input-interrupt-boolean"},{"label":"Format Prompt Values","name":"promptValues","description":"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value","type":"json","optional":true,"acceptVariable":true,"list":true,"id":"seqAgent_7-input-promptValues-json"},{"label":"Approval Prompt","name":"approvalPrompt","description":"Prompt for approval. Only applicable if \"Require Approval\" is enabled","type":"string","default":"You are about to execute tool: {tools}. Ask if user want to proceed","rows":4,"optional":true,"additionalParams":true,"id":"seqAgent_7-input-approvalPrompt-string"},{"label":"Approve Button Text","name":"approveButtonText","description":"Text for approve button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"Yes","optional":true,"additionalParams":true,"id":"seqAgent_7-input-approveButtonText-string"},{"label":"Reject Button Text","name":"rejectButtonText","description":"Text for reject button. Only applicable if \"Require Approval\" is enabled","type":"string","default":"No","optional":true,"additionalParams":true,"id":"seqAgent_7-input-rejectButtonText-string"},{"label":"Update State","name":"updateStateMemory","type":"tabs","tabIdentifier":"selectedUpdateStateMemoryTab","additionalParams":true,"default":"updateStateMemoryUI","tabs":[{"label":"Update State (Table)","name":"updateStateMemoryUI","type":"datagrid","hint":{"label":"How to use","value":"\n1. Key and value pair to be updated. For example: if you have the following State:\n    | Key       | Operation     | Default Value     |\n    |-----------|---------------|-------------------|\n    | user      | Replace       |                   |\n\n    You can update the \"user\" value with the following:\n    | Key       | Value     |\n    |-----------|-----------|\n    | user      | john doe  |\n\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\n    | Key       | Value                                     |\n    |-----------|-------------------------------------------|\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\n\n3. You can get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values","datagrid":[{"field":"key","headerName":"Key","type":"asyncSingleSelect","loadMethod":"loadStateKeys","flex":0.5,"editable":true},{"field":"value","headerName":"Value","type":"freeSolo","valueOptions":[{"label":"Agent Output (string)","value":"$flow.output.content"},{"label":"Used Tools (array)","value":"$flow.output.usedTools"},{"label":"First Tool Output (string)","value":"$flow.output.usedTools[0].toolOutput"},{"label":"Source Documents (array)","value":"$flow.output.sourceDocuments"},{"label":"Global variable (string)","value":"$vars.<variable-name>"},{"label":"Input Question (string)","value":"$flow.input"},{"label":"Session Id (string)","value":"$flow.sessionId"},{"label":"Chat Id (string)","value":"$flow.chatId"},{"label":"Chatflow Id (string)","value":"$flow.chatflowId"}],"editable":true,"flex":1}],"optional":true,"additionalParams":true},{"label":"Update State (Code)","name":"updateStateMemoryCode","type":"code","hint":{"label":"How to use","value":"\n1. Return the key value JSON object. For example: if you have the following State:\n    ```json\n    {\n        \"user\": null\n    }\n    ```\n\n    You can update the \"user\" value by returning the following:\n    ```js\n    return {\n        \"user\": \"john doe\"\n    }\n    ```\n\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\n    ```json\n    {\n        \"content\": \"Hello! How can I assist you today?\",\n        \"usedTools\": [\n            {\n                \"tool\": \"tool-name\",\n                \"toolInput\": \"{foo: var}\",\n                \"toolOutput\": \"This is the tool's output\"\n            }\n        ],\n        \"sourceDocuments\": [\n            {\n                \"pageContent\": \"This is the page content\",\n                \"metadata\": \"{foo: var}\"\n            }\n        ]\n    }\n    ```\n\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\n    ```js\n    return {\n        \"user\": $flow.output.usedTools[0].toolOutput\n    }\n    ```\n\n3. You can also get default flow config, including the current \"state\":\n    - `$flow.sessionId`\n    - `$flow.chatId`\n    - `$flow.chatflowId`\n    - `$flow.input`\n    - `$flow.state`\n\n4. You can get custom variables: `$vars.<variable-name>`\n\n"},"description":"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state","hideCodeExecute":true,"codeExample":"const result = $flow.output;\n\n/* Suppose we have a custom State schema like this:\n* {\n    aggregate: {\n        value: (x, y) => x.concat(y),\n        default: () => []\n    }\n  }\n*/\n\nreturn {\n  aggregate: [result.content]\n};","optional":true,"additionalParams":true}],"id":"seqAgent_7-input-updateStateMemory-tabs"},{"label":"Max Iterations","name":"maxIterations","type":"number","optional":true,"additionalParams":true,"id":"seqAgent_7-input-maxIterations-number"}],"inputAnchors":[{"label":"Tools","name":"tools","type":"Tool","list":true,"optional":true,"id":"seqAgent_7-input-tools-Tool"},{"label":"Sequential Node","name":"sequentialNode","type":"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","description":"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow","list":true,"id":"seqAgent_7-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"label":"Chat Model","name":"model","type":"BaseChatModel","optional":true,"description":"Overwrite model to be used for this agent","id":"seqAgent_7-input-model-BaseChatModel"}],"inputs":{"agentName":"item","systemMessagePrompt":"Utilize a ferramenta dando como entrada obrigatoriamente o código ncm presente no resultado anterior como  'ncmData', enviando apenas os digitos numerais(sem pontuações ou caracteres a mais) para comparar os ncm de 7 números que iniciam com o resultado anterior e escolher entre os retornos da ferramenta a que melhor se encaixa com a descrição do produto.\n\nReferências: {descricao}\n\nResultado Anterior: {resultado}\n\nConsiderando o resultado anterior e as referências defina o item (sétimo dígito do NCM) adequado para continuar classificando o produto descrito a partir dos códigos do retorno da ferramenta e passe ao próximo especialista. Caso não encontre, retorne o resultado númerico do agente anterior novamente e vá para o próximo agente.\n\n{template}\n\n","messageHistory":"","conversationHistorySelection":"all_messages","humanMessagePrompt":"","tools":["{{customTool_5.data.instance}}"],"sequentialNode":["{{seqAgent_3.data.instance}}"],"model":"","interrupt":"","promptValues":"{\"resultado\":\"{{seqAgent_3.data.instance}}\",\"descricao\":\"{{seqAgent_0.data.instance}}\",\"template\":\"{{plainText_0}}\"}","approvalPrompt":"You are about to execute tool: {tools}. Ask if user want to proceed","approveButtonText":"Yes","rejectButtonText":"No","updateStateMemory":"updateStateMemoryUI","maxIterations":"","selectedUpdateStateMemoryTab_seqAgent_4":"updateStateMemoryUI"},"outputAnchors":[{"id":"seqAgent_7-output-seqAgent-Agent","name":"seqAgent","label":"Agent","description":"Agent that can execute tools","type":"Agent"}],"outputs":{},"selected":false},"width":300,"height":853,"selected":false,"positionAbsolute":{"x":2975.3714419299345,"y":-116.74132716732731},"dragging":false},{"id":"plainText_0","position":{"x":1509.691873733527,"y":1038.4462835693537},"type":"customNode","data":{"id":"plainText_0","label":"Plain Text","version":2,"name":"plainText","type":"Document","baseClasses":["Document"],"category":"Document Loaders","description":"Load data from plain text","inputParams":[{"label":"Text","name":"text","type":"string","rows":4,"placeholder":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua...","id":"plainText_0-input-text-string"},{"label":"Additional Metadata","name":"metadata","type":"json","description":"Additional metadata to be added to the extracted documents","optional":true,"additionalParams":true,"id":"plainText_0-input-metadata-json"},{"label":"Omit Metadata Keys","name":"omitMetadataKeys","type":"string","rows":4,"description":"Each document loader comes with a default set of metadata keys that are extracted from the document. You can use this field to omit some of the default metadata keys. The value should be a list of keys, seperated by comma. Use * to omit all metadata keys execept the ones you specify in the Additional Metadata field","placeholder":"key1, key2, key3.nestedKey1","optional":true,"additionalParams":true,"id":"plainText_0-input-omitMetadataKeys-string"}],"inputAnchors":[{"label":"Text Splitter","name":"textSplitter","type":"TextSplitter","optional":true,"id":"plainText_0-input-textSplitter-TextSplitter"}],"inputs":{"text":"Retorne no template\n\nNCM: (número escolhido e descrição)\n","textSplitter":"","metadata":"","omitMetadataKeys":""},"outputAnchors":[{"name":"output","label":"Output","type":"options","description":"Array of document objects containing metadata and pageContent","options":[{"id":"plainText_0-output-document-Document|json","name":"document","label":"Document","description":"Array of document objects containing metadata and pageContent","type":"Document | json"},{"id":"plainText_0-output-text-string|json","name":"text","label":"Text","description":"Concatenated string from pageContent of documents","type":"string | json"}],"default":"document"}],"outputs":{"output":"document"},"selected":false},"width":300,"height":484,"selected":false,"dragging":false,"positionAbsolute":{"x":1509.691873733527,"y":1038.4462835693537}}],"edges":[{"source":"customTool_1","sourceHandle":"customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_1","targetHandle":"seqAgent_1-input-tools-Tool","type":"buttonedge","id":"customTool_1-customTool_1-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_1-seqAgent_1-input-tools-Tool"},{"source":"customTool_3","sourceHandle":"customTool_3-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_4","targetHandle":"seqAgent_4-input-tools-Tool","type":"buttonedge","id":"customTool_3-customTool_3-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_4-seqAgent_4-input-tools-Tool"},{"source":"customTool_2","sourceHandle":"customTool_2-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_5","targetHandle":"seqAgent_5-input-tools-Tool","type":"buttonedge","id":"customTool_2-customTool_2-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_5-seqAgent_5-input-tools-Tool"},{"source":"chatOpenAI_0","sourceHandle":"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable","target":"seqStart_0","targetHandle":"seqStart_0-input-model-BaseChatModel","type":"buttonedge","id":"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqStart_0-seqStart_0-input-model-BaseChatModel"},{"source":"retrieverTool_0","sourceHandle":"retrieverTool_0-output-retrieverTool-RetrieverTool|DynamicTool|Tool|StructuredTool|Runnable","target":"seqAgent_0","targetHandle":"seqAgent_0-input-tools-Tool","type":"buttonedge","id":"retrieverTool_0-retrieverTool_0-output-retrieverTool-RetrieverTool|DynamicTool|Tool|StructuredTool|Runnable-seqAgent_0-seqAgent_0-input-tools-Tool"},{"source":"documentStoreVS_0","sourceHandle":"documentStoreVS_0-output-retriever-BaseRetriever","target":"retrieverTool_0","targetHandle":"retrieverTool_0-input-retriever-BaseRetriever","type":"buttonedge","id":"documentStoreVS_0-documentStoreVS_0-output-retriever-BaseRetriever-retrieverTool_0-retrieverTool_0-input-retriever-BaseRetriever"},{"source":"customTool_3","sourceHandle":"customTool_3-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_2","targetHandle":"seqAgent_2-input-tools-Tool","type":"buttonedge","id":"customTool_3-customTool_3-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_2-seqAgent_2-input-tools-Tool"},{"source":"customTool_0","sourceHandle":"customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_3","targetHandle":"seqAgent_3-input-tools-Tool","type":"buttonedge","id":"customTool_0-customTool_0-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_3-seqAgent_3-input-tools-Tool","selected":false},{"source":"customTool_4","sourceHandle":"customTool_4-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_6","targetHandle":"seqAgent_6-input-tools-Tool","type":"buttonedge","id":"customTool_4-customTool_4-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_6-seqAgent_6-input-tools-Tool"},{"source":"seqStart_0","sourceHandle":"seqStart_0-output-seqStart-Start","target":"seqAgent_0","targetHandle":"seqAgent_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqStart_0-seqStart_0-output-seqStart-Start-seqAgent_0-seqAgent_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_0","sourceHandle":"seqAgent_0-output-seqAgent-Agent","target":"seqAgent_1","targetHandle":"seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_0-seqAgent_0-output-seqAgent-Agent-seqAgent_1-seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_1","sourceHandle":"seqAgent_1-output-seqAgent-Agent","target":"seqAgent_5","targetHandle":"seqAgent_5-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_1-seqAgent_1-output-seqAgent-Agent-seqAgent_5-seqAgent_5-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_5","sourceHandle":"seqAgent_5-output-seqAgent-Agent","target":"seqAgent_3","targetHandle":"seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_5-seqAgent_5-output-seqAgent-Agent-seqAgent_3-seqAgent_3-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_4","sourceHandle":"seqAgent_4-output-seqAgent-Agent","target":"seqAgent_2","targetHandle":"seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_4-seqAgent_4-output-seqAgent-Agent-seqAgent_2-seqAgent_2-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_2","sourceHandle":"seqAgent_2-output-seqAgent-Agent","target":"seqAgent_6","targetHandle":"seqAgent_6-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_2-seqAgent_2-output-seqAgent-Agent-seqAgent_6-seqAgent_6-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_6","sourceHandle":"seqAgent_6-output-seqAgent-Agent","target":"seqEnd_0","targetHandle":"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_6-seqAgent_6-output-seqAgent-Agent-seqEnd_0-seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_3","sourceHandle":"seqAgent_3-output-seqAgent-Agent","target":"seqAgent_7","targetHandle":"seqAgent_7-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_3-seqAgent_3-output-seqAgent-Agent-seqAgent_7-seqAgent_7-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"seqAgent_7","sourceHandle":"seqAgent_7-output-seqAgent-Agent","target":"seqAgent_4","targetHandle":"seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow","type":"buttonedge","id":"seqAgent_7-seqAgent_7-output-seqAgent-Agent-seqAgent_4-seqAgent_4-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow"},{"source":"customTool_5","sourceHandle":"customTool_5-output-customTool-CustomTool|Tool|StructuredTool|Runnable","target":"seqAgent_7","targetHandle":"seqAgent_7-input-tools-Tool","type":"buttonedge","id":"customTool_5-customTool_5-output-customTool-CustomTool|Tool|StructuredTool|Runnable-seqAgent_7-seqAgent_7-input-tools-Tool"},{"source":"plainText_0","sourceHandle":"plainText_0-output-document-Document|json","target":"seqAgent_1","targetHandle":"seqAgent_1-input-promptValues-json","type":"buttonedge","id":"plainText_0-plainText_0-output-document-Document|json-seqAgent_1-seqAgent_1-input-promptValues-json"},{"source":"plainText_0","sourceHandle":"plainText_0-output-document-Document|json","target":"seqAgent_5","targetHandle":"seqAgent_5-input-promptValues-json","type":"buttonedge","id":"plainText_0-plainText_0-output-document-Document|json-seqAgent_5-seqAgent_5-input-promptValues-json"},{"source":"plainText_0","sourceHandle":"plainText_0-output-document-Document|json","target":"seqAgent_3","targetHandle":"seqAgent_3-input-promptValues-json","type":"buttonedge","id":"plainText_0-plainText_0-output-document-Document|json-seqAgent_3-seqAgent_3-input-promptValues-json"},{"source":"plainText_0","sourceHandle":"plainText_0-output-document-Document|json","target":"seqAgent_7","targetHandle":"seqAgent_7-input-promptValues-json","type":"buttonedge","id":"plainText_0-plainText_0-output-document-Document|json-seqAgent_7-seqAgent_7-input-promptValues-json"},{"source":"plainText_0","sourceHandle":"plainText_0-output-document-Document|json","target":"seqAgent_4","targetHandle":"seqAgent_4-input-promptValues-json","type":"buttonedge","id":"plainText_0-plainText_0-output-document-Document|json-seqAgent_4-seqAgent_4-input-promptValues-json"}],"viewport":{"x":-104.86600193431889,"y":167.36212621646956,"zoom":0.28880757298049875}}