{
  "analytic": "{\"langSmith\":{\"credentialId\":\"9fb56a6f-2c15-486c-9125-6fd27091d002\",\"projectName\":\"INTERSEAS - Analise Critica\",\"status\":true}}",
  "apiConfig": null,
  "apikeyid": null,
  "category": "Prod",
  "chatbotConfig": null,
  "createdDate": "2025-01-03T17:37:52.252Z",
  "deployed": false,
  "flowData": "{\"nodes\":[{\"id\":\"seqStart_0\",\"position\":{\"x\":639.6953703174133,\"y\":421.2631948813396},\"type\":\"customNode\",\"data\":{\"label\":\"Start\",\"name\":\"seqStart\",\"version\":2,\"type\":\"Start\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/start.svg\",\"category\":\"Sequential Agents\",\"description\":\"Starting point of the conversation\",\"baseClasses\":[\"Start\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-1.-start-node\",\"inputs\":{\"model\":\"{{chatOpenAI_0.data.instance}}\",\"agentMemory\":\"\",\"state\":\"\",\"inputModeration\":\"\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Start/Start.js\",\"inputAnchors\":[{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"description\":\"Only compatible with models that are capable of function calling: ChatOpenAI, ChatMistral, ChatAnthropic, ChatGoogleGenerativeAI, ChatVertexAI, GroqChat\",\"id\":\"seqStart_0-input-model-BaseChatModel\"},{\"label\":\"Agent Memory\",\"name\":\"agentMemory\",\"type\":\"BaseCheckpointSaver\",\"description\":\"Save the state of the agent\",\"optional\":true,\"id\":\"seqStart_0-input-agentMemory-BaseCheckpointSaver\"},{\"label\":\"State\",\"name\":\"state\",\"type\":\"State\",\"description\":\"State is an object that is updated by nodes in the graph, passing from one node to another. By default, state contains \\\"messages\\\" that got updated with each message sent and received.\",\"optional\":true,\"id\":\"seqStart_0-input-state-State\"},{\"label\":\"Input Moderation\",\"description\":\"Detect text that could generate harmful output and prevent it from being sent to the language model\",\"name\":\"inputModeration\",\"type\":\"Moderation\",\"optional\":true,\"list\":true,\"id\":\"seqStart_0-input-inputModeration-Moderation\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqStart_0-output-seqStart-Start\",\"name\":\"seqStart\",\"label\":\"Start\",\"description\":\"Starting point of the conversation\",\"type\":\"Start\"}],\"id\":\"seqStart_0\",\"selected\":false},\"width\":300,\"height\":383,\"positionAbsolute\":{\"x\":639.6953703174133,\"y\":421.2631948813396},\"selected\":false,\"dragging\":false},{\"id\":\"chatOpenAI_0\",\"position\":{\"x\":230.88364176409078,\"y\":217.1995946462976},\"type\":\"customNode\",\"data\":{\"loadMethods\":{},\"label\":\"ChatOpenAI\",\"name\":\"chatOpenAI\",\"version\":8.1,\"type\":\"ChatOpenAI\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/openai.svg\",\"category\":\"Chat Models\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"baseClasses\":[\"ChatOpenAI\",\"BaseChatModel\",\"BaseLanguageModel\",\"Runnable\"],\"credential\":\"a0fffb09-1722-4f82-8532-e2bba4363b32\",\"inputs\":{\"cache\":\"\",\"modelName\":\"gpt-4o-mini\",\"temperature\":\"0\",\"streaming\":true,\"maxTokens\":\"\",\"topP\":\"\",\"frequencyPenalty\":\"\",\"presencePenalty\":\"\",\"timeout\":\"\",\"strictToolCalling\":\"\",\"stopSequence\":\"\",\"basepath\":\"\",\"proxyUrl\":\"\",\"baseOptions\":\"\",\"allowImageUploads\":\"\",\"imageResolution\":\"low\",\"reasoningEffort\":\"low\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/chatmodels/ChatOpenAI/ChatOpenAI.js\",\"inputAnchors\":[{\"label\":\"Cache\",\"name\":\"cache\",\"type\":\"BaseCache\",\"optional\":true,\"id\":\"chatOpenAI_0-input-cache-BaseCache\"}],\"inputParams\":[{\"label\":\"Connect Credential\",\"name\":\"credential\",\"type\":\"credential\",\"credentialNames\":[\"openAIApi\"],\"id\":\"chatOpenAI_0-input-credential-credential\"},{\"label\":\"Model Name\",\"name\":\"modelName\",\"type\":\"asyncOptions\",\"loadMethod\":\"listModels\",\"default\":\"gpt-4o-mini\",\"id\":\"chatOpenAI_0-input-modelName-asyncOptions\"},{\"label\":\"Temperature\",\"name\":\"temperature\",\"type\":\"number\",\"step\":0.1,\"default\":0.9,\"optional\":true,\"id\":\"chatOpenAI_0-input-temperature-number\"},{\"label\":\"Streaming\",\"name\":\"streaming\",\"type\":\"boolean\",\"default\":true,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-streaming-boolean\"},{\"label\":\"Max Tokens\",\"name\":\"maxTokens\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-maxTokens-number\"},{\"label\":\"Top Probability\",\"name\":\"topP\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-topP-number\"},{\"label\":\"Frequency Penalty\",\"name\":\"frequencyPenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-frequencyPenalty-number\"},{\"label\":\"Presence Penalty\",\"name\":\"presencePenalty\",\"type\":\"number\",\"step\":0.1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-presencePenalty-number\"},{\"label\":\"Timeout\",\"name\":\"timeout\",\"type\":\"number\",\"step\":1,\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-timeout-number\"},{\"label\":\"Strict Tool Calling\",\"name\":\"strictToolCalling\",\"type\":\"boolean\",\"description\":\"Whether the model supports the `strict` argument when passing in tools. If not specified, the `strict` argument will not be passed to OpenAI.\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-strictToolCalling-boolean\"},{\"label\":\"Stop Sequence\",\"name\":\"stopSequence\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"description\":\"List of stop words to use when generating. Use comma to separate multiple stop words.\",\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-stopSequence-string\"},{\"label\":\"BasePath\",\"name\":\"basepath\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-basepath-string\"},{\"label\":\"Proxy Url\",\"name\":\"proxyUrl\",\"type\":\"string\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-proxyUrl-string\"},{\"label\":\"BaseOptions\",\"name\":\"baseOptions\",\"type\":\"json\",\"optional\":true,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-baseOptions-json\"},{\"label\":\"Allow Image Uploads\",\"name\":\"allowImageUploads\",\"type\":\"boolean\",\"description\":\"Allow image input. Refer to the <a href=\\\"https://docs.flowiseai.com/using-flowise/uploads#image\\\" target=\\\"_blank\\\">docs</a> for more details.\",\"default\":false,\"optional\":true,\"id\":\"chatOpenAI_0-input-allowImageUploads-boolean\"},{\"label\":\"Image Resolution\",\"description\":\"This parameter controls the resolution in which the model views the image.\",\"name\":\"imageResolution\",\"type\":\"options\",\"options\":[{\"label\":\"Low\",\"name\":\"low\"},{\"label\":\"High\",\"name\":\"high\"},{\"label\":\"Auto\",\"name\":\"auto\"}],\"default\":\"low\",\"optional\":false,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-imageResolution-options\"},{\"label\":\"Reasoning Effort\",\"description\":\"Constrains effort on reasoning for reasoning models. Only applicable for o1 models\",\"name\":\"reasoningEffort\",\"type\":\"options\",\"options\":[{\"label\":\"Low\",\"name\":\"low\"},{\"label\":\"Medium\",\"name\":\"medium\"},{\"label\":\"High\",\"name\":\"high\"}],\"default\":\"low\",\"optional\":false,\"additionalParams\":true,\"id\":\"chatOpenAI_0-input-reasoningEffort-options\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"name\":\"chatOpenAI\",\"label\":\"ChatOpenAI\",\"description\":\"Wrapper around OpenAI large language models that use the Chat endpoint\",\"type\":\"ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable\"}],\"id\":\"chatOpenAI_0\",\"selected\":false},\"width\":300,\"height\":670,\"selected\":false,\"positionAbsolute\":{\"x\":230.88364176409078,\"y\":217.1995946462976},\"dragging\":false},{\"id\":\"seqEnd_0\",\"position\":{\"x\":1893.0236861132948,\"y\":1321.4631765909448},\"type\":\"customNode\",\"data\":{\"label\":\"End\",\"name\":\"seqEnd\",\"version\":2.1,\"type\":\"End\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/end.svg\",\"category\":\"Sequential Agents\",\"description\":\"End conversation\",\"baseClasses\":[\"End\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-10.-end-node\",\"inputs\":{\"sequentialNode\":\"{{seqAgent_1.data.instance}}\"},\"hideOutput\":true,\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/End/End.js\",\"inputAnchors\":[{\"label\":\"Sequential Node\",\"name\":\"sequentialNode\",\"type\":\"Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\",\"description\":\"Can be connected to one of the following nodes: Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow\",\"id\":\"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\"}],\"inputParams\":[],\"outputs\":{},\"outputAnchors\":[],\"id\":\"seqEnd_0\",\"selected\":false},\"width\":300,\"height\":143,\"selected\":false,\"positionAbsolute\":{\"x\":1893.0236861132948,\"y\":1321.4631765909448},\"dragging\":false},{\"id\":\"seqAgent_0\",\"position\":{\"x\":1165.442301811141,\"y\":583.4621807642645},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4.1,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"BuscarAliquota\",\"systemMessagePrompt\":\"\\t•\\t{question}\\n\\t•\\tNCM:\\n\\t•\\tEstado_Importador:\\n\\t•\\tchave:\\n\\t•\\tAliquota:\\nSua tarefa é:\\n\\nInstruções importantes:\\n\\t1.\\tIdentificar a alíquota específica de ICMS com base no NCM fornecido e no Estado Importador, seguindo as etapas abaixo:\\n\\t•\\tConsultar pela NCM completa: Verifique se há correspondência direta para a alíquota específica.\\n\\t•\\tCaso ainda não encontre correspondência:\\n\\t•\\tAnalise a descrição da NCM e procure por descrições similares ou que possam se enquadrar na classificação.\\n\\t2.\\tSe encontrar uma alíquota específica:\\n\\t•\\tInforme o valor encontrado e explique brevemente o motivo da aplicação.\\nSempre envie os resultados encontrados de forma direta, com uma breve explicacao sobre o que e aquele ncm, se nao encontrar nao invente, so fale que voce nao encontrou aliquota especifica\\n\\n!!IMPORTANTE!!! - Se for encontrado valor para a aliquota especifica, utilize esse exemplo, subistituindo os campos  x%, descricao do produto e estado_importado:\\n\\nIdentificada alíquota específica de \\\"X%\\\" para \\\"descriçao do produto\\\", verifique a\\naplicação para a mercadoria em questão. Caso não se aplique a alíquota específica, aplica-se a alíquota geral do estado de \\\"Estado_Importador\\\"\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqStart_0.data.instance}}\",\"{{seqStart_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"question\\\":\\\"{{question}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_0\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_0-input-tools-Tool\"},{\"label\":\"Sequential Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\",\"description\":\"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow\",\"list\":true,\"id\":\"seqAgent_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_0-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_0-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_0-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_0-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_0-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_0-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_0-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_0-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_0-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_0-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_0-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_0-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_0-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_0-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_0\",\"selected\":false},\"width\":300,\"height\":860,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":1165.442301811141,\"y\":583.4621807642645}},{\"id\":\"seqAgent_1\",\"position\":{\"x\":1544.4575497776048,\"y\":580.2709879988296},\"type\":\"customNode\",\"data\":{\"label\":\"Agent\",\"name\":\"seqAgent\",\"version\":4.1,\"type\":\"Agent\",\"icon\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/seqAgent.png\",\"category\":\"Sequential Agents\",\"description\":\"Agent that can execute tools\",\"baseClasses\":[\"Agent\"],\"documentation\":\"https://docs.flowiseai.com/using-flowise/agentflows/sequential-agents#id-4.-agent-node\",\"inputs\":{\"agentName\":\"VerificaEspecificaOuGeral\",\"systemMessagePrompt\":\"Você receberá os seguintes dados:\\n{question}\\n\\t•\\tNCM:\\n\\t•\\tEstado_Importador:\\n\\t•\\tchave:\\n\\t•\\tResultado do Agente BuscarAliquota (se aplicável): “Alíquota específica não encontrada”: {agente}\\n\\nSua tarefa:\\n\\t1.\\tSe o Agente BuscarAliquota encontrar uma alíquota específica:\\n\\t•\\tRetorne:\\n\\t•\\tO NCM informado.\\n\\t•\\tO valor da alíquota específica aplicável.\\n\\t•\\tUma descrição breve justificando a aplicação (ex.: “A alíquota específica foi identificada com base na legislação tributária estadual para este NCM, devido à sua classificação como [breve descrição do produto, se aplicável]”).\\n\\t•\\tNão forneça informações adicionais desnecessárias.\\n\\t2.\\tSe o Agente BuscarAliquota não encontrar uma alíquota específica:\\n\\t•\\tRetorne:\\n\\t•\\tO NCM informado.\\n\\t•\\tA mensagem: “Não foi encontrada uma alíquota específica para o NCM informado.”\\n\\t•\\tAs alíquotas gerais disponíveis para o Estado Importador, detalhando os casos aplicáveis.\\n\\t•\\tPara Santa Catarina (SC), inclua:\\n\\t•\\t17%: Produtos destinados a uso e consumo, ativo imobilizado, ou operações para não contribuintes do ICMS.\\n\\t•\\t12%: Para demais operações, incluindo produtos destinados à industrialização ou revenda.\\n    3. Se mercadoria for máquina/equipamento, enviar o alerta padrão: \\n        \\\"Se não houver máquina/equipamento similar produzido no Estado, verificar no RICMS se há benefício fiscal para importação.\\\"\\nSe a terceira chave, conter chave: BK,  adicionar retorno esperado ao final da resposta. Só utilize se for enviado BK dentro da chave:\\n\\\"NCM assinalada como BK na TEC, se não houver máquina/equipamento similar produzido no Estado, verificar no RICMS se há benefício fiscal para importação.\\\"\\n\\n!!IMPORTANTE!!! -  Se for encontrado valor para a aliquota especifica, retornar exatamente este texto, porem subistituindo os campos  x%, descricao do produto e estado_importado:\\n\\n\\\"Identificada alíquota específica de `X%` para `descriçao do produto`, verifique a\\naplicação para a mercadoria em questão. Caso não se aplique a alíquota específica, aplica-se a alíquota geral do estado de `Estado_Importador`\\\"\\n\\nImportante:\\n\\t•\\tSeja direto, técnico e profissional.\\n\\t•\\tSempre mencione ambas as alíquotas gerais aplicáveis para SC, se a alíquota específica não for encontrada.\\n\\t•\\tNão inclua explicações extensas ou comentários redundantes.\\n\",\"messageHistory\":\"\",\"conversationHistorySelection\":\"all_messages\",\"humanMessagePrompt\":\"\",\"tools\":\"\",\"sequentialNode\":[\"{{seqAgent_0.data.instance}}\",\"{{seqAgent_0.data.instance}}\"],\"model\":\"\",\"interrupt\":\"\",\"promptValues\":\"{\\\"agente\\\":\\\"{{seqAgent_0.data.instance}}\\\",\\\"question\\\":\\\"{{question}}\\\"}\",\"approvalPrompt\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"approveButtonText\":\"Yes\",\"rejectButtonText\":\"No\",\"updateStateMemory\":\"updateStateMemoryUI\",\"maxIterations\":\"\",\"selectedUpdateStateMemoryTab_seqAgent_1\":\"updateStateMemoryUI\"},\"filePath\":\"/usr/local/lib/node_modules/flowise/node_modules/flowise-components/dist/nodes/sequentialagents/Agent/Agent.js\",\"inputAnchors\":[{\"label\":\"Tools\",\"name\":\"tools\",\"type\":\"Tool\",\"list\":true,\"optional\":true,\"id\":\"seqAgent_1-input-tools-Tool\"},{\"label\":\"Sequential Node\",\"name\":\"sequentialNode\",\"type\":\"Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\",\"description\":\"Can be connected to one of the following nodes: Start, Agent, Condition, LLM Node, Tool Node, Custom Function, Execute Flow\",\"list\":true,\"id\":\"seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\"},{\"label\":\"Chat Model\",\"name\":\"model\",\"type\":\"BaseChatModel\",\"optional\":true,\"description\":\"Overwrite model to be used for this agent\",\"id\":\"seqAgent_1-input-model-BaseChatModel\"}],\"inputParams\":[{\"label\":\"Agent Name\",\"name\":\"agentName\",\"type\":\"string\",\"placeholder\":\"Agent\",\"id\":\"seqAgent_1-input-agentName-string\"},{\"label\":\"System Prompt\",\"name\":\"systemMessagePrompt\",\"type\":\"string\",\"rows\":4,\"optional\":true,\"default\":\"You are a research assistant who can search for up-to-date info using search engine.\",\"id\":\"seqAgent_1-input-systemMessagePrompt-string\"},{\"label\":\"Prepend Messages History\",\"name\":\"messageHistory\",\"description\":\"Prepend a list of messages between System Prompt and Human Prompt. This is useful when you want to provide few shot examples\",\"type\":\"code\",\"hideCodeExecute\":true,\"codeExample\":\"const { AIMessage, HumanMessage, ToolMessage } = require('@langchain/core/messages');\\n\\nreturn [\\n    new HumanMessage(\\\"What is 333382 🦜 1932?\\\"),\\n    new AIMessage({\\n        content: \\\"\\\",\\n        tool_calls: [\\n        {\\n            id: \\\"12345\\\",\\n            name: \\\"calulator\\\",\\n            args: {\\n                number1: 333382,\\n                number2: 1932,\\n                operation: \\\"divide\\\",\\n            },\\n        },\\n        ],\\n    }),\\n    new ToolMessage({\\n        tool_call_id: \\\"12345\\\",\\n        content: \\\"The answer is 172.558.\\\",\\n    }),\\n    new AIMessage(\\\"The answer is 172.558.\\\"),\\n]\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-messageHistory-code\"},{\"label\":\"Conversation History\",\"name\":\"conversationHistorySelection\",\"type\":\"options\",\"options\":[{\"label\":\"User Question\",\"name\":\"user_question\",\"description\":\"Use the user question from the historical conversation messages as input.\"},{\"label\":\"Last Conversation Message\",\"name\":\"last_message\",\"description\":\"Use the last conversation message from the historical conversation messages as input.\"},{\"label\":\"All Conversation Messages\",\"name\":\"all_messages\",\"description\":\"Use all conversation messages from the historical conversation messages as input.\"},{\"label\":\"Empty\",\"name\":\"empty\",\"description\":\"Do not use any messages from the conversation history. Ensure to use either System Prompt, Human Prompt, or Messages History.\"}],\"default\":\"all_messages\",\"optional\":true,\"description\":\"Select which messages from the conversation history to include in the prompt. The selected messages will be inserted between the System Prompt (if defined) and [Messages History, Human Prompt].\",\"additionalParams\":true,\"id\":\"seqAgent_1-input-conversationHistorySelection-options\"},{\"label\":\"Human Prompt\",\"name\":\"humanMessagePrompt\",\"type\":\"string\",\"description\":\"This prompt will be added at the end of the messages as human message\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-humanMessagePrompt-string\"},{\"label\":\"Require Approval\",\"name\":\"interrupt\",\"description\":\"Pause execution and request user approval before running tools.\\nIf enabled, the agent will prompt the user with customizable approve/reject options\\nand will proceed only after approval. This requires a configured agent memory to manage\\nthe state and handle approval requests.\\nIf no tools are invoked, the agent proceeds without interruption.\",\"type\":\"boolean\",\"optional\":true,\"id\":\"seqAgent_1-input-interrupt-boolean\"},{\"label\":\"Format Prompt Values\",\"name\":\"promptValues\",\"description\":\"Assign values to the prompt variables. You can also use $flow.state.<variable-name> to get the state value\",\"type\":\"json\",\"optional\":true,\"acceptVariable\":true,\"list\":true,\"id\":\"seqAgent_1-input-promptValues-json\"},{\"label\":\"Approval Prompt\",\"name\":\"approvalPrompt\",\"description\":\"Prompt for approval. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"You are about to execute tool: {tools}. Ask if user want to proceed\",\"rows\":4,\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-approvalPrompt-string\"},{\"label\":\"Approve Button Text\",\"name\":\"approveButtonText\",\"description\":\"Text for approve button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"Yes\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-approveButtonText-string\"},{\"label\":\"Reject Button Text\",\"name\":\"rejectButtonText\",\"description\":\"Text for reject button. Only applicable if \\\"Require Approval\\\" is enabled\",\"type\":\"string\",\"default\":\"No\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-rejectButtonText-string\"},{\"label\":\"Update State\",\"name\":\"updateStateMemory\",\"type\":\"tabs\",\"tabIdentifier\":\"selectedUpdateStateMemoryTab\",\"additionalParams\":true,\"default\":\"updateStateMemoryUI\",\"tabs\":[{\"label\":\"Update State (Table)\",\"name\":\"updateStateMemoryUI\",\"type\":\"datagrid\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Key and value pair to be updated. For example: if you have the following State:\\n    | Key       | Operation     | Default Value     |\\n    |-----------|---------------|-------------------|\\n    | user      | Replace       |                   |\\n\\n    You can update the \\\"user\\\" value with the following:\\n    | Key       | Value     |\\n    |-----------|-----------|\\n    | user      | john doe  |\\n\\n2. If you want to use the Agent's output as the value to update state, it is available as available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can do the following:\\n    | Key       | Value                                     |\\n    |-----------|-------------------------------------------|\\n    | user      | `$flow.output.usedTools[0].toolOutput`  |\\n\\n3. You can get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values\",\"datagrid\":[{\"field\":\"key\",\"headerName\":\"Key\",\"type\":\"asyncSingleSelect\",\"loadMethod\":\"loadStateKeys\",\"flex\":0.5,\"editable\":true},{\"field\":\"value\",\"headerName\":\"Value\",\"type\":\"freeSolo\",\"valueOptions\":[{\"label\":\"Agent Output (string)\",\"value\":\"$flow.output.content\"},{\"label\":\"Used Tools (array)\",\"value\":\"$flow.output.usedTools\"},{\"label\":\"First Tool Output (string)\",\"value\":\"$flow.output.usedTools[0].toolOutput\"},{\"label\":\"Source Documents (array)\",\"value\":\"$flow.output.sourceDocuments\"},{\"label\":\"Global variable (string)\",\"value\":\"$vars.<variable-name>\"},{\"label\":\"Input Question (string)\",\"value\":\"$flow.input\"},{\"label\":\"Session Id (string)\",\"value\":\"$flow.sessionId\"},{\"label\":\"Chat Id (string)\",\"value\":\"$flow.chatId\"},{\"label\":\"Chatflow Id (string)\",\"value\":\"$flow.chatflowId\"}],\"editable\":true,\"flex\":1}],\"optional\":true,\"additionalParams\":true},{\"label\":\"Update State (Code)\",\"name\":\"updateStateMemoryCode\",\"type\":\"code\",\"hint\":{\"label\":\"How to use\",\"value\":\"\\n1. Return the key value JSON object. For example: if you have the following State:\\n    ```json\\n    {\\n        \\\"user\\\": null\\n    }\\n    ```\\n\\n    You can update the \\\"user\\\" value by returning the following:\\n    ```js\\n    return {\\n        \\\"user\\\": \\\"john doe\\\"\\n    }\\n    ```\\n\\n2. If you want to use the agent's output as the value to update state, it is available as `$flow.output` with the following structure:\\n    ```json\\n    {\\n        \\\"content\\\": \\\"Hello! How can I assist you today?\\\",\\n        \\\"usedTools\\\": [\\n            {\\n                \\\"tool\\\": \\\"tool-name\\\",\\n                \\\"toolInput\\\": \\\"{foo: var}\\\",\\n                \\\"toolOutput\\\": \\\"This is the tool's output\\\"\\n            }\\n        ],\\n        \\\"sourceDocuments\\\": [\\n            {\\n                \\\"pageContent\\\": \\\"This is the page content\\\",\\n                \\\"metadata\\\": \\\"{foo: var}\\\"\\n            }\\n        ]\\n    }\\n    ```\\n\\n    For example, if the `toolOutput` is the value you want to update the state with, you can return the following:\\n    ```js\\n    return {\\n        \\\"user\\\": $flow.output.usedTools[0].toolOutput\\n    }\\n    ```\\n\\n3. You can also get default flow config, including the current \\\"state\\\":\\n    - `$flow.sessionId`\\n    - `$flow.chatId`\\n    - `$flow.chatflowId`\\n    - `$flow.input`\\n    - `$flow.state`\\n\\n4. You can get custom variables: `$vars.<variable-name>`\\n\\n\"},\"description\":\"This is only applicable when you have a custom State at the START node. After agent execution, you might want to update the State values. Must return an object representing the state\",\"hideCodeExecute\":true,\"codeExample\":\"const result = $flow.output;\\n\\n/* Suppose we have a custom State schema like this:\\n* {\\n    aggregate: {\\n        value: (x, y) => x.concat(y),\\n        default: () => []\\n    }\\n  }\\n*/\\n\\nreturn {\\n  aggregate: [result.content]\\n};\",\"optional\":true,\"additionalParams\":true}],\"id\":\"seqAgent_1-input-updateStateMemory-tabs\"},{\"label\":\"Max Iterations\",\"name\":\"maxIterations\",\"type\":\"number\",\"optional\":true,\"additionalParams\":true,\"id\":\"seqAgent_1-input-maxIterations-number\"}],\"outputs\":{},\"outputAnchors\":[{\"id\":\"seqAgent_1-output-seqAgent-Agent\",\"name\":\"seqAgent\",\"label\":\"Agent\",\"description\":\"Agent that can execute tools\",\"type\":\"Agent\"}],\"id\":\"seqAgent_1\",\"selected\":false},\"width\":300,\"height\":860,\"selected\":false,\"dragging\":false,\"positionAbsolute\":{\"x\":1544.4575497776048,\"y\":580.2709879988296}}],\"edges\":[{\"source\":\"chatOpenAI_0\",\"sourceHandle\":\"chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable\",\"target\":\"seqStart_0\",\"targetHandle\":\"seqStart_0-input-model-BaseChatModel\",\"type\":\"buttonedge\",\"id\":\"chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-seqStart_0-seqStart_0-input-model-BaseChatModel\"},{\"source\":\"seqStart_0\",\"sourceHandle\":\"seqStart_0-output-seqStart-Start\",\"target\":\"seqAgent_0\",\"targetHandle\":\"seqAgent_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\",\"type\":\"buttonedge\",\"id\":\"seqStart_0-seqStart_0-output-seqStart-Start-seqAgent_0-seqAgent_0-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\"},{\"source\":\"seqAgent_0\",\"sourceHandle\":\"seqAgent_0-output-seqAgent-Agent\",\"target\":\"seqAgent_1\",\"targetHandle\":\"seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\",\"type\":\"buttonedge\",\"id\":\"seqAgent_0-seqAgent_0-output-seqAgent-Agent-seqAgent_1-seqAgent_1-input-sequentialNode-Start | Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\"},{\"source\":\"seqAgent_1\",\"sourceHandle\":\"seqAgent_1-output-seqAgent-Agent\",\"target\":\"seqEnd_0\",\"targetHandle\":\"seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\",\"type\":\"buttonedge\",\"id\":\"seqAgent_1-seqAgent_1-output-seqAgent-Agent-seqEnd_0-seqEnd_0-input-sequentialNode-Agent | Condition | LLMNode | ToolNode | CustomFunction | ExecuteFlow\"}],\"viewport\":{\"x\":238.2992684789549,\"y\":-92.20282729679468,\"zoom\":0.59548541581665}}",
  "followUpPrompts": null,
  "id": "448e7ee2-963f-4b16-8a1f-64449476d0b6",
  "isPublic": false,
  "name": "Analise critica - [ 6 - ICMS IMPORTAÇÃO ]",
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "flowise-workflows/",
  "speechToText": null,
  "type": "MULTIAGENT",
  "updatedDate": "2025-02-26T13:34:49.052Z"
}