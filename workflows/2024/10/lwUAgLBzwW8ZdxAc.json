{
  "active": true,
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatMessage2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "structureMessage": {
      "main": [
        [
          {
            "node": "formatMessage2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "no data": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If data": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set output": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "structureMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "If data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Filter2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Filter2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "structureMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Set output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-08T19:03:23.524Z",
  "id": "lwUAgLBzwW8ZdxAc",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[prod] - Análise crítica | 1 - Tratamento Administrativo",
  "nodes": [
    {
      "parameters": {
        "url": "https://www.gov.br/siscomex/pt-br/informacoes/tratamento-administrativos/tratamento-administrativo-na-importacao/ta_lpco_att_imp.xlsx",
        "options": {}
      },
      "id": "6f900e73-e140-4fe8-868d-31a582be7186",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -620,
        240
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "headerRow": true,
          "includeEmptyCells": true,
          "sheetName": "03"
        }
      },
      "id": "4dfc3a0b-c69c-4d2d-a827-4a93b37f9e5c",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -460,
        240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1d042684-e288-47e4-8362-7867fbcccfe4",
              "name": "=NCM",
              "value": "={{ $('structureMessage').item.json.NCM }}",
              "type": "string"
            },
            {
              "id": "009162b6-503f-4e2a-bf76-a489575b1d4f",
              "name": "peso_bruto_estimado",
              "value": "={{ $('structureMessage').item.json['Peso bruto estimado'] }}",
              "type": "string"
            },
            {
              "id": "45840199-ce95-4dab-95e7-2fe6ed0ccb92",
              "name": "M3 estimada/quantidade de volumes e dimensões",
              "value": "={{ $('structureMessage').item.json['M3 estimada/quantidade de volumes e dimensões'] }}",
              "type": "string"
            },
            {
              "id": "173088ac-d7d2-4913-956c-aa72ed035438",
              "name": "pais_origem_fabricacao",
              "value": "={{ $('structureMessage').item.json['País de origem/fabricação'] }}",
              "type": "string"
            },
            {
              "id": "f3389d5d-accb-47bd-bc2e-dd79a4ecfba8",
              "name": "pais_embarque",
              "value": "={{ $('structureMessage').item.json['País de embarque'] }}",
              "type": "string"
            },
            {
              "id": "b72a6b03-82f1-4d9a-926b-e3ab3629c91f",
              "name": "estado_importador",
              "value": "={{ $('structureMessage').item.json['Estado do Importador'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e481171c-a272-471d-8e76-b928c63ca2fe",
      "name": "formatMessage2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -780,
        240
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const parsedJson = JSON.parse($json.body);\n\nreturn parsedJson"
      },
      "id": "a0c31fe5-c171-48d6-989e-b8a535777e95",
      "name": "structureMessage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -940,
        240
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3a4f620c-24a7-445a-be32-b6a1da18278f",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1500,
        260
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "00ed4fa4-c4b4-4442-8e3b-b69ec3479c09",
              "name": "output",
              "value": "=NCM não foi encontrado na base de dados",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "eb803a51-bf93-454d-945f-4d80863d301f",
      "name": "no data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        740,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "id": "d27eedb8-0904-4c10-a495-6cc4d33981a9",
              "leftValue": "={{ $('Edit Fields').all() }}",
              "rightValue": "={{ $('formatMessage2').item.json.NCM.replace(/\\./g, '').toString() }}",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "80f9ad20-8e88-4c25-8d88-0927a8ca18b0",
      "name": "If data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        40,
        240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "258931eb-ff93-4264-a7b6-2dbcd9c85cc4",
              "name": "output",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "fe834e6d-3a5a-4d51-83ac-a28109059935",
      "name": "Set output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1500,
        -200
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "criticalAnalysisFirstStep",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "115fd797-7639-4b03-aec3-d5e0be11482a",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1120,
        240
      ],
      "webhookId": "df4ab0d2-80b7-41a2-93d1-d7e7babb473d"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cf6cc42d-9fa2-49dc-b109-f994884e9602",
              "leftValue": "={{ $json['Código do campo'] }}",
              "rightValue": "={{ $('structureMessage').item.json.NCM }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -300,
        240
      ],
      "id": "a230da10-6c6e-4eb8-b339-cfd44eb0ab3c",
      "name": "Filter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a512db98-5ee6-424b-a595-00a2471dd069",
              "name": "TA",
              "value": "={{ $json['Número do TA'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -140,
        240
      ],
      "id": "5aef3f7f-c20a-4047-8cb3-91e1d1ff25bd",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const text_list = $('Extract from File').all();\nconst num_tas = $('Edit Fields').all();\nconst taCodes = num_tas.map(item => item.json.TA);\nconst valores = text_list.filter(item => taCodes.includes(item.json[\"Número do TA\"]));\nreturn valores;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        -220
      ],
      "id": "241a58c1-327a-4694-a81c-d878ada0a8a6",
      "name": "Code",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0fdda85a-ade5-42c9-b45e-e2589f0db498",
              "leftValue": "={{ $json['Tipo de impedimento'] }}",
              "rightValue": "Requer LI",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "24824283-e063-4df5-9c09-d7ec2d8b0c41",
              "leftValue": "={{ $json['Tipo de campo'] }}",
              "rightValue": "Exceção",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        500,
        40
      ],
      "id": "051e4cb8-ceef-44c9-bcb3-696aef6e63fe",
      "name": "Filter1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "86ea40fa-a480-4569-a5a8-3bc13ca3a93c",
              "leftValue": "={{ $json['Tipo de impedimento'] }}",
              "rightValue": "Importação proibida",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "e15f7e23-aef0-44ba-8d36-db4ce3a43c7c",
              "leftValue": "={{ $json['Tipo de campo'] }}",
              "rightValue": "Determinante",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        500,
        -200
      ],
      "id": "b5b3fbb1-e187-4726-b01b-7c639607ea6c",
      "name": "Filter2"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        840,
        -200
      ],
      "id": "0a974a3a-a00e-4f99-8272-13d473886b63",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0472b214-3158-4300-95d4-1bf219abc923",
              "leftValue": "={{ $json['Tipo de impedimento'] }}",
              "rightValue": "Importação proibida",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "3cbc61c2-2430-4dfa-8ef1-2b1ae34c2a26",
              "leftValue": "={{ $json['Tipo de campo'] }}",
              "rightValue": "Exceção",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "8f646f0e-59e5-4f27-927b-42045d753633",
              "leftValue": "={{ $json['Nome do campo'] }}",
              "rightValue": "NCM",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "54cb0e44-16aa-49a9-ac7c-d2d541c76aa2",
              "leftValue": "={{ $json['Código do campo'] }}",
              "rightValue": "={{ $('formatMessage2').item.json.NCM }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        500,
        -480
      ],
      "id": "044d51b6-85b8-4925-8ebf-457f64970a37",
      "name": "Filter3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1120,
        20
      ],
      "id": "38c5b39d-1b6b-4370-8899-e03384ccf276",
      "name": "When clicking ‘Test workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://flowise.interseas-caprover.startse.com/api/v1/prediction/8f83896a-16af-4ebd-959f-ad16784663fd",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "question",
              "value": "={{$('Code2').all().first().json }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6e0ff05b-0787-4469-9e23-2764ae6d993b",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        -200
      ]
    },
    {
      "parameters": {
        "jsCode": "function agruparPorOrgaoAnuente(dados) {\n  return dados.reduce((acc, item) => {\n    const orgao = item['Órgão anuente'];\n    if (!acc[orgao]) {\n      acc[orgao] = [];\n    }\n    acc[orgao].push(item);\n    return acc;\n  }, {});\n}\n\nfunction extrairJson(arr) {\n  return arr.map(item => item.json);\n}\n\n\nconst ta = extrairJson($('Merge').all());\nreturn agruparPorOrgaoAnuente(ta);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1000,
        -200
      ],
      "id": "9ade5a81-75fa-499d-bae2-d92fd6d24736",
      "name": "Code1",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "const orgaosAnuentes = $('Code1').first().json;\n\nfunction formataExcecoes(data) {\n  const grupos = {};\n  const outputArray = [];\n\n  data.forEach(item => {\n    const chaveGrupo = `${item['Número do TA']}-${item['Tipo de TA']}-${item['Tipo de impedimento']}`;\n\n    if (!grupos[chaveGrupo]) {\n      grupos[chaveGrupo] = {\n        taNumber: item['Número do TA'],\n        tipoTA: item['Tipo de TA'],\n        impedimento: item['Tipo de impedimento'],\n        destaques: [],\n        excecoes: []\n      };\n    }\n\n    if (item['Tipo de campo'] === \"Determinante\") {\n      grupos[chaveGrupo].destaques.push(\n        `${item['Nome do atributo']}: ${item['Valor do atributo']} - ${item['Descrição do valor do atributo']}`\n      );\n    } else if (item['Tipo de campo'] === 'Exceção') {\n      grupos[chaveGrupo].excecoes.push(\n        `${item['Código do campo']} - ${item['Descrição do campo']}`\n      );\n    }\n  });\n\n  Object.values(grupos).forEach(({ taNumber, tipoTA, impedimento, destaques, excecoes }) => {\n    destaques.forEach(destaque => {\n      outputArray.push(\n        `${destaque} - ${tipoTA} – ${impedimento} (Impede registro de DUIMP) (TA: ${taNumber}, Exceções: ${excecoes.join('; ')})`\n      );\n    });\n  });\n\n  return outputArray;\n}\n\nfunction filtrarGerais(items){ \n  return items.filter(item => {\n    return item['Tipo de impedimento'] === '';\n});\n}\n\nfunction filtrarProibidos(items){ \n  return items.filter(item => {\n    return item['Tipo de impedimento'] === 'Importação proibida';\n});\n}\n\nfunction filtrarLi(items){ \n  return items.filter(item => {\n    return item['Tipo de impedimento'] === 'Requer LI';\n});\n}\n\nfunction formataDados(array) {\n  return array.map(obj => {\n    return `${obj[\"Nome do modelo LPCO\"] || \"\"} - ${obj[\"Nome do atributo\"] || \"\"} - ${obj[\"Valor do atributo\"] || \"\"} - ${obj[\"Descrição do valor do atributo\"] || \"\"} - ${obj[\"Tipo de TA\"] || \"\"} - ${obj[\"Tipo de impedimento\"] || \"\"} (TA: ${obj[\"Número do TA\"] || \"\"} , Codigo do modelo: ${obj[\"Código do modelo\"] || \"\"})`;\n  });\n}\n\nfunction formataProibidos(array) {\n  return array.map(obj => {\n    return `${obj[\"Nome do modelo LPCO\"] || \"\"} - ${obj[\"Nome do atributo\"] || \"\"} - ${obj[\"Valor do atributo\"] || \"\"} - ${obj[\"Descrição do valor do atributo\"] || \"\"} - ${obj[\"Tipo de TA\"] || \"\"} - ${obj[\"Tipo de impedimento\"] || \"\"} (TA: ${obj[\"Número do TA\"] || \"\"} , ${obj[\"Nome do campo\"] || \"\"}: ${obj[\"Descrição do campo\"] || \"\"})`;\n  });\n}\n\n\nfunction processaOrgaosAnuentes(data) {\n  return Object.entries(data).reduce((acc, [label, items]) => {\n    acc[label] = { tas: formataDados(filtrarGerais(items)), excecoes:formataExcecoes(filtrarLi(items)), proibidos: formataProibidos(filtrarProibidos(items)) };\n    return acc;\n  }, {});\n}\n\n\nreturn processaOrgaosAnuentes(orgaosAnuentes);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1160,
        -200
      ],
      "id": "e3bbe4e0-65d1-4bfa-b1ec-8bfe7d83c354",
      "name": "Code2"
    }
  ],
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {
          "headers": {
            "host": "interseas-n8n.paas.startse.com",
            "x-real-ip": "20.36.128.75",
            "x-forwarded-for": "20.36.128.75",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "316",
            "content-type": "application/json",
            "accept": "*/*",
            "user-agent": "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)",
            "accept-encoding": "gzip,deflate"
          },
          "params": {},
          "query": {},
          "body": "{\"HS Code\":null,\"NCM\":\"27071000\",\"INCOTERM\":\"FOB\",\"Local do INCOTERM\":\"Porto de Santos\",\"Peso bruto estimado\":\"15.345,000\",\"M3 estimada/quantidade de volumes e dimensões\":\"25,000\",\"País de origem/fabricação\":\"Brasil\",\"País de embarque\":\"Alemanha\",\"Estado do Importador\":\"SC\"}",
          "webhookUrl": "https://interseas-n8n.paas.startse.com/webhook/criticalAnalysisFirstStep",
          "executionMode": "production"
        }
      }
    ]
  },
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-16T15:50:17.549Z",
      "updatedAt": "2024-12-16T15:50:17.549Z",
      "id": "90BsZzaKRkurBY1q",
      "name": "Prod"
    },
    {
      "createdAt": "2025-02-05T19:24:04.517Z",
      "updatedAt": "2025-02-05T19:24:04.517Z",
      "id": "QjzCPV3nhLBek2xR",
      "name": "Análise Crítica"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-02-13T19:52:36.943Z",
  "versionId": "0512032a-7e6c-4991-8695-b0135ec832c4"
}