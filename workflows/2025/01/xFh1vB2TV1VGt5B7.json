{
  "active": true,
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Check JWT Expiration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check JWT Expiration": {
      "main": [
        [
          {
            "node": "If token still valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If token still valid": {
      "main": [
        [
          {
            "node": "Responde - Token v치lido",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Responde - Token inv치lido",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-10T13:14:04.307Z",
  "id": "xFh1vB2TV1VGt5B7",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[prod] - Login | Validate",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "auth/v2/validate",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "bffea63c-00d5-4ec6-a9f8-028ee7d5cd80",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        560,
        320
      ],
      "webhookId": "1b586978-5b7a-4214-8c08-9b15d21d752e"
    },
    {
      "parameters": {
        "jsCode": "function isTokenExpired(token) {\n  const parts = token.split('.');\n\n  if (parts.length !== 3) {\n    throw new Error('Invalid JWT Token');\n  }\n\n  const payload = parts[1];\n  const decodedPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n\n  if (!decodedPayload.exp) {\n    throw new Error('No expiration field (exp) in token');\n  }\n\n  const expirationTimeMilliseconds = decodedPayload.exp * 1000;\n  const currentTimeMilliseconds = Date.now();\n\n  return currentTimeMilliseconds > expirationTimeMilliseconds;\n}\n\nconst jwtToken = $('Webhook').first().json.body.token;\n\nlet isTokenValid = false\n\ntry {\n  if (isTokenExpired(jwtToken)) {\n    isTokenValid = false;\n  } else {\n    isTokenValid = true;\n  }\n} catch (error) {\n  isTokenValid = false;\n}\n\nreturn [ {isTokenValid}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        320
      ],
      "id": "a8f28584-7279-4927-b08c-e808f9d3fb5b",
      "name": "Check JWT Expiration"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "03e65bd0-4f32-4f62-911a-6366266e579e",
              "leftValue": "={{ $json.isTokenValid }}",
              "rightValue": "=nvr8qbw9NYW-cdc3fcd",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "85f59ee5-917f-4fc8-9609-6b0bd564c10a",
      "name": "If token still valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1220,
        320
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"isValid\": true, \"token\": \"{{ $('Webhook').item.json.body.token }}\" }",
        "options": {}
      },
      "id": "0499a828-f1ea-433b-a27a-7b3f28929e64",
      "name": "Responde - Token v치lido",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1520,
        260
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{ \"isValid\": false }",
        "options": {}
      },
      "id": "02e68c35-9ed6-4fa0-8fcc-67d680302374",
      "name": "Responde - Token inv치lido",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1520,
        420
      ]
    }
  ],
  "pinData": {},
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-10-29T13:40:47.488Z",
      "updatedAt": "2024-10-29T13:40:47.488Z",
      "id": "FViUlsSlXzSMnZ07",
      "name": "SUPABASE"
    },
    {
      "createdAt": "2024-12-16T15:50:17.549Z",
      "updatedAt": "2024-12-16T15:50:17.549Z",
      "id": "90BsZzaKRkurBY1q",
      "name": "Prod"
    },
    {
      "createdAt": "2025-02-04T12:57:49.230Z",
      "updatedAt": "2025-02-04T12:57:49.230Z",
      "id": "wtZEmNqNNLEIK7tp",
      "name": "SUPABASE - Manual"
    },
    {
      "createdAt": "2025-02-05T19:28:59.435Z",
      "updatedAt": "2025-02-05T19:28:59.435Z",
      "id": "EMcRUzq8shICg8uK",
      "name": "Auth/Login"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-02-05T19:29:19.069Z",
  "versionId": "3ebeea60-9e0c-4fd2-98c4-86939cd19f22"
}