{
  "active": true,
  "connections": {
    "Lista NCMs": {
      "main": [
        [
          {
            "node": "fixAndParseJSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fixAndParseJSON": {
      "main": [
        [
          {
            "node": "expandJSONResponseFlowise",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "downloadSpreadsheetGecex": {
      "main": [
        [
          {
            "node": "extractDataFromFileGecex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extractDataFromFileGecex": {
      "main": [
        [
          {
            "node": "ifNcmHasBK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mergeResponseRegexAndFlowise": {
      "main": [
        [
          {
            "node": "If ncm gov",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ICMS/NoBlock": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ifNcmHasBK": {
      "main": [
        [
          {
            "node": "formatMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatMessage": {
      "main": [
        [
          {
            "node": "POST.ICMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET.GOV": {
      "main": [
        [
          {
            "node": "regexCleaner",
            "type": "main",
            "index": 0
          },
          {
            "node": "Lista NCMs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "regexCleaner": {
      "main": [
        [
          {
            "node": "expandJSONResultRegex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ICMS/block": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If ncm gov": {
      "main": [
        [
          {
            "node": "ICMS/block",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ICMS/NoBlock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "structureMessage": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ICMS": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "expandJSONResponseFlowise": {
      "main": [
        [
          {
            "node": "mergeResponseRegexAndFlowise",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "expandJSONResultRegex": {
      "main": [
        [
          {
            "node": "mergeResponseRegexAndFlowise",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "downloadSpreadsheetGecex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "structureMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "checkStateIsSC": {
      "main": [
        [
          {
            "node": "GET.GOV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ICMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "POST.ICMS": {
      "main": [
        [
          {
            "node": "checkStateIsSC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-10T14:07:57.646Z",
  "id": "i3W0KIouLZRyZO1S",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "[prod] - Análise crítica | 6 - ICMS Importação",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://flowise.interseas-caprover.startse.com/api/v1/prediction/8cc34b7b-bfcf-4bcb-a1ef-a5fa0304f898",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "question",
              "value": "={{ $('GET.GOV').item.json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "65e47915-fb1b-4b4b-9c64-663ed3ad3d44",
      "name": "Lista NCMs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1940,
        20
      ]
    },
    {
      "parameters": {
        "jsCode": "const inputData = JSON.parse($('Lista NCMs').first().json.text);\n\nconst uniqueResult = [...new Set(inputData.NCM.map(item => item.replace(/\\./g, '').trim()))];\n\nreturn { json: { NCM: uniqueResult } };\n"
      },
      "id": "62d4e860-b353-4af4-8cd5-0c22c5075325",
      "name": "fixAndParseJSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        20
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1120b9aa-0934-4256-a84f-cd21bb2ee4e2",
              "name": "output",
              "value": "={{ $('POST.ICMS').item.json.text }}\n\nLista Negativa ICMS/SC: Não.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "2d5e49d8-ecec-43b0-8b2f-3c24edcbff0f",
      "name": "ICMS/NoBlock",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2860,
        280
      ]
    },
    {
      "parameters": {
        "url": "https://www.gov.br/mdic/pt-br/assuntos/camex/estrategia-comercial/arquivos-listas/25-09-2024-anexos-i-a-ix-resolucao-gecex-272-21.xlsx",
        "options": {}
      },
      "id": "303570b2-ef90-423c-9224-0a080c7a94e6",
      "name": "downloadSpreadsheetGecex",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        600,
        460
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {
          "headerRow": true,
          "includeEmptyCells": true,
          "range": "2",
          "sheetName": "Anexo II - Diferentes da TEC"
        }
      },
      "id": "b86546fc-c795-475a-91d6-2c091b63d115",
      "name": "extractDataFromFileGecex",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        800,
        460
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "NCM",
        "joinMode": "keepEverything",
        "options": {}
      },
      "id": "2f7db5e9-3065-4385-b148-ee19a66638c7",
      "name": "mergeResponseRegexAndFlowise",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2500,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "36e3f1c1-2abb-4dc7-b6b7-40568f6facdf",
              "leftValue": "={{ $json.NCM.replaceAll(\".\", \"\") }}",
              "rightValue": "={{ $('structureMessage').item.json.NCM }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "df6a6dc3-eb8f-45bb-b6d5-e12ccbf6b774",
              "leftValue": "={{ $json['BIT/BK'] }}",
              "rightValue": "BK",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c833cb2e-42fa-41c5-bb36-85698e2c61a3",
      "name": "ifNcmHasBK",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1000,
        460
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1d042684-e288-47e4-8362-7867fbcccfe4",
              "name": "=NCM",
              "value": "={{ $('structureMessage').item.json.NCM }}",
              "type": "string"
            },
            {
              "id": "009162b6-503f-4e2a-bf76-a489575b1d4f",
              "name": "peso_bruto_estimado",
              "value": "={{ $('structureMessage').item.json.Peso_bruto_estimado }}",
              "type": "string"
            },
            {
              "id": "45840199-ce95-4dab-95e7-2fe6ed0ccb92",
              "name": "M3 estimada/quantidade de volumes e dimensões",
              "value": "={{ $('structureMessage').item.json.M3_estimada_quantidade_volumes_dimensoes }}",
              "type": "string"
            },
            {
              "id": "173088ac-d7d2-4913-956c-aa72ed035438",
              "name": "pais_origem_fabricacao",
              "value": "={{ $('structureMessage').item.json.País_origem_fabricação }}",
              "type": "string"
            },
            {
              "id": "f3389d5d-accb-47bd-bc2e-dd79a4ecfba8",
              "name": "pais_embarque",
              "value": "={{ $('structureMessage').item.json.País_embarque }}",
              "type": "string"
            },
            {
              "id": "b72a6b03-82f1-4d9a-926b-e3ab3629c91f",
              "name": "estado_importador",
              "value": "={{ $('structureMessage').item.json.estado_importador }}",
              "type": "string"
            },
            {
              "id": "f47a6f1b-fdf3-4a1a-8f89-24be67349c29",
              "name": "valor_bk",
              "value": "={{ $json['BIT/BK'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3d1f97ef-b15d-4ce6-9c6d-1f28892d0028",
      "name": "formatMessage",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1180,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://legislacao.sef.sc.gov.br/html/decretos/2009/dec_09_2128.htm",
        "options": {}
      },
      "id": "79c0a928-3629-45ff-b5b2-3b2397b51b51",
      "name": "GET.GOV",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1740,
        160
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const inputData = $json.data;\n\nconst removeHtmlTags = (html) => {\n  return html.replace(/<[^>]*>/g, ''); \n};\n\nconst cleanedData = removeHtmlTags(inputData);\n\nconst regex = /\\bNCM\\s+(\\d{2,4}(?:\\.\\d{1,2}){0,3})\\b|\\b(\\d{2,4}(?:\\.\\d{1,2}){0,3})\\b(?=\\s+da\\s+NCM)/gi;\n\nconst result = cleanedData.match(regex) || [];\n\nconst uniqueResult = [...new Set(\n  result.map(item =>\n    item\n      .replace(/NCM\\s+/i, '')\n      .replace(/\\s+da\\s+NCM/i, '')\n      .replace(/\\./g, '')\n  )\n)];\n\nreturn { json: { NCM: uniqueResult } };\n"
      },
      "id": "64bd605f-59d7-4308-bea4-9b1c5b8406d4",
      "name": "regexCleaner",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1940,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6823415c-df67-4133-a8f6-c4c2ab94c122",
              "name": "output",
              "value": "={{ $('POST.ICMS').item.json.text }}\n\n\nATENÇÃO: NCM {{ $('formatMessage').item.json.NCM }} consta na lista de mercadorias vedadas para utilização de tratamentos tributários diferenciados (TTD) no estado de SC. É sempre recomendável consultar a legislação vigente ou a Secretaria da Fazenda de Santa Catarina para obter a lista completa e atualizada dos produtos vedados para o Tratamento Tributário Diferenciado. Além disso, pode haver exceções ou condições específicas para determinados setores ou atividades econômicas, que também devem ser verificadas junto às autoridades fiscais do estado.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5c22598e-69e7-4db1-8761-d9cd0677ac9f",
      "name": "ICMS/block",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2860,
        40
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "id": "35dd640e-482f-4067-a29d-f8c1f5b61317",
              "leftValue": "={{ $('formatMessage').item.json.NCM.replaceAll(\".\", \"\") }}",
              "rightValue": "={{ $json.NCM }}",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "id": "713c6acb-2840-4f22-9228-76069489fc6c",
      "name": "If ncm gov",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        2680,
        160
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const stringJson = JSON.parse($json.body);\n\nconst regex = /estado/i;\n\nfor (const key in stringJson) {\n  if (regex.test(key)) {\n    stringJson['estado_importador'] = stringJson[key];\n  }\n}\n\nreturn stringJson;"
      },
      "id": "fbc89705-5e46-4bd7-bbdd-570dab28aa12",
      "name": "structureMessage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        460
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1120b9aa-0934-4256-a84f-cd21bb2ee4e2",
              "name": "output",
              "value": "={{ $('POST.ICMS123').item.json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e39d3637-04c6-4f49-b058-5f643363de07",
      "name": "ICMS",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1740,
        460
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "=NCM",
        "options": {}
      },
      "id": "5416d8e9-0ff0-4134-a2ea-5c234733d620",
      "name": "expandJSONResponseFlowise",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2300,
        20
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "=NCM",
        "options": {}
      },
      "id": "db4979ac-469e-48fa-88d3-86f1edd917d3",
      "name": "expandJSONResultRegex",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2300,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://jscontadores.com.br/tabelas-e-orientacoes/aliquotas-icms-regiao-sul/#SANTA%20CATARINA",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -260,
        460
      ],
      "id": "a77a9c38-c45c-4fe4-8927-50373eb58e52",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const htmlContent = $input.item.json.data; // Entrada do HTML\n\n// Função para limpar o texto das tags HTML e formatação\nconst cleanText = (text) => {\n    return text\n        .replace(/<[^>]*>/g, '') // Remove tags HTML\n        .replace(/\\s+/g, ' ') // Remove espaços extras\n        .replace(/&#8211;/g, '-') // Converte código HTML para hífen\n        .replace(/align=\"center\"/g, '') // Remove alinhamento\n        .trim(); // Remove espaços no início e fim\n};\n\n// Função para extrair as linhas da tabela\nconst extractRows = (tableHtml) => {\n    const rows = tableHtml.match(/<tr[^>]*>[\\s\\S]*?<\\/tr>/g) || [];\n    const data = [];\n    \n    // Processa cada linha\n    for (let i = 1; i < rows.length; i++) { // Começa do 1 para pular o cabeçalho\n        const cells = rows[i].match(/<td[^>]*>[\\s\\S]*?<\\/td>/g) || [];\n        \n        if (cells.length >= 3) { // Verifica se tem todas as células necessárias\n            const aliquota = cleanText(cells[0]);\n            const ncm = cleanText(cells[1]);\n            const descricao = cleanText(cells[2]);\n            \n            // Só adiciona se tiver conteúdo válido\n            if (aliquota || ncm || descricao) {\n                data.push({\n                    aliquota: aliquota.replace('%', '').trim(),\n                    ncm: ncm,\n                    descricao: descricao\n                });\n            }\n        }\n    }\n    \n    return data;\n};\n\n// Função para capturar o conteúdo da tabela associada a um tópico específico\nconst extractTableByTopic = (html, topic) => {\n    // Encontrar o marcador do tópico (SANTA CATARINA)\n    const topicRegex = new RegExp(`<p><a name=[\"']${topic}[\"']>.*?</p>`, 'i');\n    const topicMatch = html.match(topicRegex);\n    \n    if (!topicMatch) {\n        return null; // Retorna null se o tópico não for encontrado\n    }\n    \n    const topicIndex = html.indexOf(topicMatch[0]);\n    \n    // Encontra a primeira tabela após o tópico\n    const tableStartIndex = html.indexOf('<table', topicIndex);\n    if (tableStartIndex === -1) {\n        return null; // Retorna null se não encontrar tabela\n    }\n    \n    // Encontra o fim da tabela atual\n    const tableEndIndex = html.indexOf('</table>', tableStartIndex) + 8;\n    if (tableEndIndex === -1) {\n        return null; // Retorna null se não encontrar o fim da tabela\n    }\n    \n    // Procura o próximo tópico\n    const nextTopicMatch = html.slice(tableEndIndex).match(/<p><a name=[\"'][^\"']+[\"']>/i);\n    const nextTopicIndex = nextTopicMatch \n        ? tableEndIndex + html.slice(tableEndIndex).indexOf(nextTopicMatch[0])\n        : html.length;\n    \n    // Extrai apenas o conteúdo entre o tópico atual e o próximo\n    const sectionContent = html.substring(topicIndex, nextTopicIndex);\n    \n    // Encontra a tabela dentro desta seção\n    const tableMatch = sectionContent.match(/<table[^>]*>[\\s\\S]*?<\\/table>/i);\n    \n    return tableMatch ? tableMatch[0] : null;\n};\n\n// Define o tópico desejado\nconst topic = \"SANTA CATARINA\";\n\n// Extrai a tabela associada ao tópico\nconst tableContent = extractTableByTopic(htmlContent, topic);\n\nif (!tableContent) {\n    return { json: { error: `Tabela não encontrada para o tópico: ${topic}` } };\n}\n\n// Processa a tabela e retorna os dados formatados\nconst processedData = extractRows(tableContent);\n\n// Retorna os dados processados\nreturn { json: { \n    estado: topic,\n    dados: processedData \n}};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        460
      ],
      "id": "d45d21a2-6074-4da4-99e7-dfd706a01582",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d6d3279f-4f76-4c10-bbf0-1483f4b10013",
              "leftValue": "={{ $json.ncm.replace(/[^\\w\\s]/g, '') }}",
              "rightValue": "={{ $('structureMessage').item.json.NCM.replace(/[^\\w\\s]/g, '') }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "5cbce51c-ff28-4feb-ac57-8a9df369766b",
              "leftValue": "={{ $json.ncm.replace(/[^\\w\\s]/g, '') }}",
              "rightValue": "={{ $('structureMessage').item.json.NCM.replace(/[^\\w\\s]/g, '').slice(0, 4) }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "4ee56877-6137-4993-ab9d-fefc8977012d",
              "leftValue": "={{ $json.ncm.replace(/[^\\w\\s]/g, '') }}",
              "rightValue": "={{ $('structureMessage').item.json.NCM.replace(/[^\\w\\s]/g, '').slice(0, 2) }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        400,
        460
      ],
      "id": "8d12eee7-1124-465e-a44d-7ad967eee9e3",
      "name": "Filter",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "dados",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        180,
        460
      ],
      "id": "7d4220e7-335f-4da3-9c5b-5ecb18074c12",
      "name": "Split Out"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "criticalAnalysisSixthStep",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a13eee5f-f9a6-4a3b-8500-33d77d016b41",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -660,
        460
      ],
      "webhookId": "79df8c11-367e-48d0-9e2e-26c3e88d86ec"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "29be72bc-7363-4070-8f5d-8b7cd6256fb5",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3060,
        460
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "dab0b493-12e2-4597-aa66-5fae8d125873",
              "leftValue": "={{ $('formatMessage').item.json.estado_importador }}",
              "rightValue": "=SC",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9468e443-65a1-4e5a-822d-55871139fc69",
      "name": "checkStateIsSC",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        1580,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://flowise.interseas-caprover.startse.com/api/v1/prediction/448e7ee2-963f-4b16-8a1f-64449476d0b6",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "question",
              "value": "=NCM: {{ $json.NCM }} Estado_importador: {{ $json.estado_importador }} chave:{{ $('formatMessage').item.json.valor_bk }} Aliquota:{{ $('Filter').first().json.aliquota}}%{{ $('Filter').first().json.descricao }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1380,
        300
      ],
      "id": "e9e729a8-b0b3-40bb-94a3-4f28a7b46c21",
      "name": "POST.ICMS"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-16T15:50:17.549Z",
      "updatedAt": "2024-12-16T15:50:17.549Z",
      "id": "90BsZzaKRkurBY1q",
      "name": "Prod"
    },
    {
      "createdAt": "2025-02-05T19:24:04.517Z",
      "updatedAt": "2025-02-05T19:24:04.517Z",
      "id": "QjzCPV3nhLBek2xR",
      "name": "Análise Crítica"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-02-13T20:09:58.546Z",
  "versionId": "3eaf121a-05dc-4cd2-ab3b-8e926bac8b35"
}