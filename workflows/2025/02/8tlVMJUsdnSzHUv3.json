{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-02-13T13:57:54.165Z",
  "id": "8tlVMJUsdnSzHUv3",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Logs",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "ee5f48e2-36f6-4b9e-86bc-75b3dcd22b42",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    e.\"workflowId\",\n    w.\"name\" as workflow_name,\n    COUNT(*) as total_executions,\n    COUNT(CASE WHEN e.\"status\" = 'failed' THEN 1 END) as total_failures,\n    MIN(EXTRACT(EPOCH FROM (e.\"stoppedAt\" - e.\"startedAt\"))) as min_duration_seconds,\n    MAX(EXTRACT(EPOCH FROM (e.\"stoppedAt\" - e.\"startedAt\"))) as max_duration_seconds,\n    AVG(EXTRACT(EPOCH FROM (e.\"stoppedAt\" - e.\"startedAt\"))) as avg_duration_seconds,\n    PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (e.\"stoppedAt\" - e.\"startedAt\"))) as p50_seconds,\n    PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (e.\"stoppedAt\" - e.\"startedAt\"))) as p90_seconds,\n    PERCENTILE_CONT(0.99) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (e.\"stoppedAt\" - e.\"startedAt\"))) as p99_seconds\nFROM \n    execution_entity e\n    LEFT JOIN workflow_entity w ON e.\"workflowId\" = w.\"id\"\nWHERE \n    e.\"startedAt\" IS NOT NULL \n    AND e.\"stoppedAt\" IS NOT NULL\n    AND e.\"deletedAt\" IS NULL\nGROUP BY \n    e.\"workflowId\",\n    w.\"name\"\nORDER BY \n    avg_duration_seconds DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        220,
        0
      ],
      "id": "dda42c32-5c7f-4bfb-967b-238174dd2c81",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "FQZjBr8il6TWmioz",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all();\n\nfunction formatWorkflowName(name) {\n   return name\n       .replace('[prod] - ', '')\n       .replace('[dev] - ', '')\n       .replace('Análise crítica | ', '')\n       .replace('Tratamento tributário - Tributos e contribuições federais', 'Tributos Federais')\n       .replace('Tratamento Administrativo', 'Trat. Administrativo')\n       .replace('RESOLUÇÃO', 'RES')\n       .replace('Importação', 'Imp.');\n}\n\nfunction generatePercentilsChart(data) {\n   const topWorkflows = data.slice(0, 10);\n   const labels = topWorkflows.map(w => formatWorkflowName(w.json.workflow_name));\n   \n   const chartConfig = {\n       type: 'bar',\n       data: {\n           labels: labels,\n           datasets: [\n               {\n                   label: 'P50',\n                   data: topWorkflows.map(w => Number(w.json.p50_seconds)),\n                   backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                   borderColor: 'rgb(54, 162, 235)',\n                   borderWidth: 1\n               },\n               {\n                   label: 'Média',\n                   data: topWorkflows.map(w => Number(w.json.avg_duration_seconds)),\n                   backgroundColor: 'rgba(255, 206, 86, 0.5)',\n                   borderColor: 'rgb(255, 206, 86)',\n                   borderWidth: 1\n               },\n               {\n                   label: 'P90',\n                   data: topWorkflows.map(w => Number(w.json.p90_seconds)),\n                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                   borderColor: 'rgb(255, 99, 132)',\n                   borderWidth: 1\n               },\n               {\n                   label: 'P99',\n                   data: topWorkflows.map(w => Number(w.json.p99_seconds)),\n                   backgroundColor: 'rgba(75, 192, 192, 0.5)',\n                   borderColor: 'rgb(75, 192, 192)',\n                   borderWidth: 1\n               }\n           ]\n       },\n       options: {\n           indexAxis: 'y',\n           plugins: {\n               title: {\n                   display: true,\n                   text: 'Métricas de Tempo de Execução por Workflow (segundos)',\n                   font: { size: 16 }\n               },\n               legend: { position: 'top' }\n           },\n           scales: {\n               x: { \n                   beginAtZero: true,\n                   grid: {\n                       display: true\n                   }\n               },\n               y: {\n                   ticks: {\n                       font: { size: 11 }\n                   },\n                   grid: {\n                       display: false\n                   }\n               }\n           },\n           layout: {\n               padding: {\n                   left: 20,\n                   right: 20\n               }\n           },\n           maintainAspectRatio: false,\n           height: 400\n       }\n   };\n\n   return `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(chartConfig))}&h=400`;\n}\n\nfunction generateMinMaxChart(data) {\n   const topWorkflows = data.slice(0, 10);\n   const labels = topWorkflows.map(w => formatWorkflowName(w.json.workflow_name));\n   \n   const chartConfig = {\n       type: 'bar',\n       data: {\n           labels: labels,\n           datasets: [\n               {\n                   label: 'Mínimo',\n                   data: topWorkflows.map(w => Number(w.json.min_duration_seconds)),\n                   backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                   borderColor: 'rgb(54, 162, 235)',\n                   borderWidth: 1\n               },\n               {\n                   label: 'Máximo',\n                   data: topWorkflows.map(w => Number(w.json.max_duration_seconds)),\n                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                   borderColor: 'rgb(255, 99, 132)',\n                   borderWidth: 1\n               }\n           ]\n       },\n       options: {\n           indexAxis: 'y',\n           plugins: {\n               title: {\n                   display: true,\n                   text: 'Tempo Mínimo e Máximo por Workflow (segundos)',\n                   font: { size: 16 }\n               },\n               legend: { position: 'top' }\n           },\n           scales: {\n               x: { \n                   beginAtZero: true,\n                   grid: {\n                       display: true\n                   }\n               },\n               y: {\n                   ticks: {\n                       font: { size: 11 }\n                   },\n                   grid: {\n                       display: false\n                   }\n               }\n           },\n           layout: {\n               padding: {\n                   left: 20,\n                   right: 20\n               }\n           },\n           maintainAspectRatio: false,\n           height: 400\n       }\n   };\n\n   return `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(chartConfig))}&h=400`;\n}\n\nfunction generateExecutionsChart(data) {\n   const topWorkflows = data.slice(0, 10);\n   const labels = topWorkflows.map(w => formatWorkflowName(w.json.workflow_name));\n   \n   const chartConfig = {\n       type: 'bar',\n       data: {\n           labels: labels,\n           datasets: [\n               {\n                   label: 'Total Execuções',\n                   data: topWorkflows.map(w => Number(w.json.total_executions)),\n                   backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                   borderColor: 'rgb(54, 162, 235)',\n                   borderWidth: 1\n               },\n               {\n                   label: 'Falhas',\n                   data: topWorkflows.map(w => Number(w.json.total_failures)),\n                   backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                   borderColor: 'rgb(255, 99, 132)',\n                   borderWidth: 1\n               }\n           ]\n       },\n       options: {\n           indexAxis: 'y',\n           plugins: {\n               title: {\n                   display: true,\n                   text: 'Total de Execuções e Falhas por Workflow',\n                   font: { size: 16 }\n               },\n               legend: { position: 'top' }\n           },\n           scales: {\n               x: { \n                   beginAtZero: true,\n                   grid: {\n                       display: true\n                   }\n               },\n               y: {\n                   ticks: {\n                       font: { size: 11 }\n                   },\n                   grid: {\n                       display: false\n                   }\n               }\n           },\n           layout: {\n               padding: {\n                   left: 20,\n                   right: 20\n               }\n           },\n           maintainAspectRatio: false,\n           height: 400\n       }\n   };\n\n   return `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(chartConfig))}&h=400`;\n}\n\n// Retornar as três URLs\nreturn [{\n   json: {\n       percentilsUrl: generatePercentilsChart(data),\n       minMaxUrl: generateMinMaxChart(data),\n       executionsUrl: generateExecutionsChart(data)\n   }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        0
      ],
      "id": "f295f37c-ba37-47c8-845e-350e0fce2d67",
      "name": "Code"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-test",
  "repo_owner": "VitorNakagawaL",
  "repo_path": "workflows/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-02-13T14:55:56.484Z",
  "versionId": "c78a95d4-61c4-4673-a7b7-6fe218e3df4b"
}